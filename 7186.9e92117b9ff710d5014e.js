"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[7186,1611],{97186:(e,n,t)=>{t.r(n);t.d(n,{default:()=>k});var a=t(49655);var r=t.n(a);var i=t(87447);var s=t.n(i);var o=t(16179);var c=t.n(o);var l=t(95009);var d=t.n(l);var m=t(45114);var u=t.n(m);var h=t(4702);var f=t.n(h);var p=t(68299);var _=t.n(p);var g=t(54103);var v=t.n(g);var w=t(50724);var y=t.n(w);var b=t(27425);var I=t.n(b);var T=t(65178);var C=t.n(T);var M;(function(e){e.copy="terminal:copy";e.createNew="terminal:create-new";e.open="terminal:open";e.refresh="terminal:refresh";e.increaseFont="terminal:increase-font";e.decreaseFont="terminal:decrease-font";e.paste="terminal:paste";e.setTheme="terminal:set-theme";e.shutdown="terminal:shut-down"})(M||(M={}));const S={activate:E,id:"@jupyterlab/terminal-extension:plugin",description:"Adds terminal and provides its tracker.",provides:g.ITerminalTracker,requires:[p.ISettingRegistry,w.ITranslator],optional:[i.ICommandPalette,o.ILauncher,a.ILayoutRestorer,l.IMainMenu,i.IThemeManager,m.IRunningSessionManagers],autoStart:true};const k=S;function E(e,n,t,a,r,s,o,c,l){const d=t.load("jupyterlab");const{serviceManager:m,commands:u}=e;const h=d.__("Terminal");const f="terminal";const p=new i.WidgetTracker({namespace:f});if(!m.terminals.isAvailable()){console.warn("Disabling terminals plugin because they are not available on the server");return p}if(s){void s.restore(p,{command:M.createNew,args:e=>({name:e.content.session.name}),name:e=>e.content.session.name})}const _={};function g(e){Object.keys(e.composite).forEach((n=>{_[n]=e.composite[n]}))}function v(e){const n=e.content;if(!n){return}Object.keys(_).forEach((e=>{n.setOption(e,_[e])}))}function w(){p.forEach((e=>v(e)))}n.load(S.id).then((e=>{g(e);w();e.changed.connect((()=>{g(e);w()}))})).catch(x.showErrorMessage);c===null||c===void 0?void 0:c.themeChanged.connect(((e,n)=>{p.forEach((e=>{const n=e.content;if(n.getOption("theme")==="inherit"){n.setOption("theme","inherit")}}))}));P(e,p,n,t,_);if(o){const e=new T.Menu({commands:u});e.title.label=d._p("menu","Terminal Theme");e.addItem({command:M.setTheme,args:{theme:"inherit",displayName:d.__("Inherit"),isPalette:false}});e.addItem({command:M.setTheme,args:{theme:"light",displayName:d.__("Light"),isPalette:false}});e.addItem({command:M.setTheme,args:{theme:"dark",displayName:d.__("Dark"),isPalette:false}});o.settingsMenu.addGroup([{command:M.increaseFont},{command:M.decreaseFont},{type:"submenu",submenu:e}],40);o.fileMenu.newMenu.addItem({command:M.createNew,rank:20});o.fileMenu.closeAndCleaners.add({id:M.shutdown,isEnabled:e=>p.currentWidget!==null&&p.has(e)})}if(a){[M.createNew,M.refresh,M.increaseFont,M.decreaseFont].forEach((e=>{a.addItem({command:e,category:h,args:{isPalette:true}})}));a.addItem({command:M.setTheme,category:h,args:{theme:"inherit",displayName:d.__("Inherit"),isPalette:true}});a.addItem({command:M.setTheme,category:h,args:{theme:"light",displayName:d.__("Light"),isPalette:true}});a.addItem({command:M.setTheme,category:h,args:{theme:"dark",displayName:d.__("Dark"),isPalette:true}})}if(r){r.add({command:M.createNew,category:d.__("Other"),rank:0})}if(l){N(l,e,t)}return p}function N(e,n,t){const a=t.load("jupyterlab");const r=n.serviceManager.terminals;class i{constructor(e){this._model=e}open(){void n.commands.execute("terminal:open",{name:this._model.name})}icon(){return b.terminalIcon}label(){return`terminals/${this._model.name}`}shutdown(){return r.shutdown(this._model.name)}}e.add({name:a.__("Terminals"),running:()=>Array.from(r.running()).map((e=>new i(e))),shutdownAll:()=>r.shutdownAll(),refreshRunning:()=>r.refreshRunning(),runningChanged:r.runningChanged,shutdownLabel:a.__("Shut Down"),shutdownAllLabel:a.__("Shut Down All"),shutdownAllConfirmationText:a.__("Are you sure you want to permanently shut down all running terminals?")})}function P(e,n,t,a,r){const s=a.load("jupyterlab");const{commands:o,serviceManager:c}=e;const l=()=>n.currentWidget!==null&&n.currentWidget===e.shell.currentWidget;o.addCommand(M.createNew,{label:e=>e["isPalette"]?s.__("New Terminal"):s.__("Terminal"),caption:s.__("Start a new terminal session"),icon:e=>e["isPalette"]?undefined:b.terminalIcon,execute:async t=>{const s=t["name"];const o=t["cwd"];const l=o?c.contents.localPath(o):undefined;let d;if(s){const e=await h.TerminalAPI.listRunning();if(e.map((e=>e.name)).includes(s)){d=c.terminals.connectTo({model:{name:s}})}else{d=await c.terminals.startNew({name:s,cwd:l})}}else{d=await c.terminals.startNew({cwd:l})}const m=new g.Terminal(d,r,a);m.title.icon=b.terminalIcon;m.title.label="...";const u=new i.MainAreaWidget({content:m,reveal:m.ready});e.shell.add(u,"main",{type:"Terminal"});void n.add(u);e.shell.activateById(u.id);return u}});o.addCommand(M.open,{label:s.__("Open a terminal by its `name`."),execute:t=>{const a=t["name"];const r=n.find((e=>{const n=e.content;return n.session.name===a||false}));if(r){e.shell.activateById(r.id)}else{return o.execute(M.createNew,{name:a})}}});o.addCommand(M.refresh,{label:s.__("Refresh Terminal"),caption:s.__("Refresh the current terminal session"),execute:async()=>{const t=n.currentWidget;if(!t){return}e.shell.activateById(t.id);try{await t.content.refresh();if(t){t.content.activate()}}catch(a){x.showErrorMessage(a)}},icon:e=>e["isPalette"]?undefined:b.refreshIcon.bindprops({stylesheet:"menuItem"}),isEnabled:l});o.addCommand(M.copy,{execute:()=>{var e;const t=(e=n.currentWidget)===null||e===void 0?void 0:e.content;if(!t){return}const a=t.getSelection();if(a){i.Clipboard.copyToSystem(a)}},isEnabled:()=>{var e;if(!l()){return false}const t=(e=n.currentWidget)===null||e===void 0?void 0:e.content;if(!t){return false}return t.hasSelection()},icon:b.copyIcon.bindprops({stylesheet:"menuItem"}),label:s.__("Copy")});o.addCommand(M.paste,{execute:async()=>{var e;const t=(e=n.currentWidget)===null||e===void 0?void 0:e.content;if(!t){return}const a=window.navigator.clipboard;const r=await a.readText();if(r){t.paste(r)}},isEnabled:()=>{var e;return Boolean(l()&&((e=n.currentWidget)===null||e===void 0?void 0:e.content))},icon:b.pasteIcon.bindprops({stylesheet:"menuItem"}),label:s.__("Paste")});o.addCommand(M.shutdown,{label:s.__("Shutdown Terminal"),execute:()=>{const e=n.currentWidget;if(!e){return}return e.content.session.shutdown()},isEnabled:l});o.addCommand(M.increaseFont,{label:s.__("Increase Terminal Font Size"),execute:async()=>{const{fontSize:e}=r;if(e&&e<72){try{await t.set(S.id,"fontSize",e+1)}catch(n){x.showErrorMessage(n)}}}});o.addCommand(M.decreaseFont,{label:s.__("Decrease Terminal Font Size"),execute:async()=>{const{fontSize:e}=r;if(e&&e>9){try{await t.set(S.id,"fontSize",e-1)}catch(n){x.showErrorMessage(n)}}}});const d={inherit:s.__("Inherit"),light:s.__("Light"),dark:s.__("Dark")};o.addCommand(M.setTheme,{label:e=>{if(e.theme===undefined){return s.__("Set terminal theme to the provided `theme`.")}const n=e["theme"];const t=n in d?d[n]:s.__(n[0].toUpperCase()+n.slice(1));return e["isPalette"]?s.__("Use Terminal Theme: %1",t):t},caption:s.__("Set the terminal theme"),isToggled:e=>{const{theme:n}=r;return e["theme"]===n},execute:async e=>{const n=e["theme"];try{await t.set(S.id,"theme",n);o.notifyCommandChanged(M.setTheme)}catch(a){console.log(a);x.showErrorMessage(a)}}})}var x;(function(e){function n(e){console.error(`Failed to configure ${S.id}: ${e.message}`)}e.showErrorMessage=n})(x||(x={}))}}]);
//# sourceMappingURL=7186.9e92117b9ff710d5014e.js.map?v=9e92117b9ff710d5014e