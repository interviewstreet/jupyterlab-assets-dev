"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[1102,3808,2886],{1102:(e,t,n)=>{n.r(t);n.d(t,{default:()=>j});var i=n(49655);var r=n.n(i);var a=n(87447);var o=n.n(a);var d=n(52959);var s=n.n(d);var c=n(27425);var l=n.n(c);var u=n(59238);var g=n.n(u);var v=n(73808);var p=n(90433);var m=n.n(p);var y=n(68299);var S=n.n(y);var b=n(26375);var f=n.n(b);var I=n(50724);var h=n.n(I);var w;(function(e){e.open="settingeditor:open";e.openJSON="settingeditor:open-json";e.revert="settingeditor:revert";e.save="settingeditor:save"})(w||(w={}));const _={id:"@jupyterlab/settingeditor-extension:form-ui",description:"Adds the interactive settings editor and provides its tracker.",requires:[y.ISettingRegistry,b.IStateDB,I.ITranslator,c.IFormRendererRegistry,i.ILabStatus],optional:[i.ILayoutRestorer,a.ICommandPalette,v.g,p.IPluginManager],autoStart:true,provides:v.O,activate:k};function k(e,t,i,r,o,d,s,l,u,g){const v=r.load("jupyterlab");const{commands:p,shell:m}=e;const y="setting-editor";const S=new a.WidgetTracker({namespace:y});if(s){void s.restore(S,{command:w.open,args:e=>({}),name:e=>y})}const b=async e=>{if(S.currentWidget&&!S.currentWidget.isDisposed){if(!S.currentWidget.isAttached){m.add(S.currentWidget,"main",{type:"Settings"})}m.activateById(S.currentWidget.id);return}const s=_.id;const{SettingsEditor:l}=await n.e(7078).then(n.t.bind(n,77078,23));const b=new a.MainAreaWidget({content:new l({editorRegistry:o,key:s,registry:t,state:i,commands:p,toSkip:["@jupyterlab/application-extension:context-menu","@jupyterlab/mainmenu-extension:plugin"],translator:r,status:d,query:e.query})});b.toolbar.addItem("spacer",c.Toolbar.createSpacerItem());if(g){b.toolbar.addItem("open-plugin-manager",new c.ToolbarButton({onClick:async()=>{await g.open()},icon:c.launchIcon,label:v.__("Plugin Manager")}))}if(u){b.toolbar.addItem("open-json-editor",new c.CommandToolbarButton({commands:p,id:w.openJSON,icon:c.launchIcon,label:v.__("JSON Settings Editor")}))}b.id=y;b.title.icon=c.settingsIcon;b.title.label=v.__("Settings");b.title.closable=true;void S.add(b);m.add(b,"main",{type:"Settings"})};p.addCommand(w.open,{execute:async e=>{var n;if(e.settingEditorType==="ui"){void p.execute(w.open,{query:(n=e.query)!==null&&n!==void 0?n:""})}else if(e.settingEditorType==="json"){void p.execute(w.openJSON)}else{void t.load(_.id).then((t=>{var n;t.get("settingEditorType").composite==="json"?void p.execute(w.openJSON):void b({query:(n=e.query)!==null&&n!==void 0?n:""})}))}},label:e=>{if(e.label){return e.label}return v.__("Settings Editor")}});if(l){l.addItem({category:v.__("Settings"),command:w.open,args:{settingEditorType:"ui"}})}return S}const W={id:"@jupyterlab/settingeditor-extension:plugin",description:"Adds the JSON settings editor and provides its tracker.",requires:[y.ISettingRegistry,d.IEditorServices,b.IStateDB,u.IRenderMimeRegistry,i.ILabStatus,I.ITranslator],optional:[i.ILayoutRestorer,a.ICommandPalette],autoStart:true,provides:v.g,activate:E};function E(e,t,i,r,o,d,s,l,u){const g=s.load("jupyterlab");const{commands:v,shell:p}=e;const m="json-setting-editor";const y=i.factoryService;const S=y.newInlineEditor;const b=new a.WidgetTracker({namespace:m});if(l){void l.restore(b,{command:w.openJSON,args:e=>({}),name:e=>m})}v.addCommand(w.openJSON,{execute:async()=>{if(b.currentWidget&&!b.currentWidget.isDisposed){if(!b.currentWidget.isAttached){p.add(b.currentWidget,"main",{type:"Advanced Settings"})}p.activateById(b.currentWidget.id);return}const i=_.id;const l=e.restored;const{JsonSettingEditor:u}=await n.e(7078).then(n.t.bind(n,77078,23));const y=new u({commands:{registry:v,revert:w.revert,save:w.save},editorFactory:S,key:i,registry:t,rendermime:o,state:r,translator:s,when:l});let f=null;y.commandsChanged.connect(((e,t)=>{t.forEach((e=>{v.notifyCommandChanged(e)}));if(y.canSaveRaw){if(!f){f=d.setDirty()}}else if(f){f.dispose();f=null}y.disposed.connect((()=>{if(f){f.dispose()}}))}));const I=new a.MainAreaWidget({content:y});I.id=m;I.title.icon=c.settingsIcon;I.title.label=g.__("Advanced Settings Editor");I.title.closable=true;void b.add(I);p.add(I,"main",{type:"Advanced Settings"})},label:g.__("Advanced Settings Editor")});if(u){u.addItem({category:g.__("Settings"),command:w.openJSON})}v.addCommand(w.revert,{execute:()=>{var e;(e=b.currentWidget)===null||e===void 0?void 0:e.content.revert()},icon:c.undoIcon,label:g.__("Revert User Settings"),isEnabled:()=>{var e,t;return(t=(e=b.currentWidget)===null||e===void 0?void 0:e.content.canRevertRaw)!==null&&t!==void 0?t:false}});v.addCommand(w.save,{execute:()=>{var e;return(e=b.currentWidget)===null||e===void 0?void 0:e.content.save()},icon:c.saveIcon,label:g.__("Save User Settings"),isEnabled:()=>{var e,t;return(t=(e=b.currentWidget)===null||e===void 0?void 0:e.content.canSaveRaw)!==null&&t!==void 0?t:false}});return b}const j=[_,W]},73808:(e,t,n)=>{n.d(t,{O:()=>a,g:()=>o});var i=n(55172);var r=n.n(i);const a=new i.Token("@jupyterlab/settingeditor:ISettingEditorTracker",`A widget tracker for the interactive setting editor.\n  Use this if you want to be able to iterate over and interact with setting editors\n  created by the application.`);const o=new i.Token("@jupyterlab/settingeditor:IJSONSettingEditorTracker",`A widget tracker for the JSON setting editor.\n  Use this if you want to be able to iterate over and interact with setting editors\n  created by the application.`)}}]);
//# sourceMappingURL=1102.e13087033c8aa545d034.js.map?v=e13087033c8aa545d034