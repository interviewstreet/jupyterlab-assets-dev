(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["vendors-node_modules_react-json-tree_lib_index_js"],{

/***/ "../../node_modules/base16/lib/apathy.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/apathy.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'apathy',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#031A16',
  base01: '#0B342D',
  base02: '#184E45',
  base03: '#2B685E',
  base04: '#5F9C92',
  base05: '#81B5AC',
  base06: '#A7CEC8',
  base07: '#D2E7E4',
  base08: '#3E9688',
  base09: '#3E7996',
  base0A: '#3E4C96',
  base0B: '#883E96',
  base0C: '#963E4C',
  base0D: '#96883E',
  base0E: '#4C963E',
  base0F: '#3E965B'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/ashes.js":
/*!**********************************************!*\
  !*** ../../node_modules/base16/lib/ashes.js ***!
  \**********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'ashes',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#1C2023',
  base01: '#393F45',
  base02: '#565E65',
  base03: '#747C84',
  base04: '#ADB3BA',
  base05: '#C7CCD1',
  base06: '#DFE2E5',
  base07: '#F3F4F5',
  base08: '#C7AE95',
  base09: '#C7C795',
  base0A: '#AEC795',
  base0B: '#95C7AE',
  base0C: '#95AEC7',
  base0D: '#AE95C7',
  base0E: '#C795AE',
  base0F: '#C79595'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/atelier-dune.js":
/*!*****************************************************!*\
  !*** ../../node_modules/base16/lib/atelier-dune.js ***!
  \*****************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'atelier dune',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)',
  base00: '#20201d',
  base01: '#292824',
  base02: '#6e6b5e',
  base03: '#7d7a68',
  base04: '#999580',
  base05: '#a6a28c',
  base06: '#e8e4cf',
  base07: '#fefbec',
  base08: '#d73737',
  base09: '#b65611',
  base0A: '#cfb017',
  base0B: '#60ac39',
  base0C: '#1fad83',
  base0D: '#6684e1',
  base0E: '#b854d4',
  base0F: '#d43552'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/atelier-forest.js":
/*!*******************************************************!*\
  !*** ../../node_modules/base16/lib/atelier-forest.js ***!
  \*******************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'atelier forest',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)',
  base00: '#1b1918',
  base01: '#2c2421',
  base02: '#68615e',
  base03: '#766e6b',
  base04: '#9c9491',
  base05: '#a8a19f',
  base06: '#e6e2e0',
  base07: '#f1efee',
  base08: '#f22c40',
  base09: '#df5320',
  base0A: '#d5911a',
  base0B: '#5ab738',
  base0C: '#00ad9c',
  base0D: '#407ee7',
  base0E: '#6666ea',
  base0F: '#c33ff3'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/atelier-heath.js":
/*!******************************************************!*\
  !*** ../../node_modules/base16/lib/atelier-heath.js ***!
  \******************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'atelier heath',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)',
  base00: '#1b181b',
  base01: '#292329',
  base02: '#695d69',
  base03: '#776977',
  base04: '#9e8f9e',
  base05: '#ab9bab',
  base06: '#d8cad8',
  base07: '#f7f3f7',
  base08: '#ca402b',
  base09: '#a65926',
  base0A: '#bb8a35',
  base0B: '#379a37',
  base0C: '#159393',
  base0D: '#516aec',
  base0E: '#7b59c0',
  base0F: '#cc33cc'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/atelier-lakeside.js":
/*!*********************************************************!*\
  !*** ../../node_modules/base16/lib/atelier-lakeside.js ***!
  \*********************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'atelier lakeside',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)',
  base00: '#161b1d',
  base01: '#1f292e',
  base02: '#516d7b',
  base03: '#5a7b8c',
  base04: '#7195a8',
  base05: '#7ea2b4',
  base06: '#c1e4f6',
  base07: '#ebf8ff',
  base08: '#d22d72',
  base09: '#935c25',
  base0A: '#8a8a0f',
  base0B: '#568c3b',
  base0C: '#2d8f6f',
  base0D: '#257fad',
  base0E: '#5d5db1',
  base0F: '#b72dd2'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/atelier-seaside.js":
/*!********************************************************!*\
  !*** ../../node_modules/base16/lib/atelier-seaside.js ***!
  \********************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'atelier seaside',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)',
  base00: '#131513',
  base01: '#242924',
  base02: '#5e6e5e',
  base03: '#687d68',
  base04: '#809980',
  base05: '#8ca68c',
  base06: '#cfe8cf',
  base07: '#f0fff0',
  base08: '#e6193c',
  base09: '#87711d',
  base0A: '#c3c322',
  base0B: '#29a329',
  base0C: '#1999b3',
  base0D: '#3d62f5',
  base0E: '#ad2bee',
  base0F: '#e619c3'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/bespin.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/bespin.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'bespin',
  author: 'jan t. sott',
  base00: '#28211c',
  base01: '#36312e',
  base02: '#5e5d5c',
  base03: '#666666',
  base04: '#797977',
  base05: '#8a8986',
  base06: '#9d9b97',
  base07: '#baae9e',
  base08: '#cf6a4c',
  base09: '#cf7d34',
  base0A: '#f9ee98',
  base0B: '#54be0d',
  base0C: '#afc4db',
  base0D: '#5ea6ea',
  base0E: '#9b859d',
  base0F: '#937121'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/brewer.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/brewer.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'brewer',
  author: 'timothÃ©e poisot (http://github.com/tpoisot)',
  base00: '#0c0d0e',
  base01: '#2e2f30',
  base02: '#515253',
  base03: '#737475',
  base04: '#959697',
  base05: '#b7b8b9',
  base06: '#dadbdc',
  base07: '#fcfdfe',
  base08: '#e31a1c',
  base09: '#e6550d',
  base0A: '#dca060',
  base0B: '#31a354',
  base0C: '#80b1d3',
  base0D: '#3182bd',
  base0E: '#756bb1',
  base0F: '#b15928'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/bright.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/bright.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'bright',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#000000',
  base01: '#303030',
  base02: '#505050',
  base03: '#b0b0b0',
  base04: '#d0d0d0',
  base05: '#e0e0e0',
  base06: '#f5f5f5',
  base07: '#ffffff',
  base08: '#fb0120',
  base09: '#fc6d24',
  base0A: '#fda331',
  base0B: '#a1c659',
  base0C: '#76c7b7',
  base0D: '#6fb3d2',
  base0E: '#d381c3',
  base0F: '#be643c'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/chalk.js":
/*!**********************************************!*\
  !*** ../../node_modules/base16/lib/chalk.js ***!
  \**********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'chalk',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#151515',
  base01: '#202020',
  base02: '#303030',
  base03: '#505050',
  base04: '#b0b0b0',
  base05: '#d0d0d0',
  base06: '#e0e0e0',
  base07: '#f5f5f5',
  base08: '#fb9fb1',
  base09: '#eda987',
  base0A: '#ddb26f',
  base0B: '#acc267',
  base0C: '#12cfc0',
  base0D: '#6fc2ef',
  base0E: '#e1a3ee',
  base0F: '#deaf8f'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/codeschool.js":
/*!***************************************************!*\
  !*** ../../node_modules/base16/lib/codeschool.js ***!
  \***************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'codeschool',
  author: 'brettof86',
  base00: '#232c31',
  base01: '#1c3657',
  base02: '#2a343a',
  base03: '#3f4944',
  base04: '#84898c',
  base05: '#9ea7a6',
  base06: '#a7cfa3',
  base07: '#b5d8f6',
  base08: '#2a5491',
  base09: '#43820d',
  base0A: '#a03b1e',
  base0B: '#237986',
  base0C: '#b02f30',
  base0D: '#484d79',
  base0E: '#c59820',
  base0F: '#c98344'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/colors.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/colors.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'colors',
  author: 'mrmrs (http://clrs.cc)',
  base00: '#111111',
  base01: '#333333',
  base02: '#555555',
  base03: '#777777',
  base04: '#999999',
  base05: '#bbbbbb',
  base06: '#dddddd',
  base07: '#ffffff',
  base08: '#ff4136',
  base09: '#ff851b',
  base0A: '#ffdc00',
  base0B: '#2ecc40',
  base0C: '#7fdbff',
  base0D: '#0074d9',
  base0E: '#b10dc9',
  base0F: '#85144b'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/default.js":
/*!************************************************!*\
  !*** ../../node_modules/base16/lib/default.js ***!
  \************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'default',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#181818',
  base01: '#282828',
  base02: '#383838',
  base03: '#585858',
  base04: '#b8b8b8',
  base05: '#d8d8d8',
  base06: '#e8e8e8',
  base07: '#f8f8f8',
  base08: '#ab4642',
  base09: '#dc9656',
  base0A: '#f7ca88',
  base0B: '#a1b56c',
  base0C: '#86c1b9',
  base0D: '#7cafc2',
  base0E: '#ba8baf',
  base0F: '#a16946'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/eighties.js":
/*!*************************************************!*\
  !*** ../../node_modules/base16/lib/eighties.js ***!
  \*************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'eighties',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#2d2d2d',
  base01: '#393939',
  base02: '#515151',
  base03: '#747369',
  base04: '#a09f93',
  base05: '#d3d0c8',
  base06: '#e8e6df',
  base07: '#f2f0ec',
  base08: '#f2777a',
  base09: '#f99157',
  base0A: '#ffcc66',
  base0B: '#99cc99',
  base0C: '#66cccc',
  base0D: '#6699cc',
  base0E: '#cc99cc',
  base0F: '#d27b53'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/embers.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/embers.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'embers',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#16130F',
  base01: '#2C2620',
  base02: '#433B32',
  base03: '#5A5047',
  base04: '#8A8075',
  base05: '#A39A90',
  base06: '#BEB6AE',
  base07: '#DBD6D1',
  base08: '#826D57',
  base09: '#828257',
  base0A: '#6D8257',
  base0B: '#57826D',
  base0C: '#576D82',
  base0D: '#6D5782',
  base0E: '#82576D',
  base0F: '#825757'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/flat.js":
/*!*********************************************!*\
  !*** ../../node_modules/base16/lib/flat.js ***!
  \*********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'flat',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#2C3E50',
  base01: '#34495E',
  base02: '#7F8C8D',
  base03: '#95A5A6',
  base04: '#BDC3C7',
  base05: '#e0e0e0',
  base06: '#f5f5f5',
  base07: '#ECF0F1',
  base08: '#E74C3C',
  base09: '#E67E22',
  base0A: '#F1C40F',
  base0B: '#2ECC71',
  base0C: '#1ABC9C',
  base0D: '#3498DB',
  base0E: '#9B59B6',
  base0F: '#be643c'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/google.js":
/*!***********************************************!*\
  !*** ../../node_modules/base16/lib/google.js ***!
  \***********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'google',
  author: 'seth wright (http://sethawright.com)',
  base00: '#1d1f21',
  base01: '#282a2e',
  base02: '#373b41',
  base03: '#969896',
  base04: '#b4b7b4',
  base05: '#c5c8c6',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#CC342B',
  base09: '#F96A38',
  base0A: '#FBA922',
  base0B: '#198844',
  base0C: '#3971ED',
  base0D: '#3971ED',
  base0E: '#A36AC7',
  base0F: '#3971ED'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/grayscale.js":
/*!**************************************************!*\
  !*** ../../node_modules/base16/lib/grayscale.js ***!
  \**************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'grayscale',
  author: 'alexandre gavioli (https://github.com/alexx2/)',
  base00: '#101010',
  base01: '#252525',
  base02: '#464646',
  base03: '#525252',
  base04: '#ababab',
  base05: '#b9b9b9',
  base06: '#e3e3e3',
  base07: '#f7f7f7',
  base08: '#7c7c7c',
  base09: '#999999',
  base0A: '#a0a0a0',
  base0B: '#8e8e8e',
  base0C: '#868686',
  base0D: '#686868',
  base0E: '#747474',
  base0F: '#5e5e5e'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/greenscreen.js":
/*!****************************************************!*\
  !*** ../../node_modules/base16/lib/greenscreen.js ***!
  \****************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'green screen',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#001100',
  base01: '#003300',
  base02: '#005500',
  base03: '#007700',
  base04: '#009900',
  base05: '#00bb00',
  base06: '#00dd00',
  base07: '#00ff00',
  base08: '#007700',
  base09: '#009900',
  base0A: '#007700',
  base0B: '#00bb00',
  base0C: '#005500',
  base0D: '#009900',
  base0E: '#00bb00',
  base0F: '#005500'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/harmonic.js":
/*!*************************************************!*\
  !*** ../../node_modules/base16/lib/harmonic.js ***!
  \*************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'harmonic16',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#0b1c2c',
  base01: '#223b54',
  base02: '#405c79',
  base03: '#627e99',
  base04: '#aabcce',
  base05: '#cbd6e2',
  base06: '#e5ebf1',
  base07: '#f7f9fb',
  base08: '#bf8b56',
  base09: '#bfbf56',
  base0A: '#8bbf56',
  base0B: '#56bf8b',
  base0C: '#568bbf',
  base0D: '#8b56bf',
  base0E: '#bf568b',
  base0F: '#bf5656'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/hopscotch.js":
/*!**************************************************!*\
  !*** ../../node_modules/base16/lib/hopscotch.js ***!
  \**************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'hopscotch',
  author: 'jan t. sott',
  base00: '#322931',
  base01: '#433b42',
  base02: '#5c545b',
  base03: '#797379',
  base04: '#989498',
  base05: '#b9b5b8',
  base06: '#d5d3d5',
  base07: '#ffffff',
  base08: '#dd464c',
  base09: '#fd8b19',
  base0A: '#fdcc59',
  base0B: '#8fc13e',
  base0C: '#149b93',
  base0D: '#1290bf',
  base0E: '#c85e7c',
  base0F: '#b33508'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/base16/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

var _threezerotwofour = __webpack_require__(/*! ./threezerotwofour */ "../../node_modules/base16/lib/threezerotwofour.js");

exports.threezerotwofour = _interopRequire(_threezerotwofour);

var _apathy = __webpack_require__(/*! ./apathy */ "../../node_modules/base16/lib/apathy.js");

exports.apathy = _interopRequire(_apathy);

var _ashes = __webpack_require__(/*! ./ashes */ "../../node_modules/base16/lib/ashes.js");

exports.ashes = _interopRequire(_ashes);

var _atelierDune = __webpack_require__(/*! ./atelier-dune */ "../../node_modules/base16/lib/atelier-dune.js");

exports.atelierDune = _interopRequire(_atelierDune);

var _atelierForest = __webpack_require__(/*! ./atelier-forest */ "../../node_modules/base16/lib/atelier-forest.js");

exports.atelierForest = _interopRequire(_atelierForest);

var _atelierHeath = __webpack_require__(/*! ./atelier-heath */ "../../node_modules/base16/lib/atelier-heath.js");

exports.atelierHeath = _interopRequire(_atelierHeath);

var _atelierLakeside = __webpack_require__(/*! ./atelier-lakeside */ "../../node_modules/base16/lib/atelier-lakeside.js");

exports.atelierLakeside = _interopRequire(_atelierLakeside);

var _atelierSeaside = __webpack_require__(/*! ./atelier-seaside */ "../../node_modules/base16/lib/atelier-seaside.js");

exports.atelierSeaside = _interopRequire(_atelierSeaside);

var _bespin = __webpack_require__(/*! ./bespin */ "../../node_modules/base16/lib/bespin.js");

exports.bespin = _interopRequire(_bespin);

var _brewer = __webpack_require__(/*! ./brewer */ "../../node_modules/base16/lib/brewer.js");

exports.brewer = _interopRequire(_brewer);

var _bright = __webpack_require__(/*! ./bright */ "../../node_modules/base16/lib/bright.js");

exports.bright = _interopRequire(_bright);

var _chalk = __webpack_require__(/*! ./chalk */ "../../node_modules/base16/lib/chalk.js");

exports.chalk = _interopRequire(_chalk);

var _codeschool = __webpack_require__(/*! ./codeschool */ "../../node_modules/base16/lib/codeschool.js");

exports.codeschool = _interopRequire(_codeschool);

var _colors = __webpack_require__(/*! ./colors */ "../../node_modules/base16/lib/colors.js");

exports.colors = _interopRequire(_colors);

var _default = __webpack_require__(/*! ./default */ "../../node_modules/base16/lib/default.js");

exports.default = _interopRequire(_default);

var _eighties = __webpack_require__(/*! ./eighties */ "../../node_modules/base16/lib/eighties.js");

exports.eighties = _interopRequire(_eighties);

var _embers = __webpack_require__(/*! ./embers */ "../../node_modules/base16/lib/embers.js");

exports.embers = _interopRequire(_embers);

var _flat = __webpack_require__(/*! ./flat */ "../../node_modules/base16/lib/flat.js");

exports.flat = _interopRequire(_flat);

var _google = __webpack_require__(/*! ./google */ "../../node_modules/base16/lib/google.js");

exports.google = _interopRequire(_google);

var _grayscale = __webpack_require__(/*! ./grayscale */ "../../node_modules/base16/lib/grayscale.js");

exports.grayscale = _interopRequire(_grayscale);

var _greenscreen = __webpack_require__(/*! ./greenscreen */ "../../node_modules/base16/lib/greenscreen.js");

exports.greenscreen = _interopRequire(_greenscreen);

var _harmonic = __webpack_require__(/*! ./harmonic */ "../../node_modules/base16/lib/harmonic.js");

exports.harmonic = _interopRequire(_harmonic);

var _hopscotch = __webpack_require__(/*! ./hopscotch */ "../../node_modules/base16/lib/hopscotch.js");

exports.hopscotch = _interopRequire(_hopscotch);

var _isotope = __webpack_require__(/*! ./isotope */ "../../node_modules/base16/lib/isotope.js");

exports.isotope = _interopRequire(_isotope);

var _marrakesh = __webpack_require__(/*! ./marrakesh */ "../../node_modules/base16/lib/marrakesh.js");

exports.marrakesh = _interopRequire(_marrakesh);

var _mocha = __webpack_require__(/*! ./mocha */ "../../node_modules/base16/lib/mocha.js");

exports.mocha = _interopRequire(_mocha);

var _monokai = __webpack_require__(/*! ./monokai */ "../../node_modules/base16/lib/monokai.js");

exports.monokai = _interopRequire(_monokai);

var _ocean = __webpack_require__(/*! ./ocean */ "../../node_modules/base16/lib/ocean.js");

exports.ocean = _interopRequire(_ocean);

var _paraiso = __webpack_require__(/*! ./paraiso */ "../../node_modules/base16/lib/paraiso.js");

exports.paraiso = _interopRequire(_paraiso);

var _pop = __webpack_require__(/*! ./pop */ "../../node_modules/base16/lib/pop.js");

exports.pop = _interopRequire(_pop);

var _railscasts = __webpack_require__(/*! ./railscasts */ "../../node_modules/base16/lib/railscasts.js");

exports.railscasts = _interopRequire(_railscasts);

var _shapeshifter = __webpack_require__(/*! ./shapeshifter */ "../../node_modules/base16/lib/shapeshifter.js");

exports.shapeshifter = _interopRequire(_shapeshifter);

var _solarized = __webpack_require__(/*! ./solarized */ "../../node_modules/base16/lib/solarized.js");

exports.solarized = _interopRequire(_solarized);

var _summerfruit = __webpack_require__(/*! ./summerfruit */ "../../node_modules/base16/lib/summerfruit.js");

exports.summerfruit = _interopRequire(_summerfruit);

var _tomorrow = __webpack_require__(/*! ./tomorrow */ "../../node_modules/base16/lib/tomorrow.js");

exports.tomorrow = _interopRequire(_tomorrow);

var _tube = __webpack_require__(/*! ./tube */ "../../node_modules/base16/lib/tube.js");

exports.tube = _interopRequire(_tube);

var _twilight = __webpack_require__(/*! ./twilight */ "../../node_modules/base16/lib/twilight.js");

exports.twilight = _interopRequire(_twilight);

/***/ }),

/***/ "../../node_modules/base16/lib/isotope.js":
/*!************************************************!*\
  !*** ../../node_modules/base16/lib/isotope.js ***!
  \************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'isotope',
  author: 'jan t. sott',
  base00: '#000000',
  base01: '#404040',
  base02: '#606060',
  base03: '#808080',
  base04: '#c0c0c0',
  base05: '#d0d0d0',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#ff0000',
  base09: '#ff9900',
  base0A: '#ff0099',
  base0B: '#33ff00',
  base0C: '#00ffff',
  base0D: '#0066ff',
  base0E: '#cc00ff',
  base0F: '#3300ff'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/marrakesh.js":
/*!**************************************************!*\
  !*** ../../node_modules/base16/lib/marrakesh.js ***!
  \**************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'marrakesh',
  author: 'alexandre gavioli (http://github.com/alexx2/)',
  base00: '#201602',
  base01: '#302e00',
  base02: '#5f5b17',
  base03: '#6c6823',
  base04: '#86813b',
  base05: '#948e48',
  base06: '#ccc37a',
  base07: '#faf0a5',
  base08: '#c35359',
  base09: '#b36144',
  base0A: '#a88339',
  base0B: '#18974e',
  base0C: '#75a738',
  base0D: '#477ca1',
  base0E: '#8868b3',
  base0F: '#b3588e'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/mocha.js":
/*!**********************************************!*\
  !*** ../../node_modules/base16/lib/mocha.js ***!
  \**********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'mocha',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#3B3228',
  base01: '#534636',
  base02: '#645240',
  base03: '#7e705a',
  base04: '#b8afad',
  base05: '#d0c8c6',
  base06: '#e9e1dd',
  base07: '#f5eeeb',
  base08: '#cb6077',
  base09: '#d28b71',
  base0A: '#f4bc87',
  base0B: '#beb55b',
  base0C: '#7bbda4',
  base0D: '#8ab3b5',
  base0E: '#a89bb9',
  base0F: '#bb9584'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/monokai.js":
/*!************************************************!*\
  !*** ../../node_modules/base16/lib/monokai.js ***!
  \************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'monokai',
  author: 'wimer hazenberg (http://www.monokai.nl)',
  base00: '#272822',
  base01: '#383830',
  base02: '#49483e',
  base03: '#75715e',
  base04: '#a59f85',
  base05: '#f8f8f2',
  base06: '#f5f4f1',
  base07: '#f9f8f5',
  base08: '#f92672',
  base09: '#fd971f',
  base0A: '#f4bf75',
  base0B: '#a6e22e',
  base0C: '#a1efe4',
  base0D: '#66d9ef',
  base0E: '#ae81ff',
  base0F: '#cc6633'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/ocean.js":
/*!**********************************************!*\
  !*** ../../node_modules/base16/lib/ocean.js ***!
  \**********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'ocean',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#2b303b',
  base01: '#343d46',
  base02: '#4f5b66',
  base03: '#65737e',
  base04: '#a7adba',
  base05: '#c0c5ce',
  base06: '#dfe1e8',
  base07: '#eff1f5',
  base08: '#bf616a',
  base09: '#d08770',
  base0A: '#ebcb8b',
  base0B: '#a3be8c',
  base0C: '#96b5b4',
  base0D: '#8fa1b3',
  base0E: '#b48ead',
  base0F: '#ab7967'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/paraiso.js":
/*!************************************************!*\
  !*** ../../node_modules/base16/lib/paraiso.js ***!
  \************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'paraiso',
  author: 'jan t. sott',
  base00: '#2f1e2e',
  base01: '#41323f',
  base02: '#4f424c',
  base03: '#776e71',
  base04: '#8d8687',
  base05: '#a39e9b',
  base06: '#b9b6b0',
  base07: '#e7e9db',
  base08: '#ef6155',
  base09: '#f99b15',
  base0A: '#fec418',
  base0B: '#48b685',
  base0C: '#5bc4bf',
  base0D: '#06b6ef',
  base0E: '#815ba4',
  base0F: '#e96ba8'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/pop.js":
/*!********************************************!*\
  !*** ../../node_modules/base16/lib/pop.js ***!
  \********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'pop',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#000000',
  base01: '#202020',
  base02: '#303030',
  base03: '#505050',
  base04: '#b0b0b0',
  base05: '#d0d0d0',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#eb008a',
  base09: '#f29333',
  base0A: '#f8ca12',
  base0B: '#37b349',
  base0C: '#00aabb',
  base0D: '#0e5a94',
  base0E: '#b31e8d',
  base0F: '#7a2d00'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/railscasts.js":
/*!***************************************************!*\
  !*** ../../node_modules/base16/lib/railscasts.js ***!
  \***************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'railscasts',
  author: 'ryan bates (http://railscasts.com)',
  base00: '#2b2b2b',
  base01: '#272935',
  base02: '#3a4055',
  base03: '#5a647e',
  base04: '#d4cfc9',
  base05: '#e6e1dc',
  base06: '#f4f1ed',
  base07: '#f9f7f3',
  base08: '#da4939',
  base09: '#cc7833',
  base0A: '#ffc66d',
  base0B: '#a5c261',
  base0C: '#519f50',
  base0D: '#6d9cbe',
  base0E: '#b6b3eb',
  base0F: '#bc9458'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/shapeshifter.js":
/*!*****************************************************!*\
  !*** ../../node_modules/base16/lib/shapeshifter.js ***!
  \*****************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'shapeshifter',
  author: 'tyler benziger (http://tybenz.com)',
  base00: '#000000',
  base01: '#040404',
  base02: '#102015',
  base03: '#343434',
  base04: '#555555',
  base05: '#ababab',
  base06: '#e0e0e0',
  base07: '#f9f9f9',
  base08: '#e92f2f',
  base09: '#e09448',
  base0A: '#dddd13',
  base0B: '#0ed839',
  base0C: '#23edda',
  base0D: '#3b48e3',
  base0E: '#f996e2',
  base0F: '#69542d'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/solarized.js":
/*!**************************************************!*\
  !*** ../../node_modules/base16/lib/solarized.js ***!
  \**************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'solarized',
  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
  base00: '#002b36',
  base01: '#073642',
  base02: '#586e75',
  base03: '#657b83',
  base04: '#839496',
  base05: '#93a1a1',
  base06: '#eee8d5',
  base07: '#fdf6e3',
  base08: '#dc322f',
  base09: '#cb4b16',
  base0A: '#b58900',
  base0B: '#859900',
  base0C: '#2aa198',
  base0D: '#268bd2',
  base0E: '#6c71c4',
  base0F: '#d33682'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/summerfruit.js":
/*!****************************************************!*\
  !*** ../../node_modules/base16/lib/summerfruit.js ***!
  \****************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'summerfruit',
  author: 'christopher corley (http://cscorley.github.io/)',
  base00: '#151515',
  base01: '#202020',
  base02: '#303030',
  base03: '#505050',
  base04: '#B0B0B0',
  base05: '#D0D0D0',
  base06: '#E0E0E0',
  base07: '#FFFFFF',
  base08: '#FF0086',
  base09: '#FD8900',
  base0A: '#ABA800',
  base0B: '#00C918',
  base0C: '#1faaaa',
  base0D: '#3777E6',
  base0E: '#AD00A1',
  base0F: '#cc6633'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/threezerotwofour.js":
/*!*********************************************************!*\
  !*** ../../node_modules/base16/lib/threezerotwofour.js ***!
  \*********************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'threezerotwofour',
  author: 'jan t. sott (http://github.com/idleberg)',
  base00: '#090300',
  base01: '#3a3432',
  base02: '#4a4543',
  base03: '#5c5855',
  base04: '#807d7c',
  base05: '#a5a2a2',
  base06: '#d6d5d4',
  base07: '#f7f7f7',
  base08: '#db2d20',
  base09: '#e8bbd0',
  base0A: '#fded02',
  base0B: '#01a252',
  base0C: '#b5e4f4',
  base0D: '#01a0e4',
  base0E: '#a16a94',
  base0F: '#cdab53'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/tomorrow.js":
/*!*************************************************!*\
  !*** ../../node_modules/base16/lib/tomorrow.js ***!
  \*************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'tomorrow',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#1d1f21',
  base01: '#282a2e',
  base02: '#373b41',
  base03: '#969896',
  base04: '#b4b7b4',
  base05: '#c5c8c6',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#cc6666',
  base09: '#de935f',
  base0A: '#f0c674',
  base0B: '#b5bd68',
  base0C: '#8abeb7',
  base0D: '#81a2be',
  base0E: '#b294bb',
  base0F: '#a3685a'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/tube.js":
/*!*********************************************!*\
  !*** ../../node_modules/base16/lib/tube.js ***!
  \*********************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'london tube',
  author: 'jan t. sott',
  base00: '#231f20',
  base01: '#1c3f95',
  base02: '#5a5758',
  base03: '#737171',
  base04: '#959ca1',
  base05: '#d9d8d8',
  base06: '#e7e7e8',
  base07: '#ffffff',
  base08: '#ee2e24',
  base09: '#f386a1',
  base0A: '#ffd204',
  base0B: '#00853e',
  base0C: '#85cebc',
  base0D: '#009ddc',
  base0E: '#98005d',
  base0F: '#b06110'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/base16/lib/twilight.js":
/*!*************************************************!*\
  !*** ../../node_modules/base16/lib/twilight.js ***!
  \*************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
exports.default = {
  scheme: 'twilight',
  author: 'david hart (http://hart-dev.com)',
  base00: '#1e1e1e',
  base01: '#323537',
  base02: '#464b50',
  base03: '#5f5a60',
  base04: '#838184',
  base05: '#a7a7a7',
  base06: '#c3c3c3',
  base07: '#ffffff',
  base08: '#cf6a4c',
  base09: '#cda869',
  base0A: '#f9ee98',
  base0B: '#8f9d6a',
  base0C: '#afc4db',
  base0D: '#7587a6',
  base0E: '#9b859d',
  base0F: '#9b703f'
};
module.exports = exports['default'];

/***/ }),

/***/ "../../node_modules/color-convert/conversions.js":
/*!*******************************************************!*\
  !*** ../../node_modules/color-convert/conversions.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
var cssKeywords = __webpack_require__(/*! color-name */ "../../node_modules/color-convert/node_modules/color-name/index.js");

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in cssKeywords) {
	if (cssKeywords.hasOwnProperty(key)) {
		reverseKeywords[cssKeywords[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in cssKeywords) {
		if (cssKeywords.hasOwnProperty(keyword)) {
			var value = cssKeywords[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ "../../node_modules/color-convert/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/color-convert/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var conversions = __webpack_require__(/*! ./conversions */ "../../node_modules/color-convert/conversions.js");
var route = __webpack_require__(/*! ./route */ "../../node_modules/color-convert/route.js");

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ "../../node_modules/color-convert/node_modules/color-name/index.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/color-convert/node_modules/color-name/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/color-convert/route.js":
/*!*************************************************!*\
  !*** ../../node_modules/color-convert/route.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var conversions = __webpack_require__(/*! ./conversions */ "../../node_modules/color-convert/conversions.js");

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ "../../node_modules/color-name/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/color-name/index.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/color-string/index.js":
/*!************************************************!*\
  !*** ../../node_modules/color-string/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
var colorNames = __webpack_require__(/*! color-name */ "../../node_modules/color-name/index.js");
var swizzle = __webpack_require__(/*! simple-swizzle */ "../../node_modules/simple-swizzle/index.js");

var reverseNames = {};

// create a list of reverse color names
for (var name in colorNames) {
	if (colorNames.hasOwnProperty(name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var keyword = /(\D+)/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		rgb = colorNames[match[1]];

		if (!rgb) {
			return null;
		}

		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = (parseFloat(match[1]) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = num.toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}


/***/ }),

/***/ "../../node_modules/color/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/color/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var colorString = __webpack_require__(/*! color-string */ "../../node_modules/color-string/index.js");
var convert = __webpack_require__(/*! color-convert */ "../../node_modules/color-convert/index.js");

var _slice = [].slice;

var skippedModels = [
	// to be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// gray conflicts with some method names, and has its own method defined.
	'gray',

	// shouldn't really be in color-convert either...
	'hex'
];

var hashedModelKeys = {};
Object.keys(convert).forEach(function (model) {
	hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
});

var limiters = {};

function Color(obj, model) {
	if (!(this instanceof Color)) {
		return new Color(obj, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	var i;
	var channels;

	if (obj == null) { // eslint-disable-line no-eq-null,eqeqeq
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (obj instanceof Color) {
		this.model = obj.model;
		this.color = obj.color.slice();
		this.valpha = obj.valpha;
	} else if (typeof obj === 'string') {
		var result = colorString.get(obj);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + obj);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (obj.length) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		var newArr = _slice.call(obj, 0, channels);
		this.color = zeroArray(newArr, channels);
		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
	} else if (typeof obj === 'number') {
		// this is always RGB - can be converted later on.
		obj &= 0xFFFFFF;
		this.model = 'rgb';
		this.color = [
			(obj >> 16) & 0xFF,
			(obj >> 8) & 0xFF,
			obj & 0xFF
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		var keys = Object.keys(obj);
		if ('alpha' in obj) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
		}

		var hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
		}

		this.model = hashedModelKeys[hashedKeys];

		var labels = convert[this.model].labels;
		var color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(obj[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			var limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString: function () {
		return this.string();
	},

	toJSON: function () {
		return this[this.model]();
	},

	string: function (places) {
		var self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to[self.model](args);
	},

	percentString: function (places) {
		var self = this.rgb().round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to.rgb.percent(args);
	},

	array: function () {
		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
	},

	object: function () {
		var result = {};
		var channels = convert[this.model].channels;
		var labels = convert[this.model].labels;

		for (var i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray: function () {
		var rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject: function () {
		var rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round: function (places) {
		places = Math.max(places || 0, 0);
		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
	},

	alpha: function (val) {
		if (arguments.length) {
			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
		}

		return this.valpha;
	},

	// rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(100)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(100)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword: function (val) {
		if (arguments.length) {
			return new Color(val);
		}

		return convert[this.model].keyword(this.color);
	},

	hex: function (val) {
		if (arguments.length) {
			return new Color(val);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	rgbNumber: function () {
		var rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.rgb().color;

		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	isDark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.rgb().color;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	isLight: function () {
		return !this.isDark();
	},

	negate: function () {
		var rgb = this.rgb();
		for (var i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}
		return rgb;
	},

	lighten: function (ratio) {
		var hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken: function (ratio) {
		var hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate: function (ratio) {
		var hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate: function (ratio) {
		var hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten: function (ratio) {
		var hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken: function (ratio) {
		var hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale: function () {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var rgb = this.rgb().color;
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(val, val, val);
	},

	fade: function (ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer: function (ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate: function (degrees) {
		var hsl = this.hsl();
		var hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix: function (mixinColor, weight) {
		// ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		if (!mixinColor || !mixinColor.rgb) {
			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
		}
		var color1 = mixinColor.rgb();
		var color2 = this.rgb();
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return Color.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue(),
				color1.alpha() * p + color2.alpha() * (1 - p));
	}
};

// model conversion methods and static constructors
Object.keys(convert).forEach(function (model) {
	if (skippedModels.indexOf(model) !== -1) {
		return;
	}

	var channels = convert[model].channels;

	// conversion methods
	Color.prototype[model] = function () {
		if (this.model === model) {
			return new Color(this);
		}

		if (arguments.length) {
			return new Color(arguments, model);
		}

		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
		return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
	};

	// 'static' construction methods
	Color[model] = function (color) {
		if (typeof color === 'number') {
			color = zeroArray(_slice.call(arguments), channels);
		}
		return new Color(color, model);
	};
});

function roundTo(num, places) {
	return Number(num.toFixed(places));
}

function roundToPlace(places) {
	return function (num) {
		return roundTo(num, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	model.forEach(function (m) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	});

	model = model[0];

	return function (val) {
		var result;

		if (arguments.length) {
			if (modifier) {
				val = modifier(val);
			}

			result = this[model]();
			result.color[channel] = val;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(val) {
	return Array.isArray(val) ? val : [val];
}

function zeroArray(arr, length) {
	for (var i = 0; i < length; i++) {
		if (typeof arr[i] !== 'number') {
			arr[i] = 0;
		}
	}

	return arr;
}

module.exports = Color;


/***/ }),

/***/ "../../node_modules/lodash.curry/index.js":
/*!************************************************!*\
  !*** ../../node_modules/lodash.curry/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var BIND_FLAG = 1,
    BIND_KEY_FLAG = 2,
    CURRY_BOUND_FLAG = 4,
    CURRY_FLAG = 8,
    CURRY_RIGHT_FLAG = 16,
    PARTIAL_FLAG = 32,
    PARTIAL_RIGHT_FLAG = 64,
    ARY_FLAG = 128,
    REARG_FLAG = 256,
    FLIP_FLAG = 512;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', ARY_FLAG],
  ['bind', BIND_FLAG],
  ['bindKey', BIND_KEY_FLAG],
  ['curry', CURRY_FLAG],
  ['curryRight', CURRY_RIGHT_FLAG],
  ['flip', FLIP_FLAG],
  ['partial', PARTIAL_FLAG],
  ['partialRight', PARTIAL_RIGHT_FLAG],
  ['rearg', REARG_FLAG]
];

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      result++;
    }
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var objectCreate = Object.create;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/* Used to set `toString` methods. */
var defineProperty = (function() {
  var func = getNative(Object, 'defineProperty'),
      name = getNative.name;

  return (name && name.length > 2) ? func : undefined;
}());

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & ARY_FLAG,
      isBind = bitmask & BIND_FLAG,
      isBindKey = bitmask & BIND_KEY_FLAG,
      isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
      isFlip = bitmask & FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

  if (!(bitmask & CURRY_BOUND_FLAG)) {
    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
  }

  var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *  The bitmask may be composed of the following flags:
 *     1 - `_.bind`
 *     2 - `_.bindKey`
 *     4 - `_.curry` or `_.curryRight` of a bound function
 *     8 - `_.curry`
 *    16 - `_.curryRight`
 *    32 - `_.partial`
 *    64 - `_.partialRight`
 *   128 - `_.rearg`
 *   256 - `_.ary`
 *   512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] == null
    ? (isBindKey ? 0 : func.length)
    : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  return setWrapToString(result, func, bitmask);
}

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length,
      lastIndex = length - 1;

  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
  var source = (reference + '');
  return defineProperty(wrapper, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
  });
};

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

// Assign default placeholders.
curry.placeholder = {};

module.exports = curry;


/***/ }),

/***/ "../../node_modules/react-base16-styling/lib/colorConverters.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/react-base16-styling/lib/colorConverters.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.yuv2rgb = yuv2rgb;
exports.rgb2yuv = rgb2yuv;

function yuv2rgb(yuv) {
  var y = yuv[0],
      u = yuv[1],
      v = yuv[2];
  var r, g, b;
  r = y * 1 + u * 0 + v * 1.13983;
  g = y * 1 + u * -0.39465 + v * -0.5806;
  b = y * 1 + u * 2.02311 + v * 0;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
}

function rgb2yuv(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255;
  var y = r * 0.299 + g * 0.587 + b * 0.114;
  var u = r * -0.14713 + g * -0.28886 + b * 0.436;
  var v = r * 0.615 + g * -0.51499 + b * -0.10001;
  return [y, u, v];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2xvckNvbnZlcnRlcnMudHMiXSwibmFtZXMiOlsieXV2MnJnYiIsInl1diIsInkiLCJ1IiwidiIsInIiLCJnIiwiYiIsIk1hdGgiLCJtaW4iLCJtYXgiLCJyZ2IyeXV2IiwicmdiIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVPLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQW9DO0FBQ3pDLE1BQU1DLENBQUMsR0FBR0QsR0FBRyxDQUFDLENBQUQsQ0FBYjtBQUFBLE1BQ0VFLENBQUMsR0FBR0YsR0FBRyxDQUFDLENBQUQsQ0FEVDtBQUFBLE1BRUVHLENBQUMsR0FBR0gsR0FBRyxDQUFDLENBQUQsQ0FGVDtBQUdBLE1BQUlJLENBQUosRUFBT0MsQ0FBUCxFQUFVQyxDQUFWO0FBRUFGLEVBQUFBLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQUosR0FBUUMsQ0FBQyxHQUFHLENBQVosR0FBZ0JDLENBQUMsR0FBRyxPQUF4QjtBQUNBRSxFQUFBQSxDQUFDLEdBQUdKLENBQUMsR0FBRyxDQUFKLEdBQVFDLENBQUMsR0FBRyxDQUFDLE9BQWIsR0FBdUJDLENBQUMsR0FBRyxDQUFDLE1BQWhDO0FBQ0FHLEVBQUFBLENBQUMsR0FBR0wsQ0FBQyxHQUFHLENBQUosR0FBUUMsQ0FBQyxHQUFHLE9BQVosR0FBc0JDLENBQUMsR0FBRyxDQUE5QjtBQUVBQyxFQUFBQSxDQUFDLEdBQUdHLElBQUksQ0FBQ0MsR0FBTCxDQUFTRCxJQUFJLENBQUNFLEdBQUwsQ0FBUyxDQUFULEVBQVlMLENBQVosQ0FBVCxFQUF5QixDQUF6QixDQUFKO0FBQ0FDLEVBQUFBLENBQUMsR0FBR0UsSUFBSSxDQUFDQyxHQUFMLENBQVNELElBQUksQ0FBQ0UsR0FBTCxDQUFTLENBQVQsRUFBWUosQ0FBWixDQUFULEVBQXlCLENBQXpCLENBQUo7QUFDQUMsRUFBQUEsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsQ0FBVCxFQUFZSCxDQUFaLENBQVQsRUFBeUIsQ0FBekIsQ0FBSjtBQUVBLFNBQU8sQ0FBQ0YsQ0FBQyxHQUFHLEdBQUwsRUFBVUMsQ0FBQyxHQUFHLEdBQWQsRUFBbUJDLENBQUMsR0FBRyxHQUF2QixDQUFQO0FBQ0Q7O0FBRU0sU0FBU0ksT0FBVCxDQUFpQkMsR0FBakIsRUFBb0M7QUFDekMsTUFBTVAsQ0FBQyxHQUFHTyxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVMsR0FBbkI7QUFBQSxNQUNFTixDQUFDLEdBQUdNLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBUyxHQURmO0FBQUEsTUFFRUwsQ0FBQyxHQUFHSyxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVMsR0FGZjtBQUlBLE1BQU1WLENBQUMsR0FBR0csQ0FBQyxHQUFHLEtBQUosR0FBWUMsQ0FBQyxHQUFHLEtBQWhCLEdBQXdCQyxDQUFDLEdBQUcsS0FBdEM7QUFDQSxNQUFNSixDQUFDLEdBQUdFLENBQUMsR0FBRyxDQUFDLE9BQUwsR0FBZUMsQ0FBQyxHQUFHLENBQUMsT0FBcEIsR0FBOEJDLENBQUMsR0FBRyxLQUE1QztBQUNBLE1BQU1ILENBQUMsR0FBR0MsQ0FBQyxHQUFHLEtBQUosR0FBWUMsQ0FBQyxHQUFHLENBQUMsT0FBakIsR0FBMkJDLENBQUMsR0FBRyxDQUFDLE9BQTFDO0FBRUEsU0FBTyxDQUFDTCxDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBDb2xvciA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHl1djJyZ2IoeXV2OiBDb2xvcik6IENvbG9yIHtcbiAgY29uc3QgeSA9IHl1dlswXSxcbiAgICB1ID0geXV2WzFdLFxuICAgIHYgPSB5dXZbMl07XG4gIGxldCByLCBnLCBiO1xuXG4gIHIgPSB5ICogMSArIHUgKiAwICsgdiAqIDEuMTM5ODM7XG4gIGcgPSB5ICogMSArIHUgKiAtMC4zOTQ2NSArIHYgKiAtMC41ODA2O1xuICBiID0geSAqIDEgKyB1ICogMi4wMjMxMSArIHYgKiAwO1xuXG4gIHIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCByKSwgMSk7XG4gIGcgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBnKSwgMSk7XG4gIGIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBiKSwgMSk7XG5cbiAgcmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYjJ5dXYocmdiOiBDb2xvcik6IENvbG9yIHtcbiAgY29uc3QgciA9IHJnYlswXSAvIDI1NSxcbiAgICBnID0gcmdiWzFdIC8gMjU1LFxuICAgIGIgPSByZ2JbMl0gLyAyNTU7XG5cbiAgY29uc3QgeSA9IHIgKiAwLjI5OSArIGcgKiAwLjU4NyArIGIgKiAwLjExNDtcbiAgY29uc3QgdSA9IHIgKiAtMC4xNDcxMyArIGcgKiAtMC4yODg4NiArIGIgKiAwLjQzNjtcbiAgY29uc3QgdiA9IHIgKiAwLjYxNSArIGcgKiAtMC41MTQ5OSArIGIgKiAtMC4xMDAwMTtcblxuICByZXR1cm4gW3ksIHUsIHZdO1xufVxuIl19

/***/ }),

/***/ "../../node_modules/react-base16-styling/lib/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/react-base16-styling/lib/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var _exportNames = {
  invertBase16Theme: true,
  createStyling: true,
  getBase16Theme: true,
  invertTheme: true,
  Base16Theme: true
};
Object.defineProperty(exports, "Base16Theme", ({
  enumerable: true,
  get: function get() {
    return base16.Base16Theme;
  }
}));
exports.invertTheme = exports.getBase16Theme = exports.createStyling = exports.invertBase16Theme = void 0;

var base16 = _interopRequireWildcard(__webpack_require__(/*! base16 */ "../../node_modules/base16/lib/index.js"));

var _color = _interopRequireDefault(__webpack_require__(/*! color */ "../../node_modules/color/index.js"));

var _lodash = _interopRequireDefault(__webpack_require__(/*! lodash.curry */ "../../node_modules/lodash.curry/index.js"));

var _colorConverters = __webpack_require__(/*! ./colorConverters */ "../../node_modules/react-base16-styling/lib/colorConverters.js");

var _types = __webpack_require__(/*! ./types */ "../../node_modules/react-base16-styling/lib/types.js");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _types[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DEFAULT_BASE16 = base16["default"];
var BASE16_KEYS = Object.keys(DEFAULT_BASE16); // we need a correcting factor, so that a dark, but not black background color
// converts to bright enough inversed color

var flip = function flip(x) {
  return x < 0.25 ? 1 : x < 0.5 ? 0.9 - x : 1.1 - x;
};

var invertColor = function invertColor(hexString) {
  var color = (0, _color["default"])(hexString);

  var _rgb2yuv = (0, _colorConverters.rgb2yuv)(color.array()),
      _rgb2yuv2 = _slicedToArray(_rgb2yuv, 3),
      y = _rgb2yuv2[0],
      u = _rgb2yuv2[1],
      v = _rgb2yuv2[2];

  var flippedYuv = [flip(y), u, v];
  var rgb = (0, _colorConverters.yuv2rgb)(flippedYuv);
  return _color["default"].rgb(rgb).hex();
};

var merger = function merger(styling) {
  return function (prevStyling) {
    return {
      className: [prevStyling.className, styling.className].filter(Boolean).join(' '),
      style: _objectSpread(_objectSpread({}, prevStyling.style || {}), styling.style || {})
    };
  };
};

var mergeStyling = function mergeStyling(customStyling, defaultStyling) {
  if (customStyling === undefined) {
    return defaultStyling;
  }

  if (defaultStyling === undefined) {
    return customStyling;
  }

  var customType = _typeof(customStyling);

  var defaultType = _typeof(defaultStyling);

  switch (customType) {
    case 'string':
      switch (defaultType) {
        case 'string':
          return [defaultStyling, customStyling].filter(Boolean).join(' ');

        case 'object':
          return merger({
            className: customStyling,
            style: defaultStyling
          });

        case 'function':
          return function (styling) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            return merger({
              className: customStyling
            })(defaultStyling.apply(void 0, [styling].concat(args)));
          };
      }

      break;

    case 'object':
      switch (defaultType) {
        case 'string':
          return merger({
            className: defaultStyling,
            style: customStyling
          });

        case 'object':
          return _objectSpread(_objectSpread({}, defaultStyling), customStyling);

        case 'function':
          return function (styling) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            return merger({
              style: customStyling
            })(defaultStyling.apply(void 0, [styling].concat(args)));
          };
      }

      break;

    case 'function':
      switch (defaultType) {
        case 'string':
          return function (styling) {
            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }

            return customStyling.apply(void 0, [merger(styling)({
              className: defaultStyling
            })].concat(args));
          };

        case 'object':
          return function (styling) {
            for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
              args[_key4 - 1] = arguments[_key4];
            }

            return customStyling.apply(void 0, [merger(styling)({
              style: defaultStyling
            })].concat(args));
          };

        case 'function':
          return function (styling) {
            for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
              args[_key5 - 1] = arguments[_key5];
            }

            return customStyling.apply(void 0, [defaultStyling.apply(void 0, [styling].concat(args))].concat(args));
          };
      }

  }
};

var mergeStylings = function mergeStylings(customStylings, defaultStylings) {
  var keys = Object.keys(defaultStylings);

  for (var key in customStylings) {
    if (keys.indexOf(key) === -1) keys.push(key);
  }

  return keys.reduce(function (mergedStyling, key) {
    return mergedStyling[key] = mergeStyling(customStylings[key], defaultStylings[key]), mergedStyling;
  }, {});
};

var getStylingByKeys = function getStylingByKeys(mergedStyling, keys) {
  for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    args[_key6 - 2] = arguments[_key6];
  }

  if (keys === null) {
    return mergedStyling;
  }

  if (!Array.isArray(keys)) {
    keys = [keys];
  }

  var styles = keys.map(function (key) {
    return mergedStyling[key];
  }).filter(Boolean);
  var props = styles.reduce(function (obj, s) {
    if (typeof s === 'string') {
      obj.className = [obj.className, s].filter(Boolean).join(' ');
    } else if (_typeof(s) === 'object') {
      obj.style = _objectSpread(_objectSpread({}, obj.style), s);
    } else if (typeof s === 'function') {
      obj = _objectSpread(_objectSpread({}, obj), s.apply(void 0, [obj].concat(args)));
    }

    return obj;
  }, {
    className: '',
    style: {}
  });

  if (!props.className) {
    delete props.className;
  }

  if (Object.keys(props.style).length === 0) {
    delete props.style;
  }

  return props;
};

var invertBase16Theme = function invertBase16Theme(base16Theme) {
  return Object.keys(base16Theme).reduce(function (t, key) {
    return t[key] = /^base/.test(key) ? invertColor(base16Theme[key]) : key === 'scheme' ? base16Theme[key] + ':inverted' : base16Theme[key], t;
  }, {});
};

exports.invertBase16Theme = invertBase16Theme;
var createStyling = (0, _lodash["default"])(function (getStylingFromBase16) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var themeOrStyling = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$defaultBase = options.defaultBase16,
      defaultBase16 = _options$defaultBase === void 0 ? DEFAULT_BASE16 : _options$defaultBase,
      _options$base16Themes = options.base16Themes,
      base16Themes = _options$base16Themes === void 0 ? null : _options$base16Themes;
  var base16Theme = getBase16Theme(themeOrStyling, base16Themes);

  if (base16Theme) {
    themeOrStyling = _objectSpread(_objectSpread({}, base16Theme), themeOrStyling);
  }

  var theme = BASE16_KEYS.reduce(function (t, key) {
    return t[key] = themeOrStyling[key] || defaultBase16[key], t;
  }, {});
  var customStyling = Object.keys(themeOrStyling).reduce(function (s, key) {
    return BASE16_KEYS.indexOf(key) === -1 ? (s[key] = themeOrStyling[key], s) : s;
  }, {});
  var defaultStyling = getStylingFromBase16(theme);
  var mergedStyling = mergeStylings(customStyling, defaultStyling);

  for (var _len7 = arguments.length, args = new Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
    args[_key7 - 3] = arguments[_key7];
  }

  return (0, _lodash["default"])(getStylingByKeys, 2).apply(void 0, [mergedStyling].concat(args));
}, 3);
exports.createStyling = createStyling;

var isStylingConfig = function isStylingConfig(theme) {
  return !!theme.extend;
};

var getBase16Theme = function getBase16Theme(theme, base16Themes) {
  if (theme && isStylingConfig(theme) && theme.extend) {
    theme = theme.extend;
  }

  if (typeof theme === 'string') {
    var _theme$split = theme.split(':'),
        _theme$split2 = _slicedToArray(_theme$split, 2),
        _themeName = _theme$split2[0],
        modifier = _theme$split2[1];

    if (base16Themes) {
      theme = base16Themes[_themeName];
    } else {
      theme = base16[_themeName];
    }

    if (modifier === 'inverted') {
      theme = invertBase16Theme(theme);
    }
  }

  return theme && Object.prototype.hasOwnProperty.call(theme, 'base00') ? theme : undefined;
};

exports.getBase16Theme = getBase16Theme;

var invertTheme = function invertTheme(theme) {
  if (typeof theme === 'string') {
    return "".concat(theme, ":inverted");
  }

  if (theme && isStylingConfig(theme) && theme.extend) {
    if (typeof theme.extend === 'string') {
      return _objectSpread(_objectSpread({}, theme), {}, {
        extend: "".concat(theme.extend, ":inverted")
      });
    }

    return _objectSpread(_objectSpread({}, theme), {}, {
      extend: invertBase16Theme(theme.extend)
    });
  }

  if (theme) {
    return invertBase16Theme(theme);
  }

  return theme;
};

exports.invertTheme = invertTheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJERUZBVUxUX0JBU0UxNiIsImJhc2UxNiIsIkJBU0UxNl9LRVlTIiwiT2JqZWN0Iiwia2V5cyIsImZsaXAiLCJ4IiwiaW52ZXJ0Q29sb3IiLCJoZXhTdHJpbmciLCJjb2xvciIsImFycmF5IiwieSIsInUiLCJ2IiwiZmxpcHBlZFl1diIsInJnYiIsIkNvbG9yIiwiaGV4IiwibWVyZ2VyIiwic3R5bGluZyIsInByZXZTdHlsaW5nIiwiY2xhc3NOYW1lIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJzdHlsZSIsIm1lcmdlU3R5bGluZyIsImN1c3RvbVN0eWxpbmciLCJkZWZhdWx0U3R5bGluZyIsInVuZGVmaW5lZCIsImN1c3RvbVR5cGUiLCJkZWZhdWx0VHlwZSIsImFyZ3MiLCJtZXJnZVN0eWxpbmdzIiwiY3VzdG9tU3R5bGluZ3MiLCJkZWZhdWx0U3R5bGluZ3MiLCJrZXkiLCJpbmRleE9mIiwicHVzaCIsInJlZHVjZSIsIm1lcmdlZFN0eWxpbmciLCJnZXRTdHlsaW5nQnlLZXlzIiwiQXJyYXkiLCJpc0FycmF5Iiwic3R5bGVzIiwibWFwIiwicHJvcHMiLCJvYmoiLCJzIiwibGVuZ3RoIiwiaW52ZXJ0QmFzZTE2VGhlbWUiLCJiYXNlMTZUaGVtZSIsInQiLCJ0ZXN0IiwiY3JlYXRlU3R5bGluZyIsImdldFN0eWxpbmdGcm9tQmFzZTE2Iiwib3B0aW9ucyIsInRoZW1lT3JTdHlsaW5nIiwiZGVmYXVsdEJhc2UxNiIsImJhc2UxNlRoZW1lcyIsImdldEJhc2UxNlRoZW1lIiwidGhlbWUiLCJpc1N0eWxpbmdDb25maWciLCJleHRlbmQiLCJzcGxpdCIsInRoZW1lTmFtZSIsIm1vZGlmaWVyIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW52ZXJ0VGhlbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBb1NBOztBQUFB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RUFBa0I7QUFDaEJFLE1BQUFBLEtBQUssR0FBR0YsWUFBWSxDQUFDTSxVQUFELENBQXBCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xKLE1BQUFBLEtBQUssR0FBRzVELE1BQU0sQ0FBQ2dFLFVBQUQsQ0FBZDtBQUNEOztBQUNELFFBQUlDLFFBQVEsS0FBSyxVQUFqQixFQUE2QjtBQUMzQkwsTUFBQUEsS0FBSyxHQUFHWCxpQkFBaUIsQ0FBQ1csS0FBRCxDQUF6QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsS0FBSyxJQUFJMUQsTUFBTSxDQUFDZ0UsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUixLQUFyQyxFQUE0QyxRQUE1QyxDQUFULEdBQ0ZBLEtBREUsR0FFSGhDLFNBRko7QUFHRCxDQXZCTTs7OztBQXlCQSxJQUFNeUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQ1QsS0FBRCxFQUFpRDtBQUMxRSxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IscUJBQVVBLEtBQVY7QUFDRDs7QUFFRCxNQUFJQSxLQUFLLElBQUlDLGVBQWUsQ0FBQ0QsS0FBRCxDQUF4QixJQUFtQ0EsS0FBSyxDQUFDRSxNQUE3QyxFQUFxRDtBQUNuRCxRQUFJLE9BQU9GLEtBQUssQ0FBQ0UsTUFBYixLQUF3QixRQUE1QixFQUFzQztBQUNwQyw2Q0FBWUYsS0FBWjtBQUFtQkUsUUFBQUEsTUFBTSxZQUFLRixLQUFLLENBQUNFLE1BQVg7QUFBekI7QUFDRDs7QUFFRCwyQ0FDS0YsS0FETDtBQUVFRSxNQUFBQSxNQUFNLEVBQUViLGlCQUFpQixDQUFDVyxLQUFLLENBQUNFLE1BQVA7QUFGM0I7QUFJRDs7QUFFRCxNQUFJRixLQUFKLEVBQVc7QUFDVCxXQUFPWCxpQkFBaUIsQ0FBQ1csS0FBRCxDQUF4QjtBQUNEOztBQUVELFNBQU9BLEtBQVA7QUFDRCxDQXJCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJhc2UxNiBmcm9tICdiYXNlMTYnO1xuaW1wb3J0IHsgQmFzZTE2VGhlbWUgfSBmcm9tICdiYXNlMTYnO1xuaW1wb3J0IENvbG9yIGZyb20gJ2NvbG9yJztcbmltcG9ydCAqIGFzIENTUyBmcm9tICdjc3N0eXBlJztcbmltcG9ydCBjdXJyeSBmcm9tICdsb2Rhc2guY3VycnknO1xuaW1wb3J0IHsgQ29sb3IgYXMgQ29sb3JUdXBsZSwgeXV2MnJnYiwgcmdiMnl1diB9IGZyb20gJy4vY29sb3JDb252ZXJ0ZXJzJztcbmltcG9ydCB7XG4gIFN0eWxpbmcsXG4gIFN0eWxpbmdDb25maWcsXG4gIFN0eWxpbmdGdW5jdGlvbixcbiAgU3R5bGluZ1ZhbHVlLFxuICBTdHlsaW5nVmFsdWVGdW5jdGlvbixcbiAgVGhlbWUsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBERUZBVUxUX0JBU0UxNiA9IGJhc2UxNi5kZWZhdWx0O1xuXG5jb25zdCBCQVNFMTZfS0VZUyA9IE9iamVjdC5rZXlzKERFRkFVTFRfQkFTRTE2KTtcblxuLy8gd2UgbmVlZCBhIGNvcnJlY3RpbmcgZmFjdG9yLCBzbyB0aGF0IGEgZGFyaywgYnV0IG5vdCBibGFjayBiYWNrZ3JvdW5kIGNvbG9yXG4vLyBjb252ZXJ0cyB0byBicmlnaHQgZW5vdWdoIGludmVyc2VkIGNvbG9yXG5jb25zdCBmbGlwID0gKHg6IG51bWJlcikgPT4gKHggPCAwLjI1ID8gMSA6IHggPCAwLjUgPyAwLjkgLSB4IDogMS4xIC0geCk7XG5cbmNvbnN0IGludmVydENvbG9yID0gKGhleFN0cmluZzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGNvbG9yID0gQ29sb3IoaGV4U3RyaW5nKTtcbiAgY29uc3QgW3ksIHUsIHZdID0gcmdiMnl1dihjb2xvci5hcnJheSgpIGFzIENvbG9yVHVwbGUpO1xuICBjb25zdCBmbGlwcGVkWXV2OiBDb2xvclR1cGxlID0gW2ZsaXAoeSksIHUsIHZdO1xuICBjb25zdCByZ2IgPSB5dXYycmdiKGZsaXBwZWRZdXYpO1xuICByZXR1cm4gQ29sb3IucmdiKHJnYikuaGV4KCk7XG59O1xuXG5jb25zdCBtZXJnZXIgPSAoc3R5bGluZzogUGFydGlhbDxTdHlsaW5nPikgPT4ge1xuICByZXR1cm4gKHByZXZTdHlsaW5nOiBQYXJ0aWFsPFN0eWxpbmc+KSA9PiAoe1xuICAgIGNsYXNzTmFtZTogW3ByZXZTdHlsaW5nLmNsYXNzTmFtZSwgc3R5bGluZy5jbGFzc05hbWVdXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAuam9pbignICcpLFxuICAgIHN0eWxlOiB7IC4uLihwcmV2U3R5bGluZy5zdHlsZSB8fCB7fSksIC4uLihzdHlsaW5nLnN0eWxlIHx8IHt9KSB9LFxuICB9KTtcbn07XG5cbmNvbnN0IG1lcmdlU3R5bGluZyA9IChcbiAgY3VzdG9tU3R5bGluZzogU3R5bGluZ1ZhbHVlLFxuICBkZWZhdWx0U3R5bGluZzogU3R5bGluZ1ZhbHVlXG4pOiBTdHlsaW5nVmFsdWUgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoY3VzdG9tU3R5bGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRTdHlsaW5nO1xuICB9XG4gIGlmIChkZWZhdWx0U3R5bGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0eWxpbmc7XG4gIH1cblxuICBjb25zdCBjdXN0b21UeXBlID0gdHlwZW9mIGN1c3RvbVN0eWxpbmc7XG4gIGNvbnN0IGRlZmF1bHRUeXBlID0gdHlwZW9mIGRlZmF1bHRTdHlsaW5nO1xuXG4gIHN3aXRjaCAoY3VzdG9tVHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBzd2l0Y2ggKGRlZmF1bHRUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmV0dXJuIFtkZWZhdWx0U3R5bGluZywgY3VzdG9tU3R5bGluZ10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICByZXR1cm4gbWVyZ2VyKHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY3VzdG9tU3R5bGluZyBhcyBzdHJpbmcsXG4gICAgICAgICAgICBzdHlsZTogZGVmYXVsdFN0eWxpbmcgYXMgQ1NTLlByb3BlcnRpZXM8c3RyaW5nIHwgbnVtYmVyPixcbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIHJldHVybiAoc3R5bGluZzogU3R5bGluZywgLi4uYXJnczogYW55W10pID0+XG4gICAgICAgICAgICBtZXJnZXIoe1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGN1c3RvbVN0eWxpbmcgYXMgc3RyaW5nLFxuICAgICAgICAgICAgfSkoKGRlZmF1bHRTdHlsaW5nIGFzIFN0eWxpbmdWYWx1ZUZ1bmN0aW9uKShzdHlsaW5nLCAuLi5hcmdzKSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgc3dpdGNoIChkZWZhdWx0VHlwZSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgIHJldHVybiBtZXJnZXIoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBkZWZhdWx0U3R5bGluZyBhcyBzdHJpbmcsXG4gICAgICAgICAgICBzdHlsZTogY3VzdG9tU3R5bGluZyBhcyBDU1MuUHJvcGVydGllczxzdHJpbmcgfCBudW1iZXI+LFxuICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi4oZGVmYXVsdFN0eWxpbmcgYXMgQ1NTLlByb3BlcnRpZXM8c3RyaW5nIHwgbnVtYmVyPiksXG4gICAgICAgICAgICAuLi4oY3VzdG9tU3R5bGluZyBhcyBDU1MuUHJvcGVydGllczxzdHJpbmcgfCBudW1iZXI+KSxcbiAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIChzdHlsaW5nOiBTdHlsaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT5cbiAgICAgICAgICAgIG1lcmdlcih7XG4gICAgICAgICAgICAgIHN0eWxlOiBjdXN0b21TdHlsaW5nIGFzIENTUy5Qcm9wZXJ0aWVzPHN0cmluZyB8IG51bWJlcj4sXG4gICAgICAgICAgICB9KSgoZGVmYXVsdFN0eWxpbmcgYXMgU3R5bGluZ1ZhbHVlRnVuY3Rpb24pKHN0eWxpbmcsIC4uLmFyZ3MpKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHN3aXRjaCAoZGVmYXVsdFR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICByZXR1cm4gKHN0eWxpbmcsIC4uLmFyZ3MpID0+XG4gICAgICAgICAgICAoY3VzdG9tU3R5bGluZyBhcyBTdHlsaW5nVmFsdWVGdW5jdGlvbikoXG4gICAgICAgICAgICAgIG1lcmdlcihzdHlsaW5nKSh7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBkZWZhdWx0U3R5bGluZyBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAuLi5hcmdzXG4gICAgICAgICAgICApO1xuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgIHJldHVybiAoc3R5bGluZywgLi4uYXJncykgPT5cbiAgICAgICAgICAgIChjdXN0b21TdHlsaW5nIGFzIFN0eWxpbmdWYWx1ZUZ1bmN0aW9uKShcbiAgICAgICAgICAgICAgbWVyZ2VyKHN0eWxpbmcpKHtcbiAgICAgICAgICAgICAgICBzdHlsZTogZGVmYXVsdFN0eWxpbmcgYXMgQ1NTLlByb3BlcnRpZXM8c3RyaW5nIHwgbnVtYmVyPixcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gKHN0eWxpbmcsIC4uLmFyZ3MpID0+XG4gICAgICAgICAgICAoY3VzdG9tU3R5bGluZyBhcyBTdHlsaW5nVmFsdWVGdW5jdGlvbikoXG4gICAgICAgICAgICAgIChkZWZhdWx0U3R5bGluZyBhcyBTdHlsaW5nVmFsdWVGdW5jdGlvbikoXG4gICAgICAgICAgICAgICAgc3R5bGluZyxcbiAgICAgICAgICAgICAgICAuLi5hcmdzXG4gICAgICAgICAgICAgICkgYXMgU3R5bGluZyxcbiAgICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufTtcblxuY29uc3QgbWVyZ2VTdHlsaW5ncyA9IChcbiAgY3VzdG9tU3R5bGluZ3M6IFN0eWxpbmdDb25maWcsXG4gIGRlZmF1bHRTdHlsaW5nczogU3R5bGluZ0NvbmZpZ1xuKTogU3R5bGluZ0NvbmZpZyA9PiB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0U3R5bGluZ3MpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBjdXN0b21TdHlsaW5ncykge1xuICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIGtleXMucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIGtleXMucmVkdWNlKFxuICAgIChtZXJnZWRTdHlsaW5nLCBrZXkpID0+IChcbiAgICAgIChtZXJnZWRTdHlsaW5nW2tleSBhcyBrZXlvZiBTdHlsaW5nQ29uZmlnXSA9IG1lcmdlU3R5bGluZyhcbiAgICAgICAgY3VzdG9tU3R5bGluZ3Nba2V5XSBhcyBTdHlsaW5nVmFsdWUsXG4gICAgICAgIGRlZmF1bHRTdHlsaW5nc1trZXldIGFzIFN0eWxpbmdWYWx1ZVxuICAgICAgKSBhcyBTdHlsaW5nVmFsdWUpLFxuICAgICAgbWVyZ2VkU3R5bGluZ1xuICAgICksXG4gICAge30gYXMgU3R5bGluZ0NvbmZpZ1xuICApO1xufTtcblxuY29uc3QgZ2V0U3R5bGluZ0J5S2V5cyA9IChcbiAgbWVyZ2VkU3R5bGluZzogU3R5bGluZ0NvbmZpZyxcbiAga2V5czogKHN0cmluZyB8IGZhbHNlIHwgdW5kZWZpbmVkKSB8IChzdHJpbmcgfCBmYWxzZSB8IHVuZGVmaW5lZClbXSxcbiAgLi4uYXJnczogYW55W11cbik6IFN0eWxpbmcgPT4ge1xuICBpZiAoa2V5cyA9PT0gbnVsbCkge1xuICAgIHJldHVybiAobWVyZ2VkU3R5bGluZyBhcyB1bmtub3duKSBhcyBTdHlsaW5nO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAga2V5cyA9IFtrZXlzXTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlcyA9IGtleXNcbiAgICAubWFwKChrZXkpID0+IG1lcmdlZFN0eWxpbmdba2V5IGFzIHN0cmluZ10pXG4gICAgLmZpbHRlcihCb29sZWFuKTtcblxuICBjb25zdCBwcm9wcyA9IHN0eWxlcy5yZWR1Y2UoXG4gICAgKG9iaiwgcykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgICAgICBvYmouY2xhc3NOYW1lID0gW29iai5jbGFzc05hbWUsIHNdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvYmouc3R5bGUgPSB7IC4uLm9iai5zdHlsZSwgLi4ucyB9O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmogPSB7IC4uLm9iaiwgLi4ucyhvYmosIC4uLmFyZ3MpIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICB7IGNsYXNzTmFtZTogJycsIHN0eWxlOiB7fSB9XG4gICk7XG5cbiAgaWYgKCFwcm9wcy5jbGFzc05hbWUpIHtcbiAgICBkZWxldGUgcHJvcHMuY2xhc3NOYW1lO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKHByb3BzLnN0eWxlKS5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgcHJvcHMuc3R5bGU7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59O1xuXG5leHBvcnQgY29uc3QgaW52ZXJ0QmFzZTE2VGhlbWUgPSAoYmFzZTE2VGhlbWU6IEJhc2UxNlRoZW1lKTogQmFzZTE2VGhlbWUgPT5cbiAgT2JqZWN0LmtleXMoYmFzZTE2VGhlbWUpLnJlZHVjZShcbiAgICAodCwga2V5KSA9PiAoXG4gICAgICAodFtrZXkgYXMga2V5b2YgQmFzZTE2VGhlbWVdID0gL15iYXNlLy50ZXN0KGtleSlcbiAgICAgICAgPyBpbnZlcnRDb2xvcihiYXNlMTZUaGVtZVtrZXkgYXMga2V5b2YgQmFzZTE2VGhlbWVdKVxuICAgICAgICA6IGtleSA9PT0gJ3NjaGVtZSdcbiAgICAgICAgPyBiYXNlMTZUaGVtZVtrZXldICsgJzppbnZlcnRlZCdcbiAgICAgICAgOiBiYXNlMTZUaGVtZVtrZXkgYXMga2V5b2YgQmFzZTE2VGhlbWVdKSxcbiAgICAgIHRcbiAgICApLFxuICAgIHt9IGFzIEJhc2UxNlRoZW1lXG4gICk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTdHlsaW5nID0gY3VycnkoXG4gIChcbiAgICBnZXRTdHlsaW5nRnJvbUJhc2UxNjogKGJhc2UxNlRoZW1lOiBCYXNlMTZUaGVtZSkgPT4gU3R5bGluZ0NvbmZpZyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBkZWZhdWx0QmFzZTE2PzogQmFzZTE2VGhlbWU7XG4gICAgICBiYXNlMTZUaGVtZXM/OiB7IFt0aGVtZU5hbWU6IHN0cmluZ106IEJhc2UxNlRoZW1lIH07XG4gICAgfSA9IHt9LFxuICAgIHRoZW1lT3JTdHlsaW5nOiBUaGVtZSA9IHt9LFxuICAgIC4uLmFyZ3NcbiAgKTogU3R5bGluZ0Z1bmN0aW9uID0+IHtcbiAgICBjb25zdCB7IGRlZmF1bHRCYXNlMTYgPSBERUZBVUxUX0JBU0UxNiwgYmFzZTE2VGhlbWVzID0gbnVsbCB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGJhc2UxNlRoZW1lID0gZ2V0QmFzZTE2VGhlbWUodGhlbWVPclN0eWxpbmcsIGJhc2UxNlRoZW1lcyk7XG4gICAgaWYgKGJhc2UxNlRoZW1lKSB7XG4gICAgICB0aGVtZU9yU3R5bGluZyA9IHtcbiAgICAgICAgLi4uYmFzZTE2VGhlbWUsXG4gICAgICAgIC4uLih0aGVtZU9yU3R5bGluZyBhcyBCYXNlMTZUaGVtZSB8IFN0eWxpbmdDb25maWcpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB0aGVtZSA9IEJBU0UxNl9LRVlTLnJlZHVjZShcbiAgICAgICh0LCBrZXkpID0+IChcbiAgICAgICAgKHRba2V5IGFzIGtleW9mIEJhc2UxNlRoZW1lXSA9XG4gICAgICAgICAgKHRoZW1lT3JTdHlsaW5nIGFzIEJhc2UxNlRoZW1lKVtrZXkgYXMga2V5b2YgQmFzZTE2VGhlbWVdIHx8XG4gICAgICAgICAgZGVmYXVsdEJhc2UxNltrZXkgYXMga2V5b2YgQmFzZTE2VGhlbWVdKSxcbiAgICAgICAgdFxuICAgICAgKSxcbiAgICAgIHt9IGFzIEJhc2UxNlRoZW1lXG4gICAgKTtcblxuICAgIGNvbnN0IGN1c3RvbVN0eWxpbmcgPSBPYmplY3Qua2V5cyh0aGVtZU9yU3R5bGluZykucmVkdWNlKFxuICAgICAgKHMsIGtleSkgPT5cbiAgICAgICAgQkFTRTE2X0tFWVMuaW5kZXhPZihrZXkpID09PSAtMVxuICAgICAgICAgID8gKChzW2tleV0gPSAodGhlbWVPclN0eWxpbmcgYXMgU3R5bGluZ0NvbmZpZylba2V5XSksIHMpXG4gICAgICAgICAgOiBzLFxuICAgICAge30gYXMgU3R5bGluZ0NvbmZpZ1xuICAgICk7XG5cbiAgICBjb25zdCBkZWZhdWx0U3R5bGluZyA9IGdldFN0eWxpbmdGcm9tQmFzZTE2KHRoZW1lKTtcblxuICAgIGNvbnN0IG1lcmdlZFN0eWxpbmcgPSBtZXJnZVN0eWxpbmdzKGN1c3RvbVN0eWxpbmcsIGRlZmF1bHRTdHlsaW5nKTtcblxuICAgIHJldHVybiBjdXJyeShnZXRTdHlsaW5nQnlLZXlzLCAyKShtZXJnZWRTdHlsaW5nLCAuLi5hcmdzKTtcbiAgfSxcbiAgM1xuKTtcblxuY29uc3QgaXNTdHlsaW5nQ29uZmlnID0gKHRoZW1lOiBUaGVtZSk6IHRoZW1lIGlzIFN0eWxpbmdDb25maWcgPT5cbiAgISEodGhlbWUgYXMgU3R5bGluZ0NvbmZpZykuZXh0ZW5kO1xuXG5leHBvcnQgY29uc3QgZ2V0QmFzZTE2VGhlbWUgPSAoXG4gIHRoZW1lOiBUaGVtZSxcbiAgYmFzZTE2VGhlbWVzPzogeyBbdGhlbWVOYW1lOiBzdHJpbmddOiBCYXNlMTZUaGVtZSB9IHwgbnVsbFxuKTogQmFzZTE2VGhlbWUgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAodGhlbWUgJiYgaXNTdHlsaW5nQ29uZmlnKHRoZW1lKSAmJiB0aGVtZS5leHRlbmQpIHtcbiAgICB0aGVtZSA9IHRoZW1lLmV4dGVuZCBhcyBzdHJpbmcgfCBCYXNlMTZUaGVtZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgW3RoZW1lTmFtZSwgbW9kaWZpZXJdID0gdGhlbWUuc3BsaXQoJzonKTtcbiAgICBpZiAoYmFzZTE2VGhlbWVzKSB7XG4gICAgICB0aGVtZSA9IGJhc2UxNlRoZW1lc1t0aGVtZU5hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVtZSA9IGJhc2UxNlt0aGVtZU5hbWUgYXMga2V5b2YgdHlwZW9mIGJhc2UxNl07XG4gICAgfVxuICAgIGlmIChtb2RpZmllciA9PT0gJ2ludmVydGVkJykge1xuICAgICAgdGhlbWUgPSBpbnZlcnRCYXNlMTZUaGVtZSh0aGVtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoZW1lICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGVtZSwgJ2Jhc2UwMCcpXG4gICAgPyAodGhlbWUgYXMgQmFzZTE2VGhlbWUpXG4gICAgOiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgaW52ZXJ0VGhlbWUgPSAodGhlbWU6IFRoZW1lIHwgdW5kZWZpbmVkKTogVGhlbWUgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBgJHt0aGVtZX06aW52ZXJ0ZWRgO1xuICB9XG5cbiAgaWYgKHRoZW1lICYmIGlzU3R5bGluZ0NvbmZpZyh0aGVtZSkgJiYgdGhlbWUuZXh0ZW5kKSB7XG4gICAgaWYgKHR5cGVvZiB0aGVtZS5leHRlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4geyAuLi50aGVtZSwgZXh0ZW5kOiBgJHt0aGVtZS5leHRlbmR9OmludmVydGVkYCB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi50aGVtZSxcbiAgICAgIGV4dGVuZDogaW52ZXJ0QmFzZTE2VGhlbWUodGhlbWUuZXh0ZW5kIGFzIEJhc2UxNlRoZW1lKSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHRoZW1lKSB7XG4gICAgcmV0dXJuIGludmVydEJhc2UxNlRoZW1lKHRoZW1lIGFzIEJhc2UxNlRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZTtcbn07XG5cbmV4cG9ydCB7IEJhc2UxNlRoZW1lIH07XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbiJdfQ==

/***/ }),

/***/ "../../node_modules/react-base16-styling/lib/types.js":
/*!************************************************************!*\
  !*** ../../node_modules/react-base16-styling/lib/types.js ***!
  \************************************************************/
/***/ (() => {

"use strict";

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbXX0=

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/ItemRange.js":
/*!***********************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/ItemRange.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

var _JSONArrow = _interopRequireDefault(__webpack_require__(/*! ./JSONArrow */ "../../node_modules/react-json-tree/lib/JSONArrow.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ItemRange = /*#__PURE__*/function (_React$Component) {
  _inherits(ItemRange, _React$Component);

  var _super = _createSuper(ItemRange);

  function ItemRange(props) {
    var _this;

    _classCallCheck(this, ItemRange);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      _this.setState({
        expanded: !_this.state.expanded
      });
    });

    _this.state = {
      expanded: false
    };
    return _this;
  }

  _createClass(ItemRange, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          styling = _this$props.styling,
          from = _this$props.from,
          to = _this$props.to,
          renderChildNodes = _this$props.renderChildNodes,
          nodeType = _this$props.nodeType;
      return this.state.expanded ? /*#__PURE__*/_react["default"].createElement("div", styling('itemRange', this.state.expanded), renderChildNodes(this.props, from, to)) : /*#__PURE__*/_react["default"].createElement("div", _extends({}, styling('itemRange', this.state.expanded), {
        onClick: this.handleClick
      }), /*#__PURE__*/_react["default"].createElement(_JSONArrow["default"], {
        nodeType: nodeType,
        styling: styling,
        expanded: false,
        onClick: this.handleClick,
        arrowStyle: "double"
      }), "".concat(from, " ... ").concat(to));
    }
  }]);

  return ItemRange;
}(_react["default"].Component);

exports.default = ItemRange;

_defineProperty(ItemRange, "propTypes", {
  styling: _propTypes["default"].func.isRequired,
  from: _propTypes["default"].number.isRequired,
  to: _propTypes["default"].number.isRequired,
  renderChildNodes: _propTypes["default"].func.isRequired,
  nodeType: _propTypes["default"].string.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JdGVtUmFuZ2UudHN4Il0sIm5hbWVzIjpbIkl0ZW1SYW5nZSIsInByb3BzIiwic2V0U3RhdGUiLCJleHBhbmRlZCIsInN0YXRlIiwic3R5bGluZyIsImZyb20iLCJ0byIsInJlbmRlckNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImhhbmRsZUNsaWNrIiwiUmVhY3QiLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm51bWJlciIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlcUJBLFM7Ozs7O0FBU25CLHFCQUFZQyxLQUFaLEVBQTBCO0FBQUE7O0FBQUE7O0FBQ3hCLDhCQUFNQSxLQUFOOztBQUR3QixrRUE2QlosWUFBTTtBQUNsQixZQUFLQyxRQUFMLENBQWM7QUFBRUMsUUFBQUEsUUFBUSxFQUFFLENBQUMsTUFBS0MsS0FBTCxDQUFXRDtBQUF4QixPQUFkO0FBQ0QsS0EvQnlCOztBQUV4QixVQUFLQyxLQUFMLEdBQWE7QUFBRUQsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FBYjtBQUZ3QjtBQUd6Qjs7Ozs2QkFFUTtBQUFBLHdCQUNtRCxLQUFLRixLQUR4RDtBQUFBLFVBQ0NJLE9BREQsZUFDQ0EsT0FERDtBQUFBLFVBQ1VDLElBRFYsZUFDVUEsSUFEVjtBQUFBLFVBQ2dCQyxFQURoQixlQUNnQkEsRUFEaEI7QUFBQSxVQUNvQkMsZ0JBRHBCLGVBQ29CQSxnQkFEcEI7QUFBQSxVQUNzQ0MsUUFEdEMsZUFDc0NBLFFBRHRDO0FBR1AsYUFBTyxLQUFLTCxLQUFMLENBQVdELFFBQVgsZ0JBQ0wsdUNBQVNFLE9BQU8sQ0FBQyxXQUFELEVBQWMsS0FBS0QsS0FBTCxDQUFXRCxRQUF6QixDQUFoQixFQUNHSyxnQkFBZ0IsQ0FBQyxLQUFLUCxLQUFOLEVBQWFLLElBQWIsRUFBbUJDLEVBQW5CLENBRG5CLENBREssZ0JBS0wsb0RBQ01GLE9BQU8sQ0FBQyxXQUFELEVBQWMsS0FBS0QsS0FBTCxDQUFXRCxRQUF6QixDQURiO0FBRUUsUUFBQSxPQUFPLEVBQUUsS0FBS087QUFGaEIsdUJBSUUsZ0NBQUMscUJBQUQ7QUFDRSxRQUFBLFFBQVEsRUFBRUQsUUFEWjtBQUVFLFFBQUEsT0FBTyxFQUFFSixPQUZYO0FBR0UsUUFBQSxRQUFRLEVBQUUsS0FIWjtBQUlFLFFBQUEsT0FBTyxFQUFFLEtBQUtLLFdBSmhCO0FBS0UsUUFBQSxVQUFVLEVBQUM7QUFMYixRQUpGLFlBV01KLElBWE4sa0JBV2tCQyxFQVhsQixFQUxGO0FBbUJEOzs7O0VBcENvQ0ksa0JBQU1DLFM7Ozs7Z0JBQXhCWixTLGVBQ0E7QUFDakJLLEVBQUFBLE9BQU8sRUFBRVEsc0JBQVVDLElBQVYsQ0FBZUMsVUFEUDtBQUVqQlQsRUFBQUEsSUFBSSxFQUFFTyxzQkFBVUcsTUFBVixDQUFpQkQsVUFGTjtBQUdqQlIsRUFBQUEsRUFBRSxFQUFFTSxzQkFBVUcsTUFBVixDQUFpQkQsVUFISjtBQUlqQlAsRUFBQUEsZ0JBQWdCLEVBQUVLLHNCQUFVQyxJQUFWLENBQWVDLFVBSmhCO0FBS2pCTixFQUFBQSxRQUFRLEVBQUVJLHNCQUFVSSxNQUFWLENBQWlCRjtBQUxWLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBKU09OQXJyb3cgZnJvbSAnLi9KU09OQXJyb3cnO1xuaW1wb3J0IHsgQ2lyY3VsYXJQcm9wc1Bhc3NlZFRocm91Z2hJdGVtUmFuZ2UgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgQ2lyY3VsYXJQcm9wc1Bhc3NlZFRocm91Z2hJdGVtUmFuZ2Uge1xuICBkYXRhOiBhbnk7XG4gIG5vZGVUeXBlOiBzdHJpbmc7XG4gIGZyb206IG51bWJlcjtcbiAgdG86IG51bWJlcjtcbiAgcmVuZGVyQ2hpbGROb2RlczogKHByb3BzOiBQcm9wcywgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGV4cGFuZGVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJdGVtUmFuZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc3R5bGluZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmcm9tOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgdG86IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICByZW5kZXJDaGlsZE5vZGVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG5vZGVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGV4cGFuZGVkOiBmYWxzZSB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc3R5bGluZywgZnJvbSwgdG8sIHJlbmRlckNoaWxkTm9kZXMsIG5vZGVUeXBlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXhwYW5kZWQgPyAoXG4gICAgICA8ZGl2IHsuLi5zdHlsaW5nKCdpdGVtUmFuZ2UnLCB0aGlzLnN0YXRlLmV4cGFuZGVkKX0+XG4gICAgICAgIHtyZW5kZXJDaGlsZE5vZGVzKHRoaXMucHJvcHMsIGZyb20sIHRvKX1cbiAgICAgIDwvZGl2PlxuICAgICkgOiAoXG4gICAgICA8ZGl2XG4gICAgICAgIHsuLi5zdHlsaW5nKCdpdGVtUmFuZ2UnLCB0aGlzLnN0YXRlLmV4cGFuZGVkKX1cbiAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgID5cbiAgICAgICAgPEpTT05BcnJvd1xuICAgICAgICAgIG5vZGVUeXBlPXtub2RlVHlwZX1cbiAgICAgICAgICBzdHlsaW5nPXtzdHlsaW5nfVxuICAgICAgICAgIGV4cGFuZGVkPXtmYWxzZX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfVxuICAgICAgICAgIGFycm93U3R5bGU9XCJkb3VibGVcIlxuICAgICAgICAvPlxuICAgICAgICB7YCR7ZnJvbX0gLi4uICR7dG99YH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZXhwYW5kZWQ6ICF0aGlzLnN0YXRlLmV4cGFuZGVkIH0pO1xuICB9O1xufVxuIl19

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONArrayNode.js":
/*!***************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONArrayNode.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

var _JSONNestedNode = _interopRequireDefault(__webpack_require__(/*! ./JSONNestedNode */ "../../node_modules/react-json-tree/lib/JSONNestedNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Returns the "n Items" string for this node,
// generating and caching it if it hasn't been created yet.
function createItemString(data) {
  return "".concat(data.length, " ").concat(data.length !== 1 ? 'items' : 'item');
}

// Configures <JSONNestedNode> to render an Array
var JSONArrayNode = function JSONArrayNode(_ref) {
  var data = _ref.data,
      props = _objectWithoutProperties(_ref, ["data"]);

  return /*#__PURE__*/_react["default"].createElement(_JSONNestedNode["default"], _extends({}, props, {
    data: data,
    nodeType: "Array",
    nodeTypeIndicator: "[]",
    createItemString: createItemString,
    expandable: data.length > 0
  }));
};

JSONArrayNode.propTypes = {
  data: _propTypes["default"].array
};
var _default = JSONArrayNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OQXJyYXlOb2RlLnRzeCJdLCJuYW1lcyI6WyJjcmVhdGVJdGVtU3RyaW5nIiwiZGF0YSIsImxlbmd0aCIsIkpTT05BcnJheU5vZGUiLCJwcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7QUFHQTtBQUNBO0FBQ0EsU0FBU0EsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQXFDO0FBQ25DLG1CQUFXQSxJQUFELENBQW9CQyxNQUE5QixjQUNHRCxJQUFELENBQW9CQyxNQUFwQixLQUErQixDQUEvQixHQUFtQyxPQUFuQyxHQUE2QyxNQUQvQztBQUdEOztBQU9EO0FBQ0EsSUFBTUMsYUFBNkMsR0FBRyxTQUFoREEsYUFBZ0Q7QUFBQSxNQUFHRixJQUFILFFBQUdBLElBQUg7QUFBQSxNQUFZRyxLQUFaOztBQUFBLHNCQUNwRCxnQ0FBQywwQkFBRCxlQUNNQSxLQUROO0FBRUUsSUFBQSxJQUFJLEVBQUVILElBRlI7QUFHRSxJQUFBLFFBQVEsRUFBQyxPQUhYO0FBSUUsSUFBQSxpQkFBaUIsRUFBQyxJQUpwQjtBQUtFLElBQUEsZ0JBQWdCLEVBQUVELGdCQUxwQjtBQU1FLElBQUEsVUFBVSxFQUFFQyxJQUFJLENBQUNDLE1BQUwsR0FBYztBQU41QixLQURvRDtBQUFBLENBQXREOztBQVdBQyxhQUFhLENBQUNFLFNBQWQsR0FBMEI7QUFDeEJKLEVBQUFBLElBQUksRUFBRUssc0JBQVVDO0FBRFEsQ0FBMUI7ZUFJZUosYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEpTT05OZXN0ZWROb2RlIGZyb20gJy4vSlNPTk5lc3RlZE5vZGUnO1xuaW1wb3J0IHsgQ2lyY3VsYXJQcm9wc1Bhc3NlZFRocm91Z2hKU09OTm9kZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBSZXR1cm5zIHRoZSBcIm4gSXRlbXNcIiBzdHJpbmcgZm9yIHRoaXMgbm9kZSxcbi8vIGdlbmVyYXRpbmcgYW5kIGNhY2hpbmcgaXQgaWYgaXQgaGFzbid0IGJlZW4gY3JlYXRlZCB5ZXQuXG5mdW5jdGlvbiBjcmVhdGVJdGVtU3RyaW5nKGRhdGE6IGFueSkge1xuICByZXR1cm4gYCR7KGRhdGEgYXMgdW5rbm93bltdKS5sZW5ndGh9ICR7XG4gICAgKGRhdGEgYXMgdW5rbm93bltdKS5sZW5ndGggIT09IDEgPyAnaXRlbXMnIDogJ2l0ZW0nXG4gIH1gO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBDaXJjdWxhclByb3BzUGFzc2VkVGhyb3VnaEpTT05Ob2RlIHtcbiAgZGF0YTogYW55O1xuICBub2RlVHlwZTogc3RyaW5nO1xufVxuXG4vLyBDb25maWd1cmVzIDxKU09OTmVzdGVkTm9kZT4gdG8gcmVuZGVyIGFuIEFycmF5XG5jb25zdCBKU09OQXJyYXlOb2RlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBkYXRhLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxKU09OTmVzdGVkTm9kZVxuICAgIHsuLi5wcm9wc31cbiAgICBkYXRhPXtkYXRhfVxuICAgIG5vZGVUeXBlPVwiQXJyYXlcIlxuICAgIG5vZGVUeXBlSW5kaWNhdG9yPVwiW11cIlxuICAgIGNyZWF0ZUl0ZW1TdHJpbmc9e2NyZWF0ZUl0ZW1TdHJpbmd9XG4gICAgZXhwYW5kYWJsZT17ZGF0YS5sZW5ndGggPiAwfVxuICAvPlxuKTtcblxuSlNPTkFycmF5Tm9kZS5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEpTT05BcnJheU5vZGU7XG4iXX0=

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONArrow.js":
/*!***********************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONArrow.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var JSONArrow = function JSONArrow(_ref) {
  var styling = _ref.styling,
      arrowStyle = _ref.arrowStyle,
      expanded = _ref.expanded,
      nodeType = _ref.nodeType,
      onClick = _ref.onClick;
  return /*#__PURE__*/_react["default"].createElement("div", _extends({}, styling('arrowContainer', arrowStyle), {
    onClick: onClick
  }), /*#__PURE__*/_react["default"].createElement("div", styling(['arrow', 'arrowSign'], nodeType, expanded, arrowStyle), "\u25B6", arrowStyle === 'double' && /*#__PURE__*/_react["default"].createElement("div", styling(['arrowSign', 'arrowSignInner']), "\u25B6")));
};

JSONArrow.propTypes = {
  styling: _propTypes["default"].func.isRequired,
  arrowStyle: _propTypes["default"].oneOf(['single', 'double']),
  expanded: _propTypes["default"].bool.isRequired,
  nodeType: _propTypes["default"].string.isRequired,
  onClick: _propTypes["default"].func.isRequired
};
JSONArrow.defaultProps = {
  arrowStyle: 'single'
};
var _default = JSONArrow;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OQXJyb3cudHN4Il0sIm5hbWVzIjpbIkpTT05BcnJvdyIsInN0eWxpbmciLCJhcnJvd1N0eWxlIiwiZXhwYW5kZWQiLCJub2RlVHlwZSIsIm9uQ2xpY2siLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsInN0cmluZyIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7QUFXQSxJQUFNQSxTQUF5QyxHQUFHLFNBQTVDQSxTQUE0QztBQUFBLE1BQ2hEQyxPQURnRCxRQUNoREEsT0FEZ0Q7QUFBQSxNQUVoREMsVUFGZ0QsUUFFaERBLFVBRmdEO0FBQUEsTUFHaERDLFFBSGdELFFBR2hEQSxRQUhnRDtBQUFBLE1BSWhEQyxRQUpnRCxRQUloREEsUUFKZ0Q7QUFBQSxNQUtoREMsT0FMZ0QsUUFLaERBLE9BTGdEO0FBQUEsc0JBT2hELG9EQUFTSixPQUFPLENBQUMsZ0JBQUQsRUFBbUJDLFVBQW5CLENBQWhCO0FBQWdELElBQUEsT0FBTyxFQUFFRztBQUF6RCxtQkFDRSx1Q0FBU0osT0FBTyxDQUFDLENBQUMsT0FBRCxFQUFVLFdBQVYsQ0FBRCxFQUF5QkcsUUFBekIsRUFBbUNELFFBQW5DLEVBQTZDRCxVQUE3QyxDQUFoQixFQUNHLFFBREgsRUFFR0EsVUFBVSxLQUFLLFFBQWYsaUJBQ0MsdUNBQVNELE9BQU8sQ0FBQyxDQUFDLFdBQUQsRUFBYyxnQkFBZCxDQUFELENBQWhCLEVBQW9ELFFBQXBELENBSEosQ0FERixDQVBnRDtBQUFBLENBQWxEOztBQWlCQUQsU0FBUyxDQUFDTSxTQUFWLEdBQXNCO0FBQ3BCTCxFQUFBQSxPQUFPLEVBQUVNLHNCQUFVQyxJQUFWLENBQWVDLFVBREo7QUFFcEJQLEVBQUFBLFVBQVUsRUFBRUssc0JBQVVHLEtBQVYsQ0FBZ0IsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFoQixDQUZRO0FBR3BCUCxFQUFBQSxRQUFRLEVBQUVJLHNCQUFVSSxJQUFWLENBQWVGLFVBSEw7QUFJcEJMLEVBQUFBLFFBQVEsRUFBRUcsc0JBQVVLLE1BQVYsQ0FBaUJILFVBSlA7QUFLcEJKLEVBQUFBLE9BQU8sRUFBRUUsc0JBQVVDLElBQVYsQ0FBZUM7QUFMSixDQUF0QjtBQVFBVCxTQUFTLENBQUNhLFlBQVYsR0FBeUI7QUFDdkJYLEVBQUFBLFVBQVUsRUFBRTtBQURXLENBQXpCO2VBSWVGLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN0eWxpbmdGdW5jdGlvbiB9IGZyb20gJ3JlYWN0LWJhc2UxNi1zdHlsaW5nJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc3R5bGluZzogU3R5bGluZ0Z1bmN0aW9uO1xuICBhcnJvd1N0eWxlPzogJ3NpbmdsZScgfCAnZG91YmxlJztcbiAgZXhwYW5kZWQ6IGJvb2xlYW47XG4gIG5vZGVUeXBlOiBzdHJpbmc7XG4gIG9uQ2xpY2s6IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50Pjtcbn1cblxuY29uc3QgSlNPTkFycm93OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBzdHlsaW5nLFxuICBhcnJvd1N0eWxlLFxuICBleHBhbmRlZCxcbiAgbm9kZVR5cGUsXG4gIG9uQ2xpY2ssXG59KSA9PiAoXG4gIDxkaXYgey4uLnN0eWxpbmcoJ2Fycm93Q29udGFpbmVyJywgYXJyb3dTdHlsZSl9IG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgIDxkaXYgey4uLnN0eWxpbmcoWydhcnJvdycsICdhcnJvd1NpZ24nXSwgbm9kZVR5cGUsIGV4cGFuZGVkLCBhcnJvd1N0eWxlKX0+XG4gICAgICB7J1xcdTI1QjYnfVxuICAgICAge2Fycm93U3R5bGUgPT09ICdkb3VibGUnICYmIChcbiAgICAgICAgPGRpdiB7Li4uc3R5bGluZyhbJ2Fycm93U2lnbicsICdhcnJvd1NpZ25Jbm5lciddKX0+eydcXHUyNUI2J308L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuKTtcblxuSlNPTkFycm93LnByb3BUeXBlcyA9IHtcbiAgc3R5bGluZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgYXJyb3dTdHlsZTogUHJvcFR5cGVzLm9uZU9mKFsnc2luZ2xlJywgJ2RvdWJsZSddKSxcbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG5vZGVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5KU09OQXJyb3cuZGVmYXVsdFByb3BzID0ge1xuICBhcnJvd1N0eWxlOiAnc2luZ2xlJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEpTT05BcnJvdztcbiJdfQ==

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONIterableNode.js":
/*!******************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONIterableNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _JSONNestedNode = _interopRequireDefault(__webpack_require__(/*! ./JSONNestedNode */ "../../node_modules/react-json-tree/lib/JSONNestedNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Returns the "n Items" string for this node,
// generating and caching it if it hasn't been created yet.
function createItemString(data, limit) {
  var count = 0;
  var hasMore = false;

  if (Number.isSafeInteger(data.size)) {
    count = data.size;
  } else {
    // eslint-disable-next-line no-unused-vars
    var _iterator = _createForOfIteratorHelper(data),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var entry = _step.value;

        if (limit && count + 1 > limit) {
          hasMore = true;
          break;
        }

        count += 1;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return "".concat(hasMore ? '>' : '').concat(count, " ").concat(count !== 1 ? 'entries' : 'entry');
}

// Configures <JSONNestedNode> to render an iterable
var JSONIterableNode = function JSONIterableNode(_ref) {
  var props = _extends({}, _ref);

  return /*#__PURE__*/_react["default"].createElement(_JSONNestedNode["default"], _extends({}, props, {
    nodeType: "Iterable",
    nodeTypeIndicator: "()",
    createItemString: createItemString
  }));
};

var _default = JSONIterableNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OSXRlcmFibGVOb2RlLnRzeCJdLCJuYW1lcyI6WyJjcmVhdGVJdGVtU3RyaW5nIiwiZGF0YSIsImxpbWl0IiwiY291bnQiLCJoYXNNb3JlIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsInNpemUiLCJlbnRyeSIsIkpTT05JdGVyYWJsZU5vZGUiLCJwcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFHQTtBQUNBO0FBQ0EsU0FBU0EsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQXFDQyxLQUFyQyxFQUFvRDtBQUNsRCxNQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlDLE9BQU8sR0FBRyxLQUFkOztBQUNBLE1BQUlDLE1BQU0sQ0FBQ0MsYUFBUCxDQUFxQkwsSUFBSSxDQUFDTSxJQUExQixDQUFKLEVBQXFDO0FBQ25DSixJQUFBQSxLQUFLLEdBQUdGLElBQUksQ0FBQ00sSUFBYjtBQUNELEdBRkQsTUFFTztBQUNMO0FBREssK0NBRWVOLElBRmY7QUFBQTs7QUFBQTtBQUVMLDBEQUEwQjtBQUFBLFlBQWZPLEtBQWU7O0FBQ3hCLFlBQUlOLEtBQUssSUFBSUMsS0FBSyxHQUFHLENBQVIsR0FBWUQsS0FBekIsRUFBZ0M7QUFDOUJFLFVBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0E7QUFDRDs7QUFDREQsUUFBQUEsS0FBSyxJQUFJLENBQVQ7QUFDRDtBQVJJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFTTjs7QUFDRCxtQkFBVUMsT0FBTyxHQUFHLEdBQUgsR0FBUyxFQUExQixTQUErQkQsS0FBL0IsY0FBd0NBLEtBQUssS0FBSyxDQUFWLEdBQWMsU0FBZCxHQUEwQixPQUFsRTtBQUNEOztBQU9EO0FBQ0EsSUFBTU0sZ0JBQWdELEdBQUcsU0FBbkRBLGdCQUFtRCxPQUFrQjtBQUFBLE1BQVpDLEtBQVk7O0FBQ3pFLHNCQUNFLGdDQUFDLDBCQUFELGVBQ01BLEtBRE47QUFFRSxJQUFBLFFBQVEsRUFBQyxVQUZYO0FBR0UsSUFBQSxpQkFBaUIsRUFBQyxJQUhwQjtBQUlFLElBQUEsZ0JBQWdCLEVBQUVWO0FBSnBCLEtBREY7QUFRRCxDQVREOztlQVdlUyxnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSlNPTk5lc3RlZE5vZGUgZnJvbSAnLi9KU09OTmVzdGVkTm9kZSc7XG5pbXBvcnQgeyBDaXJjdWxhclByb3BzUGFzc2VkVGhyb3VnaEpTT05Ob2RlIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIFJldHVybnMgdGhlIFwibiBJdGVtc1wiIHN0cmluZyBmb3IgdGhpcyBub2RlLFxuLy8gZ2VuZXJhdGluZyBhbmQgY2FjaGluZyBpdCBpZiBpdCBoYXNuJ3QgYmVlbiBjcmVhdGVkIHlldC5cbmZ1bmN0aW9uIGNyZWF0ZUl0ZW1TdHJpbmcoZGF0YTogYW55LCBsaW1pdDogbnVtYmVyKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCBoYXNNb3JlID0gZmFsc2U7XG4gIGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcihkYXRhLnNpemUpKSB7XG4gICAgY291bnQgPSBkYXRhLnNpemU7XG4gIH0gZWxzZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBkYXRhKSB7XG4gICAgICBpZiAobGltaXQgJiYgY291bnQgKyAxID4gbGltaXQpIHtcbiAgICAgICAgaGFzTW9yZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGAke2hhc01vcmUgPyAnPicgOiAnJ30ke2NvdW50fSAke2NvdW50ICE9PSAxID8gJ2VudHJpZXMnIDogJ2VudHJ5J31gO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBDaXJjdWxhclByb3BzUGFzc2VkVGhyb3VnaEpTT05Ob2RlIHtcbiAgZGF0YTogYW55O1xuICBub2RlVHlwZTogc3RyaW5nO1xufVxuXG4vLyBDb25maWd1cmVzIDxKU09OTmVzdGVkTm9kZT4gdG8gcmVuZGVyIGFuIGl0ZXJhYmxlXG5jb25zdCBKU09OSXRlcmFibGVOb2RlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyAuLi5wcm9wcyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEpTT05OZXN0ZWROb2RlXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBub2RlVHlwZT1cIkl0ZXJhYmxlXCJcbiAgICAgIG5vZGVUeXBlSW5kaWNhdG9yPVwiKClcIlxuICAgICAgY3JlYXRlSXRlbVN0cmluZz17Y3JlYXRlSXRlbVN0cmluZ31cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSlNPTkl0ZXJhYmxlTm9kZTtcbiJdfQ==

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONNestedNode.js":
/*!****************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONNestedNode.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

var _JSONArrow = _interopRequireDefault(__webpack_require__(/*! ./JSONArrow */ "../../node_modules/react-json-tree/lib/JSONArrow.js"));

var _getCollectionEntries = _interopRequireDefault(__webpack_require__(/*! ./getCollectionEntries */ "../../node_modules/react-json-tree/lib/getCollectionEntries.js"));

var _JSONNode = _interopRequireDefault(__webpack_require__(/*! ./JSONNode */ "../../node_modules/react-json-tree/lib/JSONNode.js"));

var _ItemRange = _interopRequireDefault(__webpack_require__(/*! ./ItemRange */ "../../node_modules/react-json-tree/lib/ItemRange.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function isRange(rangeOrEntry) {
  return rangeOrEntry.to !== undefined;
}

function renderChildNodes(props, from, to) {
  var nodeType = props.nodeType,
      data = props.data,
      collectionLimit = props.collectionLimit,
      circularCache = props.circularCache,
      keyPath = props.keyPath,
      postprocessValue = props.postprocessValue,
      sortObjectKeys = props.sortObjectKeys;
  var childNodes = [];
  (0, _getCollectionEntries["default"])(nodeType, data, sortObjectKeys, collectionLimit, from, to).forEach(function (entry) {
    if (isRange(entry)) {
      childNodes.push( /*#__PURE__*/_react["default"].createElement(_ItemRange["default"], _extends({}, props, {
        key: "ItemRange--".concat(entry.from, "-").concat(entry.to),
        from: entry.from,
        to: entry.to,
        renderChildNodes: renderChildNodes
      })));
    } else {
      var key = entry.key,
          value = entry.value;
      var isCircular = circularCache.indexOf(value) !== -1;
      childNodes.push( /*#__PURE__*/_react["default"].createElement(_JSONNode["default"], _extends({}, props, {
        postprocessValue: postprocessValue,
        collectionLimit: collectionLimit
      }, {
        key: "Node--".concat(key),
        keyPath: [key].concat(_toConsumableArray(keyPath)),
        value: postprocessValue(value),
        circularCache: [].concat(_toConsumableArray(circularCache), [value]),
        isCircular: isCircular,
        hideRoot: false
      })));
    }
  });
  return childNodes;
}

function getStateFromProps(props) {
  // calculate individual node expansion if necessary
  var expanded = props.shouldExpandNode && !props.isCircular ? props.shouldExpandNode(props.keyPath, props.data, props.level) : false;
  return {
    expanded: expanded
  };
}

var JSONNestedNode = /*#__PURE__*/function (_React$Component) {
  _inherits(JSONNestedNode, _React$Component);

  var _super = _createSuper(JSONNestedNode);

  function JSONNestedNode(props) {
    var _this;

    _classCallCheck(this, JSONNestedNode);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      if (_this.props.expandable) {
        _this.setState({
          expanded: !_this.state.expanded
        });
      }
    });

    _this.state = getStateFromProps(props);
    return _this;
  }

  _createClass(JSONNestedNode, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var nextState = getStateFromProps(nextProps);

      if (getStateFromProps(this.props).expanded !== nextState.expanded) {
        this.setState(nextState);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var _this2 = this;

      return !!Object.keys(nextProps).find(function (key) {
        return key !== 'circularCache' && (key === 'keyPath' ? nextProps[key].join('/') !== _this2.props[key].join('/') : nextProps[key] !== _this2.props[key]);
      }) || nextState.expanded !== this.state.expanded;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          getItemString = _this$props.getItemString,
          nodeTypeIndicator = _this$props.nodeTypeIndicator,
          nodeType = _this$props.nodeType,
          data = _this$props.data,
          hideRoot = _this$props.hideRoot,
          createItemString = _this$props.createItemString,
          styling = _this$props.styling,
          collectionLimit = _this$props.collectionLimit,
          keyPath = _this$props.keyPath,
          labelRenderer = _this$props.labelRenderer,
          expandable = _this$props.expandable;
      var expanded = this.state.expanded;
      var renderedChildren = expanded || hideRoot && this.props.level === 0 ? renderChildNodes(_objectSpread(_objectSpread({}, this.props), {}, {
        level: this.props.level + 1
      })) : null;

      var itemType = /*#__PURE__*/_react["default"].createElement("span", styling('nestedNodeItemType', expanded), nodeTypeIndicator);

      var renderedItemString = getItemString(nodeType, data, itemType, createItemString(data, collectionLimit), keyPath);
      var stylingArgs = [keyPath, nodeType, expanded, expandable];
      return hideRoot ? /*#__PURE__*/_react["default"].createElement("li", styling.apply(void 0, ['rootNode'].concat(stylingArgs)), /*#__PURE__*/_react["default"].createElement("ul", styling.apply(void 0, ['rootNodeChildren'].concat(stylingArgs)), renderedChildren)) : /*#__PURE__*/_react["default"].createElement("li", styling.apply(void 0, ['nestedNode'].concat(stylingArgs)), expandable && /*#__PURE__*/_react["default"].createElement(_JSONArrow["default"], {
        styling: styling,
        nodeType: nodeType,
        expanded: expanded,
        onClick: this.handleClick
      }), /*#__PURE__*/_react["default"].createElement("label", _extends({}, styling.apply(void 0, [['label', 'nestedNodeLabel']].concat(stylingArgs)), {
        onClick: this.handleClick
      }), labelRenderer.apply(void 0, stylingArgs)), /*#__PURE__*/_react["default"].createElement("span", _extends({}, styling.apply(void 0, ['nestedNodeItemString'].concat(stylingArgs)), {
        onClick: this.handleClick
      }), renderedItemString), /*#__PURE__*/_react["default"].createElement("ul", styling.apply(void 0, ['nestedNodeChildren'].concat(stylingArgs)), renderedChildren));
    }
  }]);

  return JSONNestedNode;
}(_react["default"].Component);

exports.default = JSONNestedNode;

_defineProperty(JSONNestedNode, "propTypes", {
  getItemString: _propTypes["default"].func.isRequired,
  nodeTypeIndicator: _propTypes["default"].any,
  nodeType: _propTypes["default"].string.isRequired,
  data: _propTypes["default"].any,
  hideRoot: _propTypes["default"].bool.isRequired,
  createItemString: _propTypes["default"].func.isRequired,
  styling: _propTypes["default"].func.isRequired,
  collectionLimit: _propTypes["default"].number,
  keyPath: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])).isRequired,
  labelRenderer: _propTypes["default"].func.isRequired,
  shouldExpandNode: _propTypes["default"].func,
  level: _propTypes["default"].number.isRequired,
  sortObjectKeys: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].bool]),
  isCircular: _propTypes["default"].bool,
  expandable: _propTypes["default"].bool
});

_defineProperty(JSONNestedNode, "defaultProps", {
  data: [],
  circularCache: [],
  level: 0,
  expandable: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONNode.js":
/*!**********************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONNode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

var _objType = _interopRequireDefault(__webpack_require__(/*! ./objType */ "../../node_modules/react-json-tree/lib/objType.js"));

var _JSONObjectNode = _interopRequireDefault(__webpack_require__(/*! ./JSONObjectNode */ "../../node_modules/react-json-tree/lib/JSONObjectNode.js"));

var _JSONArrayNode = _interopRequireDefault(__webpack_require__(/*! ./JSONArrayNode */ "../../node_modules/react-json-tree/lib/JSONArrayNode.js"));

var _JSONIterableNode = _interopRequireDefault(__webpack_require__(/*! ./JSONIterableNode */ "../../node_modules/react-json-tree/lib/JSONIterableNode.js"));

var _JSONValueNode = _interopRequireDefault(__webpack_require__(/*! ./JSONValueNode */ "../../node_modules/react-json-tree/lib/JSONValueNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var JSONNode = function JSONNode(_ref) {
  var getItemString = _ref.getItemString,
      keyPath = _ref.keyPath,
      labelRenderer = _ref.labelRenderer,
      styling = _ref.styling,
      value = _ref.value,
      valueRenderer = _ref.valueRenderer,
      isCustomNode = _ref.isCustomNode,
      rest = _objectWithoutProperties(_ref, ["getItemString", "keyPath", "labelRenderer", "styling", "value", "valueRenderer", "isCustomNode"]);

  var nodeType = isCustomNode(value) ? 'Custom' : (0, _objType["default"])(value);
  var simpleNodeProps = {
    getItemString: getItemString,
    key: keyPath[0],
    keyPath: keyPath,
    labelRenderer: labelRenderer,
    nodeType: nodeType,
    styling: styling,
    value: value,
    valueRenderer: valueRenderer
  };

  var nestedNodeProps = _objectSpread(_objectSpread(_objectSpread({}, rest), simpleNodeProps), {}, {
    data: value,
    isCustomNode: isCustomNode
  });

  switch (nodeType) {
    case 'Object':
    case 'Error':
    case 'WeakMap':
    case 'WeakSet':
      return /*#__PURE__*/_react["default"].createElement(_JSONObjectNode["default"], nestedNodeProps);

    case 'Array':
      return /*#__PURE__*/_react["default"].createElement(_JSONArrayNode["default"], nestedNodeProps);

    case 'Iterable':
    case 'Map':
    case 'Set':
      return /*#__PURE__*/_react["default"].createElement(_JSONIterableNode["default"], nestedNodeProps);

    case 'String':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return "\"".concat(raw, "\"");
        }
      }));

    case 'Number':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], simpleNodeProps);

    case 'Boolean':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return raw ? 'true' : 'false';
        }
      }));

    case 'Date':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return raw.toISOString();
        }
      }));

    case 'Null':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter() {
          return 'null';
        }
      }));

    case 'Undefined':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter() {
          return 'undefined';
        }
      }));

    case 'Function':
    case 'Symbol':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return raw.toString();
        }
      }));

    case 'Custom':
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], simpleNodeProps);

    default:
      return /*#__PURE__*/_react["default"].createElement(_JSONValueNode["default"], _extends({}, simpleNodeProps, {
        valueGetter: function valueGetter() {
          return "<".concat(nodeType, ">");
        }
      }));
  }
};

JSONNode.propTypes = {
  getItemString: _propTypes["default"].func.isRequired,
  keyPath: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]).isRequired).isRequired,
  labelRenderer: _propTypes["default"].func.isRequired,
  styling: _propTypes["default"].func.isRequired,
  value: _propTypes["default"].any,
  valueRenderer: _propTypes["default"].func.isRequired,
  isCustomNode: _propTypes["default"].func.isRequired
};
var _default = JSONNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OTm9kZS50c3giXSwibmFtZXMiOlsiSlNPTk5vZGUiLCJnZXRJdGVtU3RyaW5nIiwia2V5UGF0aCIsImxhYmVsUmVuZGVyZXIiLCJzdHlsaW5nIiwidmFsdWUiLCJ2YWx1ZVJlbmRlcmVyIiwiaXNDdXN0b21Ob2RlIiwicmVzdCIsIm5vZGVUeXBlIiwic2ltcGxlTm9kZVByb3BzIiwia2V5IiwibmVzdGVkTm9kZVByb3BzIiwiZGF0YSIsInJhdyIsInRvSVNPU3RyaW5nIiwidG9TdHJpbmciLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImFycmF5T2YiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJudW1iZXIiLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQVNBLElBQU1BLFFBQXdDLEdBQUcsU0FBM0NBLFFBQTJDLE9BUzNDO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsT0FPSSxRQVBKQSxPQU9JO0FBQUEsTUFOSkMsYUFNSSxRQU5KQSxhQU1JO0FBQUEsTUFMSkMsT0FLSSxRQUxKQSxPQUtJO0FBQUEsTUFKSkMsS0FJSSxRQUpKQSxLQUlJO0FBQUEsTUFISkMsYUFHSSxRQUhKQSxhQUdJO0FBQUEsTUFGSkMsWUFFSSxRQUZKQSxZQUVJO0FBQUEsTUFEREMsSUFDQzs7QUFDSixNQUFNQyxRQUFRLEdBQUdGLFlBQVksQ0FBQ0YsS0FBRCxDQUFaLEdBQXNCLFFBQXRCLEdBQWlDLHlCQUFRQSxLQUFSLENBQWxEO0FBRUEsTUFBTUssZUFBZSxHQUFHO0FBQ3RCVCxJQUFBQSxhQUFhLEVBQWJBLGFBRHNCO0FBRXRCVSxJQUFBQSxHQUFHLEVBQUVULE9BQU8sQ0FBQyxDQUFELENBRlU7QUFHdEJBLElBQUFBLE9BQU8sRUFBUEEsT0FIc0I7QUFJdEJDLElBQUFBLGFBQWEsRUFBYkEsYUFK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UEU7QUFRbkJuQixFQUFBQSxhQUFhLEVBQUVZLHNCQUFVQyxJQUFWLENBQWVDLFVBUlg7QUFTbkJiLEVBQUFBLFlBQVksRUFBRVcsc0JBQVVDLElBQVYsQ0FBZUM7QUFUVixDQUFyQjtlQVllcEIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG9ialR5cGUgZnJvbSAnLi9vYmpUeXBlJztcbmltcG9ydCBKU09OT2JqZWN0Tm9kZSBmcm9tICcuL0pTT05PYmplY3ROb2RlJztcbmltcG9ydCBKU09OQXJyYXlOb2RlIGZyb20gJy4vSlNPTkFycmF5Tm9kZSc7XG5pbXBvcnQgSlNPTkl0ZXJhYmxlTm9kZSBmcm9tICcuL0pTT05JdGVyYWJsZU5vZGUnO1xuaW1wb3J0IEpTT05WYWx1ZU5vZGUgZnJvbSAnLi9KU09OVmFsdWVOb2RlJztcbmltcG9ydCB7IENpcmN1bGFyUHJvcHNQYXNzZWRUaHJvdWdoSlNPTk5vZGUgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgQ2lyY3VsYXJQcm9wc1Bhc3NlZFRocm91Z2hKU09OTm9kZSB7XG4gIGtleVBhdGg6IChzdHJpbmcgfCBudW1iZXIpW107XG4gIHZhbHVlOiBhbnk7XG4gIGlzQ3VzdG9tTm9kZTogKHZhbHVlOiBhbnkpID0+IGJvb2xlYW47XG59XG5cbmNvbnN0IEpTT05Ob2RlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBnZXRJdGVtU3RyaW5nLFxuICBrZXlQYXRoLFxuICBsYWJlbFJlbmRlcmVyLFxuICBzdHlsaW5nLFxuICB2YWx1ZSxcbiAgdmFsdWVSZW5kZXJlcixcbiAgaXNDdXN0b21Ob2RlLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IG5vZGVUeXBlID0gaXNDdXN0b21Ob2RlKHZhbHVlKSA/ICdDdXN0b20nIDogb2JqVHlwZSh2YWx1ZSk7XG5cbiAgY29uc3Qgc2ltcGxlTm9kZVByb3BzID0ge1xuICAgIGdldEl0ZW1TdHJpbmcsXG4gICAga2V5OiBrZXlQYXRoWzBdLFxuICAgIGtleVBhdGgsXG4gICAgbGFiZWxSZW5kZXJlcixcbiAgICBub2RlVHlwZSxcbiAgICBzdHlsaW5nLFxuICAgIHZhbHVlLFxuICAgIHZhbHVlUmVuZGVyZXIsXG4gIH07XG5cbiAgY29uc3QgbmVzdGVkTm9kZVByb3BzID0ge1xuICAgIC4uLnJlc3QsXG4gICAgLi4uc2ltcGxlTm9kZVByb3BzLFxuICAgIGRhdGE6IHZhbHVlLFxuICAgIGlzQ3VzdG9tTm9kZSxcbiAgfTtcblxuICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICBjYXNlICdFcnJvcic6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgICByZXR1cm4gPEpTT05PYmplY3ROb2RlIHsuLi5uZXN0ZWROb2RlUHJvcHN9IC8+O1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiA8SlNPTkFycmF5Tm9kZSB7Li4ubmVzdGVkTm9kZVByb3BzfSAvPjtcbiAgICBjYXNlICdJdGVyYWJsZSc6XG4gICAgY2FzZSAnTWFwJzpcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIDxKU09OSXRlcmFibGVOb2RlIHsuLi5uZXN0ZWROb2RlUHJvcHN9IC8+O1xuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8SlNPTlZhbHVlTm9kZVxuICAgICAgICAgIHsuLi5zaW1wbGVOb2RlUHJvcHN9XG4gICAgICAgICAgdmFsdWVHZXR0ZXI9eyhyYXc6IHN0cmluZykgPT4gYFwiJHtyYXd9XCJgfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICBjYXNlICdOdW1iZXInOlxuICAgICAgcmV0dXJuIDxKU09OVmFsdWVOb2RlIHsuLi5zaW1wbGVOb2RlUHJvcHN9IC8+O1xuICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEpTT05WYWx1ZU5vZGVcbiAgICAgICAgICB7Li4uc2ltcGxlTm9kZVByb3BzfVxuICAgICAgICAgIHZhbHVlR2V0dGVyPXsocmF3KSA9PiAocmF3ID8gJ3RydWUnIDogJ2ZhbHNlJyl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEpTT05WYWx1ZU5vZGVcbiAgICAgICAgICB7Li4uc2ltcGxlTm9kZVByb3BzfVxuICAgICAgICAgIHZhbHVlR2V0dGVyPXsocmF3KSA9PiByYXcudG9JU09TdHJpbmcoKX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgY2FzZSAnTnVsbCc6XG4gICAgICByZXR1cm4gPEpTT05WYWx1ZU5vZGUgey4uLnNpbXBsZU5vZGVQcm9wc30gdmFsdWVHZXR0ZXI9eygpID0+ICdudWxsJ30gLz47XG4gICAgY2FzZSAnVW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxKU09OVmFsdWVOb2RlIHsuLi5zaW1wbGVOb2RlUHJvcHN9IHZhbHVlR2V0dGVyPXsoKSA9PiAndW5kZWZpbmVkJ30gLz5cbiAgICAgICk7XG4gICAgY2FzZSAnRnVuY3Rpb24nOlxuICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8SlNPTlZhbHVlTm9kZVxuICAgICAgICAgIHsuLi5zaW1wbGVOb2RlUHJvcHN9XG4gICAgICAgICAgdmFsdWVHZXR0ZXI9eyhyYXcpID0+IHJhdy50b1N0cmluZygpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICBjYXNlICdDdXN0b20nOlxuICAgICAgcmV0dXJuIDxKU09OVmFsdWVOb2RlIHsuLi5zaW1wbGVOb2RlUHJvcHN9IC8+O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8SlNPTlZhbHVlTm9kZVxuICAgICAgICAgIHsuLi5zaW1wbGVOb2RlUHJvcHN9XG4gICAgICAgICAgdmFsdWVHZXR0ZXI9eygpID0+IGA8JHtub2RlVHlwZX0+YH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gIH1cbn07XG5cbkpTT05Ob2RlLnByb3BUeXBlcyA9IHtcbiAgZ2V0SXRlbVN0cmluZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAga2V5UGF0aDogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWRcbiAgKS5pc1JlcXVpcmVkLFxuICBsYWJlbFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzdHlsaW5nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgdmFsdWVSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNDdXN0b21Ob2RlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSlNPTk5vZGU7XG4iXX0=

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONObjectNode.js":
/*!****************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONObjectNode.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

var _JSONNestedNode = _interopRequireDefault(__webpack_require__(/*! ./JSONNestedNode */ "../../node_modules/react-json-tree/lib/JSONNestedNode.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Returns the "n Items" string for this node,
// generating and caching it if it hasn't been created yet.
function createItemString(data) {
  var len = Object.getOwnPropertyNames(data).length;
  return "".concat(len, " ").concat(len !== 1 ? 'keys' : 'key');
}

// Configures <JSONNestedNode> to render an Object
var JSONObjectNode = function JSONObjectNode(_ref) {
  var data = _ref.data,
      props = _objectWithoutProperties(_ref, ["data"]);

  return /*#__PURE__*/_react["default"].createElement(_JSONNestedNode["default"], _extends({}, props, {
    data: data,
    nodeType: "Object",
    nodeTypeIndicator: props.nodeType === 'Error' ? 'Error()' : '{}',
    createItemString: createItemString,
    expandable: Object.getOwnPropertyNames(data).length > 0
  }));
};

JSONObjectNode.propTypes = {
  data: _propTypes["default"].object,
  nodeType: _propTypes["default"].string.isRequired
};
var _default = JSONObjectNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OT2JqZWN0Tm9kZS50c3giXSwibmFtZXMiOlsiY3JlYXRlSXRlbVN0cmluZyIsImRhdGEiLCJsZW4iLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibGVuZ3RoIiwiSlNPTk9iamVjdE5vZGUiLCJwcm9wcyIsIm5vZGVUeXBlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib2JqZWN0Iiwic3RyaW5nIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBR0E7QUFDQTtBQUNBLFNBQVNBLGdCQUFULENBQTBCQyxJQUExQixFQUFxQztBQUNuQyxNQUFNQyxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsbUJBQVAsQ0FBMkJILElBQTNCLEVBQWlDSSxNQUE3QztBQUNBLG1CQUFVSCxHQUFWLGNBQWlCQSxHQUFHLEtBQUssQ0FBUixHQUFZLE1BQVosR0FBcUIsS0FBdEM7QUFDRDs7QUFPRDtBQUNBLElBQU1JLGNBQThDLEdBQUcsU0FBakRBLGNBQWlEO0FBQUEsTUFBR0wsSUFBSCxRQUFHQSxJQUFIO0FBQUEsTUFBWU0sS0FBWjs7QUFBQSxzQkFDckQsZ0NBQUMsMEJBQUQsZUFDTUEsS0FETjtBQUVFLElBQUEsSUFBSSxFQUFFTixJQUZSO0FBR0UsSUFBQSxRQUFRLEVBQUMsUUFIWDtBQUlFLElBQUEsaUJBQWlCLEVBQUVNLEtBQUssQ0FBQ0MsUUFBTixLQUFtQixPQUFuQixHQUE2QixTQUE3QixHQUF5QyxJQUo5RDtBQUtFLElBQUEsZ0JBQWdCLEVBQUVSLGdCQUxwQjtBQU1FLElBQUEsVUFBVSxFQUFFRyxNQUFNLENBQUNDLG1CQUFQLENBQTJCSCxJQUEzQixFQUFpQ0ksTUFBakMsR0FBMEM7QUFOeEQsS0FEcUQ7QUFBQSxDQUF2RDs7QUFXQUMsY0FBYyxDQUFDRyxTQUFmLEdBQTJCO0FBQ3pCUixFQUFBQSxJQUFJLEVBQUVTLHNCQUFVQyxNQURTO0FBRXpCSCxFQUFBQSxRQUFRLEVBQUVFLHNCQUFVRSxNQUFWLENBQWlCQztBQUZGLENBQTNCO2VBS2VQLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBKU09OTmVzdGVkTm9kZSBmcm9tICcuL0pTT05OZXN0ZWROb2RlJztcbmltcG9ydCB7IENpcmN1bGFyUHJvcHNQYXNzZWRUaHJvdWdoSlNPTk5vZGUgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gUmV0dXJucyB0aGUgXCJuIEl0ZW1zXCIgc3RyaW5nIGZvciB0aGlzIG5vZGUsXG4vLyBnZW5lcmF0aW5nIGFuZCBjYWNoaW5nIGl0IGlmIGl0IGhhc24ndCBiZWVuIGNyZWF0ZWQgeWV0LlxuZnVuY3Rpb24gY3JlYXRlSXRlbVN0cmluZyhkYXRhOiBhbnkpIHtcbiAgY29uc3QgbGVuID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YSkubGVuZ3RoO1xuICByZXR1cm4gYCR7bGVufSAke2xlbiAhPT0gMSA/ICdrZXlzJyA6ICdrZXknfWA7XG59XG5cbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIENpcmN1bGFyUHJvcHNQYXNzZWRUaHJvdWdoSlNPTk5vZGUge1xuICBkYXRhOiBhbnk7XG4gIG5vZGVUeXBlOiBzdHJpbmc7XG59XG5cbi8vIENvbmZpZ3VyZXMgPEpTT05OZXN0ZWROb2RlPiB0byByZW5kZXIgYW4gT2JqZWN0XG5jb25zdCBKU09OT2JqZWN0Tm9kZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHsgZGF0YSwgLi4ucHJvcHMgfSkgPT4gKFxuICA8SlNPTk5lc3RlZE5vZGVcbiAgICB7Li4ucHJvcHN9XG4gICAgZGF0YT17ZGF0YX1cbiAgICBub2RlVHlwZT1cIk9iamVjdFwiXG4gICAgbm9kZVR5cGVJbmRpY2F0b3I9e3Byb3BzLm5vZGVUeXBlID09PSAnRXJyb3InID8gJ0Vycm9yKCknIDogJ3t9J31cbiAgICBjcmVhdGVJdGVtU3RyaW5nPXtjcmVhdGVJdGVtU3RyaW5nfVxuICAgIGV4cGFuZGFibGU9e09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGEpLmxlbmd0aCA+IDB9XG4gIC8+XG4pO1xuXG5KU09OT2JqZWN0Tm9kZS5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IFByb3BUeXBlcy5vYmplY3QsXG4gIG5vZGVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBKU09OT2JqZWN0Tm9kZTtcbiJdfQ==

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/JSONValueNode.js":
/*!***************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/JSONValueNode.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var JSONValueNode = function JSONValueNode(_ref) {
  var nodeType = _ref.nodeType,
      styling = _ref.styling,
      labelRenderer = _ref.labelRenderer,
      keyPath = _ref.keyPath,
      valueRenderer = _ref.valueRenderer,
      value = _ref.value,
      _ref$valueGetter = _ref.valueGetter,
      valueGetter = _ref$valueGetter === void 0 ? function (value) {
    return value;
  } : _ref$valueGetter;
  return /*#__PURE__*/_react["default"].createElement("li", styling('value', nodeType, keyPath), /*#__PURE__*/_react["default"].createElement("label", styling(['label', 'valueLabel'], nodeType, keyPath), labelRenderer(keyPath, nodeType, false, false)), /*#__PURE__*/_react["default"].createElement("span", styling('valueText', nodeType, keyPath), valueRenderer.apply(void 0, [valueGetter(value), value].concat(_toConsumableArray(keyPath)))));
};

JSONValueNode.propTypes = {
  nodeType: _propTypes["default"].string.isRequired,
  styling: _propTypes["default"].func.isRequired,
  labelRenderer: _propTypes["default"].func.isRequired,
  keyPath: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]).isRequired).isRequired,
  valueRenderer: _propTypes["default"].func.isRequired,
  value: _propTypes["default"].any,
  valueGetter: _propTypes["default"].func
};
var _default = JSONValueNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OVmFsdWVOb2RlLnRzeCJdLCJuYW1lcyI6WyJKU09OVmFsdWVOb2RlIiwibm9kZVR5cGUiLCJzdHlsaW5nIiwibGFiZWxSZW5kZXJlciIsImtleVBhdGgiLCJ2YWx1ZVJlbmRlcmVyIiwidmFsdWUiLCJ2YWx1ZUdldHRlciIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJmdW5jIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsIm51bWJlciIsImFueSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsSUFBTUEsYUFBNkMsR0FBRyxTQUFoREEsYUFBZ0Q7QUFBQSxNQUNwREMsUUFEb0QsUUFDcERBLFFBRG9EO0FBQUEsTUFFcERDLE9BRm9ELFFBRXBEQSxPQUZvRDtBQUFBLE1BR3BEQyxhQUhvRCxRQUdwREEsYUFIb0Q7QUFBQSxNQUlwREMsT0FKb0QsUUFJcERBLE9BSm9EO0FBQUEsTUFLcERDLGFBTG9ELFFBS3BEQSxhQUxvRDtBQUFBLE1BTXBEQyxLQU5vRCxRQU1wREEsS0FOb0Q7QUFBQSw4QkFPcERDLFdBUG9EO0FBQUEsTUFPcERBLFdBUG9ELGlDQU90QyxVQUFDRCxLQUFEO0FBQUEsV0FBV0EsS0FBWDtBQUFBLEdBUHNDO0FBQUEsc0JBU3BELHNDQUFRSixPQUFPLENBQUMsT0FBRCxFQUFVRCxRQUFWLEVBQW9CRyxPQUFwQixDQUFmLGVBQ0UseUNBQVdGLE9BQU8sQ0FBQyxDQUFDLE9BQUQsRUFBVSxZQUFWLENBQUQsRUFBMEJELFFBQTFCLEVBQW9DRyxPQUFwQyxDQUFsQixFQUNHRCxhQUFhLENBQUNDLE9BQUQsRUFBVUgsUUFBVixFQUFvQixLQUFwQixFQUEyQixLQUEzQixDQURoQixDQURGLGVBSUUsd0NBQVVDLE9BQU8sQ0FBQyxXQUFELEVBQWNELFFBQWQsRUFBd0JHLE9BQXhCLENBQWpCLEVBQ0dDLGFBQWEsTUFBYixVQUFjRSxXQUFXLENBQUNELEtBQUQsQ0FBekIsRUFBa0NBLEtBQWxDLDRCQUE0Q0YsT0FBNUMsR0FESCxDQUpGLENBVG9EO0FBQUEsQ0FBdEQ7O0FBbUJBSixhQUFhLENBQUNRLFNBQWQsR0FBMEI7QUFDeEJQLEVBQUFBLFFBQVEsRUFBRVEsc0JBQVVDLE1BQVYsQ0FBaUJDLFVBREg7QUFFeEJULEVBQUFBLE9BQU8sRUFBRU8sc0JBQVVHLElBQVYsQ0FBZUQsVUFGQTtBQUd4QlIsRUFBQUEsYUFBYSxFQUFFTSxzQkFBVUcsSUFBVixDQUFlRCxVQUhOO0FBSXhCUCxFQUFBQSxPQUFPLEVBQUVLLHNCQUFVSSxPQUFWLENBQ1BKLHNCQUFVSyxTQUFWLENBQW9CLENBQUNMLHNCQUFVQyxNQUFYLEVBQW1CRCxzQkFBVU0sTUFBN0IsQ0FBcEIsRUFBMERKLFVBRG5ELEVBRVBBLFVBTnNCO0FBT3hCTixFQUFBQSxhQUFhLEVBQUVJLHNCQUFVRyxJQUFWLENBQWVELFVBUE47QUFReEJMLEVBQUFBLEtBQUssRUFBRUcsc0JBQVVPLEdBUk87QUFTeEJULEVBQUFBLFdBQVcsRUFBRUUsc0JBQVVHO0FBVEMsQ0FBMUI7ZUFZZVosYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgSlNPTlZhbHVlTm9kZUNpcmN1bGFyUHJvcHNQcm92aWRlZEJ5SlNPTk5vZGUgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBSZW5kZXJzIHNpbXBsZSB2YWx1ZXMgKGVnLiBzdHJpbmdzLCBudW1iZXJzLCBib29sZWFucywgZXRjKVxuICovXG5cbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIEpTT05WYWx1ZU5vZGVDaXJjdWxhclByb3BzUHJvdmlkZWRCeUpTT05Ob2RlIHtcbiAgbm9kZVR5cGU6IHN0cmluZztcbiAgdmFsdWU6IGFueTtcbiAgdmFsdWVHZXR0ZXI/OiAodmFsdWU6IGFueSkgPT4gYW55O1xufVxuXG5jb25zdCBKU09OVmFsdWVOb2RlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBub2RlVHlwZSxcbiAgc3R5bGluZyxcbiAgbGFiZWxSZW5kZXJlcixcbiAga2V5UGF0aCxcbiAgdmFsdWVSZW5kZXJlcixcbiAgdmFsdWUsXG4gIHZhbHVlR2V0dGVyID0gKHZhbHVlKSA9PiB2YWx1ZSxcbn0pID0+IChcbiAgPGxpIHsuLi5zdHlsaW5nKCd2YWx1ZScsIG5vZGVUeXBlLCBrZXlQYXRoKX0+XG4gICAgPGxhYmVsIHsuLi5zdHlsaW5nKFsnbGFiZWwnLCAndmFsdWVMYWJlbCddLCBub2RlVHlwZSwga2V5UGF0aCl9PlxuICAgICAge2xhYmVsUmVuZGVyZXIoa2V5UGF0aCwgbm9kZVR5cGUsIGZhbHNlLCBmYWxzZSl9XG4gICAgPC9sYWJlbD5cbiAgICA8c3BhbiB7Li4uc3R5bGluZygndmFsdWVUZXh0Jywgbm9kZVR5cGUsIGtleVBhdGgpfT5cbiAgICAgIHt2YWx1ZVJlbmRlcmVyKHZhbHVlR2V0dGVyKHZhbHVlKSwgdmFsdWUsIC4uLmtleVBhdGgpfVxuICAgIDwvc3Bhbj5cbiAgPC9saT5cbik7XG5cbkpTT05WYWx1ZU5vZGUucHJvcFR5cGVzID0ge1xuICBub2RlVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBzdHlsaW5nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBsYWJlbFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBrZXlQYXRoOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICApLmlzUmVxdWlyZWQsXG4gIHZhbHVlUmVuZGVyZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICB2YWx1ZUdldHRlcjogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBKU09OVmFsdWVOb2RlO1xuIl19

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/createStylingFromTheme.js":
/*!************************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/createStylingFromTheme.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _reactBase16Styling = __webpack_require__(/*! react-base16-styling */ "../../node_modules/react-base16-styling/lib/index.js");

var _solarized = _interopRequireDefault(__webpack_require__(/*! ./themes/solarized */ "../../node_modules/react-json-tree/lib/themes/solarized.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var colorMap = function colorMap(theme) {
  return {
    BACKGROUND_COLOR: theme.base00,
    TEXT_COLOR: theme.base07,
    STRING_COLOR: theme.base0B,
    DATE_COLOR: theme.base0B,
    NUMBER_COLOR: theme.base09,
    BOOLEAN_COLOR: theme.base09,
    NULL_COLOR: theme.base08,
    UNDEFINED_COLOR: theme.base08,
    FUNCTION_COLOR: theme.base08,
    SYMBOL_COLOR: theme.base08,
    LABEL_COLOR: theme.base0D,
    ARROW_COLOR: theme.base0D,
    ITEM_STRING_COLOR: theme.base0B,
    ITEM_STRING_EXPANDED_COLOR: theme.base03
  };
};

var valueColorMap = function valueColorMap(colors) {
  return {
    String: colors.STRING_COLOR,
    Date: colors.DATE_COLOR,
    Number: colors.NUMBER_COLOR,
    Boolean: colors.BOOLEAN_COLOR,
    Null: colors.NULL_COLOR,
    Undefined: colors.UNDEFINED_COLOR,
    Function: colors.FUNCTION_COLOR,
    Symbol: colors.SYMBOL_COLOR
  };
};

var getDefaultThemeStyling = function getDefaultThemeStyling(theme) {
  var colors = colorMap(theme);
  return {
    tree: {
      border: 0,
      padding: 0,
      marginTop: '0.5em',
      marginBottom: '0.5em',
      marginLeft: '0.125em',
      marginRight: 0,
      listStyle: 'none',
      MozUserSelect: 'none',
      WebkitUserSelect: 'none',
      backgroundColor: colors.BACKGROUND_COLOR
    },
    value: function value(_ref, nodeType, keyPath) {
      var style = _ref.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          paddingTop: '0.25em',
          paddingRight: 0,
          marginLeft: '0.875em',
          WebkitUserSelect: 'text',
          MozUserSelect: 'text',
          wordWrap: 'break-word',
          paddingLeft: keyPath.length > 1 ? '2.125em' : '1.25em',
          textIndent: '-0.5em',
          wordBreak: 'break-all'
        })
      };
    },
    label: {
      display: 'inline-block',
      color: colors.LABEL_COLOR
    },
    valueLabel: {
      margin: '0 0.5em 0 0'
    },
    valueText: function valueText(_ref2, nodeType) {
      var style = _ref2.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          color: valueColorMap(colors)[nodeType]
        })
      };
    },
    itemRange: function itemRange(styling, expanded) {
      return {
        style: {
          paddingTop: expanded ? 0 : '0.25em',
          cursor: 'pointer',
          color: colors.LABEL_COLOR
        }
      };
    },
    arrow: function arrow(_ref3, nodeType, expanded) {
      var style = _ref3.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          marginLeft: 0,
          transition: '150ms',
          WebkitTransition: '150ms',
          MozTransition: '150ms',
          WebkitTransform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
          MozTransform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
          transform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
          transformOrigin: '45% 50%',
          WebkitTransformOrigin: '45% 50%',
          MozTransformOrigin: '45% 50%',
          position: 'relative',
          lineHeight: '1.1em',
          fontSize: '0.75em'
        })
      };
    },
    arrowContainer: function arrowContainer(_ref4, arrowStyle) {
      var style = _ref4.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          display: 'inline-block',
          paddingRight: '0.5em',
          paddingLeft: arrowStyle === 'double' ? '1em' : 0,
          cursor: 'pointer'
        })
      };
    },
    arrowSign: {
      color: colors.ARROW_COLOR
    },
    arrowSignInner: {
      position: 'absolute',
      top: 0,
      left: '-0.4em'
    },
    nestedNode: function nestedNode(_ref5, keyPath, nodeType, expanded, expandable) {
      var style = _ref5.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          position: 'relative',
          paddingTop: '0.25em',
          marginLeft: keyPath.length > 1 ? '0.875em' : 0,
          paddingLeft: !expandable ? '1.125em' : 0
        })
      };
    },
    rootNode: {
      padding: 0,
      margin: 0
    },
    nestedNodeLabel: function nestedNodeLabel(_ref6, keyPath, nodeType, expanded, expandable) {
      var style = _ref6.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          margin: 0,
          padding: 0,
          WebkitUserSelect: expandable ? 'inherit' : 'text',
          MozUserSelect: expandable ? 'inherit' : 'text',
          cursor: expandable ? 'pointer' : 'default'
        })
      };
    },
    nestedNodeItemString: function nestedNodeItemString(_ref7, keyPath, nodeType, expanded) {
      var style = _ref7.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          paddingLeft: '0.5em',
          cursor: 'default',
          color: expanded ? colors.ITEM_STRING_EXPANDED_COLOR : colors.ITEM_STRING_COLOR
        })
      };
    },
    nestedNodeItemType: {
      marginLeft: '0.3em',
      marginRight: '0.3em'
    },
    nestedNodeChildren: function nestedNodeChildren(_ref8, nodeType, expanded) {
      var style = _ref8.style;
      return {
        style: _objectSpread(_objectSpread({}, style), {}, {
          padding: 0,
          margin: 0,
          listStyle: 'none',
          display: expanded ? 'block' : 'none'
        })
      };
    },
    rootNodeChildren: {
      padding: 0,
      margin: 0,
      listStyle: 'none'
    }
  };
};

var _default = (0, _reactBase16Styling.createStyling)(getDefaultThemeStyling, {
  defaultBase16: _solarized["default"]
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/getCollectionEntries.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/getCollectionEntries.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = getCollectionEntries;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getLength(type, collection) {
  if (type === 'Object') {
    return Object.keys(collection).length;
  } else if (type === 'Array') {
    return collection.length;
  }

  return Infinity;
}

function isIterableMap(collection) {
  return typeof collection.set === 'function';
}

function getEntries(type, collection, sortObjectKeys) {
  var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;
  var res;

  if (type === 'Object') {
    var keys = Object.getOwnPropertyNames(collection);

    if (sortObjectKeys) {
      keys.sort(sortObjectKeys === true ? undefined : sortObjectKeys);
    }

    keys = keys.slice(from, to + 1);
    res = {
      entries: keys.map(function (key) {
        return {
          key: key,
          value: collection[key]
        };
      })
    };
  } else if (type === 'Array') {
    res = {
      entries: collection.slice(from, to + 1).map(function (val, idx) {
        return {
          key: idx + from,
          value: val
        };
      })
    };
  } else {
    var idx = 0;
    var entries = [];
    var done = true;
    var isMap = isIterableMap(collection);

    var _iterator = _createForOfIteratorHelper(collection),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (idx > to) {
          done = false;
          break;
        }

        if (from <= idx) {
          if (isMap && Array.isArray(item)) {
            if (typeof item[0] === 'string' || typeof item[0] === 'number') {
              entries.push({
                key: item[0],
                value: item[1]
              });
            } else {
              entries.push({
                key: "[entry ".concat(idx, "]"),
                value: {
                  '[key]': item[0],
                  '[value]': item[1]
                }
              });
            }
          } else {
            entries.push({
              key: idx,
              value: item
            });
          }
        }

        idx++;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    res = {
      hasMore: !done,
      entries: entries
    };
  }

  return res;
}

function getRanges(from, to, limit) {
  var ranges = [];

  while (to - from > limit * limit) {
    limit = limit * limit;
  }

  for (var i = from; i <= to; i += limit) {
    ranges.push({
      from: i,
      to: Math.min(to, i + limit - 1)
    });
  }

  return ranges;
}

function getCollectionEntries(type, collection, sortObjectKeys, limit) {
  var from = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var to = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;
  var getEntriesBound = getEntries.bind(null, type, collection, sortObjectKeys);

  if (!limit) {
    return getEntriesBound().entries;
  }

  var isSubset = to < Infinity;
  var length = Math.min(to - from, getLength(type, collection));

  if (type !== 'Iterable') {
    if (length <= limit || limit < 7) {
      return getEntriesBound(from, to).entries;
    }
  } else {
    if (length <= limit && !isSubset) {
      return getEntriesBound(from, to).entries;
    }
  }

  var limitedEntries;

  if (type === 'Iterable') {
    var _getEntriesBound = getEntriesBound(from, from + limit - 1),
        hasMore = _getEntriesBound.hasMore,
        entries = _getEntriesBound.entries;

    limitedEntries = hasMore ? [].concat(_toConsumableArray(entries), _toConsumableArray(getRanges(from + limit, from + 2 * limit - 1, limit))) : entries;
  } else {
    limitedEntries = isSubset ? getRanges(from, to, limit) : [].concat(_toConsumableArray(getEntriesBound(0, limit - 5).entries), _toConsumableArray(getRanges(limit - 4, length - 5, limit)), _toConsumableArray(getEntriesBound(length - 4, length - 1).entries));
  }

  return limitedEntries;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "StylingValue", ({
  enumerable: true,
  get: function get() {
    return _reactBase16Styling.StylingValue;
  }
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "../../node_modules/prop-types/index.js"));

var _JSONNode = _interopRequireDefault(__webpack_require__(/*! ./JSONNode */ "../../node_modules/react-json-tree/lib/JSONNode.js"));

var _createStylingFromTheme = _interopRequireDefault(__webpack_require__(/*! ./createStylingFromTheme */ "../../node_modules/react-json-tree/lib/createStylingFromTheme.js"));

var _reactBase16Styling = __webpack_require__(/*! react-base16-styling */ "../../node_modules/react-base16-styling/lib/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var identity = function identity(value) {
  return value;
};

var expandRootNode = function expandRootNode(keyPath, data, level) {
  return level === 0;
};

var defaultItemString = function defaultItemString(type, data, itemType, itemString) {
  return /*#__PURE__*/_react["default"].createElement("span", null, itemType, " ", itemString);
};

var defaultLabelRenderer = function defaultLabelRenderer(_ref) {
  var _ref2 = _slicedToArray(_ref, 1),
      label = _ref2[0];

  return /*#__PURE__*/_react["default"].createElement("span", null, label, ":");
};

var noCustomNode = function noCustomNode() {
  return false;
};

function checkLegacyTheming(theme, props) {
  var deprecatedStylingMethodsMap = {
    getArrowStyle: 'arrow',
    getListStyle: 'nestedNodeChildren',
    getItemStringStyle: 'nestedNodeItemString',
    getLabelStyle: 'label',
    getValueStyle: 'valueText'
  };
  var deprecatedStylingMethods = Object.keys(deprecatedStylingMethodsMap).filter(function (name) {
    return props[name];
  });

  if (deprecatedStylingMethods.length > 0) {
    if (typeof theme === 'string') {
      theme = {
        extend: theme
      };
    } else {
      theme = _objectSpread({}, theme);
    }

    deprecatedStylingMethods.forEach(function (name) {
      // eslint-disable-next-line no-console
      console.error("Styling method \"".concat(name, "\" is deprecated, use \"theme\" property instead"));

      theme[deprecatedStylingMethodsMap[name]] = function (_ref3) {
        var style = _ref3.style;

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return {
          style: _objectSpread(_objectSpread({}, style), props[name].apply(props, args))
        };
      };
    });
  }

  return theme;
}

function getStateFromProps(props) {
  var theme = checkLegacyTheming(props.theme, props);

  if (props.invertTheme) {
    theme = (0, _reactBase16Styling.invertTheme)(theme);
  }

  return {
    styling: (0, _createStylingFromTheme["default"])(theme)
  };
}

var JSONTree = /*#__PURE__*/function (_React$Component) {
  _inherits(JSONTree, _React$Component);

  var _super = _createSuper(JSONTree);

  function JSONTree(props) {
    var _this;

    _classCallCheck(this, JSONTree);

    _this = _super.call(this, props);
    _this.state = getStateFromProps(props);
    return _this;
  }

  _createClass(JSONTree, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (['theme', 'invertTheme'].find(function (k) {
        return nextProps[k] !== _this2.props[k];
      })) {
        this.setState(getStateFromProps(nextProps));
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _this3 = this;

      return !!Object.keys(nextProps).find(function (k) {
        return k === 'keyPath' ? nextProps[k].join('/') !== _this3.props[k].join('/') : nextProps[k] !== _this3.props[k];
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.data,
          keyPath = _this$props.keyPath,
          postprocessValue = _this$props.postprocessValue,
          hideRoot = _this$props.hideRoot,
          theme = _this$props.theme,
          _ = _this$props.invertTheme,
          rest = _objectWithoutProperties(_this$props, ["data", "keyPath", "postprocessValue", "hideRoot", "theme", "invertTheme"]);

      var styling = this.state.styling;
      return /*#__PURE__*/_react["default"].createElement("ul", styling('tree'), /*#__PURE__*/_react["default"].createElement(_JSONNode["default"], _extends({}, _objectSpread({
        postprocessValue: postprocessValue,
        hideRoot: hideRoot,
        styling: styling
      }, rest), {
        keyPath: hideRoot ? [] : keyPath,
        value: postprocessValue(value)
      })));
    }
  }]);

  return JSONTree;
}(_react["default"].Component);

exports.default = JSONTree;

_defineProperty(JSONTree, "propTypes", {
  data: _propTypes["default"].any,
  hideRoot: _propTypes["default"].bool,
  theme: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].string]),
  invertTheme: _propTypes["default"].bool,
  keyPath: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])),
  postprocessValue: _propTypes["default"].func,
  sortObjectKeys: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].bool])
});

_defineProperty(JSONTree, "defaultProps", {
  shouldExpandNode: expandRootNode,
  hideRoot: false,
  keyPath: ['root'],
  getItemString: defaultItemString,
  labelRenderer: defaultLabelRenderer,
  valueRenderer: identity,
  postprocessValue: identity,
  isCustomNode: noCustomNode,
  collectionLimit: 50,
  invertTheme: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/objType.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/objType.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = objType;

function objType(obj) {
  var type = Object.prototype.toString.call(obj).slice(8, -1);

  if (type === 'Object' && typeof obj[Symbol.iterator] === 'function') {
    return 'Iterable';
  }

  if (type === 'Custom' && obj.constructor !== Object && obj instanceof Object) {
    // For projects implementing objects overriding `.prototype[Symbol.toStringTag]`
    return 'Object';
  }

  return type;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYmpUeXBlLnRzIl0sIm5hbWVzIjpbIm9ialR5cGUiLCJvYmoiLCJ0eXBlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWUsU0FBU0EsT0FBVCxDQUFpQkMsR0FBakIsRUFBMkI7QUFDeEMsTUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsR0FBL0IsRUFBb0NNLEtBQXBDLENBQTBDLENBQTFDLEVBQTZDLENBQUMsQ0FBOUMsQ0FBYjs7QUFDQSxNQUFJTCxJQUFJLEtBQUssUUFBVCxJQUFxQixPQUFPRCxHQUFHLENBQUNPLE1BQU0sQ0FBQ0MsUUFBUixDQUFWLEtBQWdDLFVBQXpELEVBQXFFO0FBQ25FLFdBQU8sVUFBUDtBQUNEOztBQUVELE1BQ0VQLElBQUksS0FBSyxRQUFULElBQ0FELEdBQUcsQ0FBQ1MsV0FBSixLQUFvQlAsTUFEcEIsSUFFQUYsR0FBRyxZQUFZRSxNQUhqQixFQUlFO0FBQ0E7QUFDQSxXQUFPLFFBQVA7QUFDRDs7QUFFRCxTQUFPRCxJQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvYmpUeXBlKG9iajogYW55KSB7XG4gIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKS5zbGljZSg4LCAtMSk7XG4gIGlmICh0eXBlID09PSAnT2JqZWN0JyAmJiB0eXBlb2Ygb2JqW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gJ0l0ZXJhYmxlJztcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlID09PSAnQ3VzdG9tJyAmJlxuICAgIG9iai5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0ICYmXG4gICAgb2JqIGluc3RhbmNlb2YgT2JqZWN0XG4gICkge1xuICAgIC8vIEZvciBwcm9qZWN0cyBpbXBsZW1lbnRpbmcgb2JqZWN0cyBvdmVycmlkaW5nIGAucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ11gXG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4iXX0=

/***/ }),

/***/ "../../node_modules/react-json-tree/lib/themes/solarized.js":
/*!******************************************************************!*\
  !*** ../../node_modules/react-json-tree/lib/themes/solarized.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;
var _default = {
  scheme: 'solarized',
  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
  base00: '#002b36',
  base01: '#073642',
  base02: '#586e75',
  base03: '#657b83',
  base04: '#839496',
  base05: '#93a1a1',
  base06: '#eee8d5',
  base07: '#fdf6e3',
  base08: '#dc322f',
  base09: '#cb4b16',
  base0A: '#b58900',
  base0B: '#859900',
  base0C: '#2aa198',
  base0D: '#268bd2',
  base0E: '#6c71c4',
  base0F: '#d33682'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aGVtZXMvc29sYXJpemVkLnRzIl0sIm5hbWVzIjpbInNjaGVtZSIsImF1dGhvciIsImJhc2UwMCIsImJhc2UwMSIsImJhc2UwMiIsImJhc2UwMyIsImJhc2UwNCIsImJhc2UwNSIsImJhc2UwNiIsImJhc2UwNyIsImJhc2UwOCIsImJhc2UwOSIsImJhc2UwQSIsImJhc2UwQiIsImJhc2UwQyIsImJhc2UwRCIsImJhc2UwRSIsImJhc2UwRiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2VBQWU7QUFDYkEsRUFBQUEsTUFBTSxFQUFFLFdBREs7QUFFYkMsRUFBQUEsTUFBTSxFQUFFLHlEQUZLO0FBR2JDLEVBQUFBLE1BQU0sRUFBRSxTQUhLO0FBSWJDLEVBQUFBLE1BQU0sRUFBRSxTQUpLO0FBS2JDLEVBQUFBLE1BQU0sRUFBRSxTQUxLO0FBTWJDLEVBQUFBLE1BQU0sRUFBRSxTQU5LO0FBT2JDLEVBQUFBLE1BQU0sRUFBRSxTQVBLO0FBUWJDLEVBQUFBLE1BQU0sRUFBRSxTQVJLO0FBU2JDLEVBQUFBLE1BQU0sRUFBRSxTQVRLO0FBVWJDLEVBQUFBLE1BQU0sRUFBRSxTQVZLO0FBV2JDLEVBQUFBLE1BQU0sRUFBRSxTQVhLO0FBWWJDLEVBQUFBLE1BQU0sRUFBRSxTQVpLO0FBYWJDLEVBQUFBLE1BQU0sRUFBRSxTQWJLO0FBY2JDLEVBQUFBLE1BQU0sRUFBRSxTQWRLO0FBZWJDLEVBQUFBLE1BQU0sRUFBRSxTQWZLO0FBZ0JiQyxFQUFBQSxNQUFNLEVBQUUsU0FoQks7QUFpQmJDLEVBQUFBLE1BQU0sRUFBRSxTQWpCSztBQWtCYkMsRUFBQUEsTUFBTSxFQUFFO0FBbEJLLEMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIHNjaGVtZTogJ3NvbGFyaXplZCcsXG4gIGF1dGhvcjogJ2V0aGFuIHNjaG9vbm92ZXIgKGh0dHA6Ly9ldGhhbnNjaG9vbm92ZXIuY29tL3NvbGFyaXplZCknLFxuICBiYXNlMDA6ICcjMDAyYjM2JyxcbiAgYmFzZTAxOiAnIzA3MzY0MicsXG4gIGJhc2UwMjogJyM1ODZlNzUnLFxuICBiYXNlMDM6ICcjNjU3YjgzJyxcbiAgYmFzZTA0OiAnIzgzOTQ5NicsXG4gIGJhc2UwNTogJyM5M2ExYTEnLFxuICBiYXNlMDY6ICcjZWVlOGQ1JyxcbiAgYmFzZTA3OiAnI2ZkZjZlMycsXG4gIGJhc2UwODogJyNkYzMyMmYnLFxuICBiYXNlMDk6ICcjY2I0YjE2JyxcbiAgYmFzZTBBOiAnI2I1ODkwMCcsXG4gIGJhc2UwQjogJyM4NTk5MDAnLFxuICBiYXNlMEM6ICcjMmFhMTk4JyxcbiAgYmFzZTBEOiAnIzI2OGJkMicsXG4gIGJhc2UwRTogJyM2YzcxYzQnLFxuICBiYXNlMEY6ICcjZDMzNjgyJyxcbn07XG4iXX0=

/***/ }),

/***/ "../../node_modules/simple-swizzle/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/simple-swizzle/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isArrayish = __webpack_require__(/*! is-arrayish */ "../../node_modules/simple-swizzle/node_modules/is-arrayish/index.js");

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};


/***/ }),

/***/ "../../node_modules/simple-swizzle/node_modules/is-arrayish/index.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/simple-swizzle/node_modules/is-arrayish/index.js ***!
  \***************************************************************************/
/***/ ((module) => {

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvYXBhdGh5LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9hc2hlcy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvYXRlbGllci1kdW5lLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9hdGVsaWVyLWZvcmVzdC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvYXRlbGllci1oZWF0aC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvYXRlbGllci1sYWtlc2lkZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvYXRlbGllci1zZWFzaWRlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9iZXNwaW4uanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL2JyZXdlci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvYnJpZ2h0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9jaGFsay5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvY29kZXNjaG9vbC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvY29sb3JzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9kZWZhdWx0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9laWdodGllcy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvZW1iZXJzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9mbGF0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9nb29nbGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL2dyYXlzY2FsZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvZ3JlZW5zY3JlZW4uanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL2hhcm1vbmljLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9ob3BzY290Y2guanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9pc290b3BlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9tYXJyYWtlc2guanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL21vY2hhLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9tb25va2FpLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9vY2Vhbi5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvcGFyYWlzby5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvcG9wLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9yYWlsc2Nhc3RzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi9zaGFwZXNoaWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL3NvbGFyaXplZC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UxNi9saWIvc3VtbWVyZnJ1aXQuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL3RocmVlemVyb3R3b2ZvdXIuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlMTYvbGliL3RvbW9ycm93LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi90dWJlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTE2L2xpYi90d2lsaWdodC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvY29udmVyc2lvbnMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9ub2RlX21vZHVsZXMvY29sb3ItbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvcm91dGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9jb2xvci1uYW1lL2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvY29sb3Itc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvY29sb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2guY3VycnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1iYXNlMTYtc3R5bGluZy9saWIvY29sb3JDb252ZXJ0ZXJzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYmFzZTE2LXN0eWxpbmcvbGliL2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYmFzZTE2LXN0eWxpbmcvbGliL3R5cGVzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtanNvbi10cmVlL2xpYi9JdGVtUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLXRyZWUvbGliL0pTT05BcnJheU5vZGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLXRyZWUvbGliL0pTT05BcnJvdy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tdHJlZS9saWIvSlNPTkl0ZXJhYmxlTm9kZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tdHJlZS9saWIvSlNPTk5lc3RlZE5vZGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLXRyZWUvbGliL0pTT05Ob2RlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtanNvbi10cmVlL2xpYi9KU09OT2JqZWN0Tm9kZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tdHJlZS9saWIvSlNPTlZhbHVlTm9kZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tdHJlZS9saWIvY3JlYXRlU3R5bGluZ0Zyb21UaGVtZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tdHJlZS9saWIvZ2V0Q29sbGVjdGlvbkVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLXRyZWUvbGliL2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtanNvbi10cmVlL2xpYi9vYmpUeXBlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtanNvbi10cmVlL2xpYi90aGVtZXMvc29sYXJpemVkLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvc2ltcGxlLXN3aXp6bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uLy4uL25vZGVfbW9kdWxlcy9zaW1wbGUtc3dpenpsZS9ub2RlX21vZHVsZXMvaXMtYXJyYXlpc2gvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7Ozs7QUN2QmE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7Ozs7Ozs7O0FDdkJhOztBQUViLGtCQUFrQjtBQUNsQixlQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DOzs7Ozs7Ozs7OztBQ3ZCYTs7QUFFYixrQkFBa0I7QUFDbEIsZUFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7Ozs7OztBQ3ZCQTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFZOztBQUV0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsUUFBUSw0QkFBNEI7QUFDcEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyw2QkFBNkI7QUFDcEMsV0FBVyxpQ0FBaUM7QUFDNUMsVUFBVSxnQ0FBZ0M7QUFDMUMsV0FBVyxpQ0FBaUM7QUFDNUMsT0FBTyxxQ0FBcUM7QUFDNUMsU0FBUywyQ0FBMkM7QUFDcEQsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGdCQUFnQjtBQUNyRSxtREFBbUQsY0FBYztBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPLFFBQVE7QUFDL0IsZ0JBQWdCLE9BQU8sUUFBUTtBQUMvQixpQkFBaUIsT0FBTyxPQUFPO0FBQy9CLGlCQUFpQixPQUFPLE9BQU87QUFDL0IsZ0JBQWdCLFFBQVEsT0FBTztBQUMvQixnQkFBZ0IsUUFBUSxPQUFPO0FBQy9COztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTs7QUFFdEU7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxFQUFFLFVBQVUsRUFBRTtBQUM3RDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxhQUFhLGFBQWE7QUFDekM7QUFDQSxlQUFlLGFBQWEsYUFBYTtBQUN6QztBQUNBLGVBQWUsYUFBYSxhQUFhO0FBQ3pDO0FBQ0EsZUFBZSxhQUFhLGFBQWE7QUFDekM7QUFDQSxlQUFlLGFBQWEsYUFBYTtBQUN6QztBQUNBLGVBQWUsYUFBYTtBQUM1Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ24yQkEsa0JBQWtCLG1CQUFPLENBQUMsc0VBQWU7QUFDekMsWUFBWSxtQkFBTyxDQUFDLDBEQUFTOztBQUU3Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3REFBd0QsdUNBQXVDO0FBQy9GLHNEQUFzRCxxQ0FBcUM7O0FBRTNGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLENBQUM7O0FBRUQ7Ozs7Ozs7Ozs7OztBQzdFWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdkpBLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFlOztBQUV6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDLFNBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsU0FBUztBQUM5QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7OztBQy9GWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsWUFBWTtBQUN6RDtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxlQUFrQjtBQUNsQiwyQ0FBMkMsY0FBYyx1eGU7Ozs7Ozs7Ozs7O0FDbE41Qzs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFrQjs7QUFFbEIsa0NBQWtDLHFIQUFxSDs7QUFFdkosK0JBQStCLDZKQUE2Sjs7QUFFNUwsaUNBQWlDLCtGQUErRjs7QUFFaEksa0NBQWtDLHVEQUF1RDs7QUFFekYsd0RBQXdELFFBQVEsbUVBQW1FLHdIQUF3SCxnQkFBZ0IsV0FBVyx5QkFBeUIsU0FBUyx3QkFBd0IsNEJBQTRCLGNBQWMsU0FBUyw4QkFBOEIsRUFBRSxxQkFBcUIsVUFBVSxFQUFFLFNBQVMsRUFBRSw4SkFBOEosRUFBRSxrREFBa0QsU0FBUyxrQkFBa0IsMkJBQTJCLEVBQUUsbUJBQW1CLHNCQUFzQiw4QkFBOEIsYUFBYSxFQUFFLHNCQUFzQixlQUFlLFdBQVcsRUFBRSxtQkFBbUIsTUFBTSwrREFBK0QsRUFBRSxVQUFVLHVCQUF1QixFQUFFLEVBQUUsR0FBRzs7QUFFbitCLGlEQUFpRCxnQkFBZ0IsZ0VBQWdFLHdEQUF3RCw2REFBNkQsc0RBQXNELGtIQUFrSDs7QUFFOVosc0NBQXNDLHVEQUF1RCx1Q0FBdUMsU0FBUyxPQUFPLGtCQUFrQixFQUFFLGFBQWE7O0FBRXJMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLCtCQUErQjtBQUN4RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxjQUFjLDJ3Vjs7Ozs7Ozs7Ozs7QUNqTDVDOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdEQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGVBQWtCOztBQUVsQixvQ0FBb0MsbUJBQU8sQ0FBQywwREFBTzs7QUFFbkQsd0NBQXdDLG1CQUFPLENBQUMsMERBQVk7O0FBRTVELHVDQUF1QyxtQkFBTyxDQUFDLHNFQUFZOztBQUUzRCxxREFBcUQsbUJBQU8sQ0FBQyxrR0FBMEI7O0FBRXZGLDBCQUEwQixtQkFBTyxDQUFDLGtGQUFzQjs7QUFFeEQsc0NBQXNDLHVDQUF1QyxrQkFBa0I7O0FBRS9GLHVCQUF1QiwyQkFBMkIsMkVBQTJFLGtDQUFrQyxtQkFBbUIsR0FBRyxFQUFFLE9BQU8sa0NBQWtDLDhIQUE4SCxHQUFHLEVBQUUscUJBQXFCOztBQUV4WCxxQkFBcUIsZ0RBQWdELGdCQUFnQixzQkFBc0IsT0FBTywyQkFBMkIsMEJBQTBCLHlEQUF5RCwyQkFBMkIsRUFBRSxFQUFFLEVBQUUsZUFBZSxHQUFHLHdDQUF3Qzs7QUFFM1QscURBQXFELCtCQUErQiw4REFBOEQsWUFBWSxvQ0FBb0MsNkRBQTZELFlBQVksNkJBQTZCLE9BQU8sMkJBQTJCLDBDQUEwQyx3RUFBd0UsMkJBQTJCLEVBQUUsRUFBRSxlQUFlOztBQUUxZSwwREFBMEQsK0JBQStCLGlCQUFpQixzQ0FBc0MsWUFBWSxZQUFZLHVCQUF1QixPQUFPLHFCQUFxQiwwQ0FBMEMsMkJBQTJCLEVBQUUsZUFBZTs7QUFFalQsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUU7O0FBRTNULDZEQUE2RCxzRUFBc0UsOERBQThELG9CQUFvQjs7QUFFck4sMENBQTBDLCtEQUErRCwyRUFBMkUsRUFBRSx5RUFBeUUsZUFBZSxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RDs7QUFFL1gsZ0NBQWdDLDRFQUE0RSxpQkFBaUIsVUFBVSxHQUFHLDhCQUE4Qjs7QUFFeEssZ0NBQWdDLDZEQUE2RCx5Q0FBeUMsOENBQThDLGlDQUFpQyxtREFBbUQseURBQXlELEVBQUUsT0FBTyx1Q0FBdUMsRUFBRSxpREFBaUQsR0FBRzs7QUFFdmEsaURBQWlELDBFQUEwRSxhQUFhLEVBQUUscUNBQXFDOztBQUUvSyx1Q0FBdUMsdUJBQXVCLHVGQUF1RixFQUFFLGFBQWE7O0FBRXBLLHNDQUFzQyx3RUFBd0UsMENBQTBDLDhDQUE4QyxNQUFNLHdFQUF3RSxHQUFHLGFBQWEsRUFBRSxZQUFZLGNBQWMsRUFBRTs7QUFFbFUsNkJBQTZCLGdHQUFnRyxnREFBZ0QsR0FBRywyQkFBMkI7O0FBRTNNLDBDQUEwQyxnQ0FBZ0Msb0NBQW9DLG9EQUFvRCw4REFBOEQsZ0VBQWdFLEVBQUUsRUFBRSxnQ0FBZ0MsRUFBRSxhQUFhOztBQUVuVixnQ0FBZ0MsZ0JBQWdCLHNCQUFzQixPQUFPLHVEQUF1RCxhQUFhLHVEQUF1RCwyQ0FBMkMsRUFBRSxFQUFFLEVBQUUsNkNBQTZDLDJFQUEyRSxFQUFFLE9BQU8saURBQWlELGtGQUFrRixFQUFFLEVBQUUsRUFBRSxFQUFFLGVBQWU7O0FBRXBoQiwyQ0FBMkMsa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWTs7QUFFL00saUNBQWlDLDJIQUEySDs7QUFFNUosNkJBQTZCLGtLQUFrSzs7QUFFL0wsaURBQWlELGdCQUFnQixnRUFBZ0Usd0RBQXdELDZEQUE2RCxzREFBc0Qsa0hBQWtIOztBQUU5WixzQ0FBc0MsdURBQXVELHVDQUF1QyxTQUFTLE9BQU8sa0JBQWtCLEVBQUUsYUFBYTs7QUFFckwsd0NBQXdDLGdGQUFnRixlQUFlLGVBQWUsZ0JBQWdCLG9CQUFvQixNQUFNLDBDQUEwQywrQkFBK0IsYUFBYSxxQkFBcUIsbUNBQW1DLEVBQUUsRUFBRSxjQUFjLFdBQVcsVUFBVSxFQUFFLFVBQVUsTUFBTSxpREFBaUQsRUFBRSxVQUFVLGtCQUFrQixFQUFFLEVBQUUsYUFBYTs7QUFFdmUsK0JBQStCLG9DQUFvQzs7QUFFbkU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDhCQUE4QjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4RkFBOEYsYUFBYTtBQUMzRztBQUNBOztBQUVBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrSkFBK0o7QUFDL0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxlQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQ0FBMkMsY0FBYyxtelk7Ozs7Ozs7Ozs7O0FDMU81Qzs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFrQjs7QUFFbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxjQUFjLCs0Qzs7Ozs7Ozs7Ozs7QUNyQjVDOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFrQjtBQUNsQiwyQ0FBMkMsY0FBYywybkQ7Ozs7Ozs7Ozs7O0FDM0I1Qzs7QUFFYixpQkFBaUIsbUJBQU8sQ0FBQyx3RkFBYTs7QUFFdEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1DQUFtQyxTQUFTO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzVCQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ2ZW5kb3JzLW5vZGVfbW9kdWxlc19yZWFjdC1qc29uLXRyZWVfbGliX2luZGV4X2pzLmYxYTEwMDMwODEyZWQzYjk3NTE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdhcGF0aHknLFxuICBhdXRob3I6ICdqYW5uaWsgc2llYmVydCAoaHR0cHM6Ly9naXRodWIuY29tL2phbm5pa3MpJyxcbiAgYmFzZTAwOiAnIzAzMUExNicsXG4gIGJhc2UwMTogJyMwQjM0MkQnLFxuICBiYXNlMDI6ICcjMTg0RTQ1JyxcbiAgYmFzZTAzOiAnIzJCNjg1RScsXG4gIGJhc2UwNDogJyM1RjlDOTInLFxuICBiYXNlMDU6ICcjODFCNUFDJyxcbiAgYmFzZTA2OiAnI0E3Q0VDOCcsXG4gIGJhc2UwNzogJyNEMkU3RTQnLFxuICBiYXNlMDg6ICcjM0U5Njg4JyxcbiAgYmFzZTA5OiAnIzNFNzk5NicsXG4gIGJhc2UwQTogJyMzRTRDOTYnLFxuICBiYXNlMEI6ICcjODgzRTk2JyxcbiAgYmFzZTBDOiAnIzk2M0U0QycsXG4gIGJhc2UwRDogJyM5Njg4M0UnLFxuICBiYXNlMEU6ICcjNEM5NjNFJyxcbiAgYmFzZTBGOiAnIzNFOTY1Qidcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ2FzaGVzJyxcbiAgYXV0aG9yOiAnamFubmlrIHNpZWJlcnQgKGh0dHBzOi8vZ2l0aHViLmNvbS9qYW5uaWtzKScsXG4gIGJhc2UwMDogJyMxQzIwMjMnLFxuICBiYXNlMDE6ICcjMzkzRjQ1JyxcbiAgYmFzZTAyOiAnIzU2NUU2NScsXG4gIGJhc2UwMzogJyM3NDdDODQnLFxuICBiYXNlMDQ6ICcjQURCM0JBJyxcbiAgYmFzZTA1OiAnI0M3Q0NEMScsXG4gIGJhc2UwNjogJyNERkUyRTUnLFxuICBiYXNlMDc6ICcjRjNGNEY1JyxcbiAgYmFzZTA4OiAnI0M3QUU5NScsXG4gIGJhc2UwOTogJyNDN0M3OTUnLFxuICBiYXNlMEE6ICcjQUVDNzk1JyxcbiAgYmFzZTBCOiAnIzk1QzdBRScsXG4gIGJhc2UwQzogJyM5NUFFQzcnLFxuICBiYXNlMEQ6ICcjQUU5NUM3JyxcbiAgYmFzZTBFOiAnI0M3OTVBRScsXG4gIGJhc2UwRjogJyNDNzk1OTUnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdhdGVsaWVyIGR1bmUnLFxuICBhdXRob3I6ICdicmFtIGRlIGhhYW4gKGh0dHA6Ly9hdGVsaWVyYnJhbS5naXRodWIuaW8vc3ludGF4LWhpZ2hsaWdodGluZy9hdGVsaWVyLXNjaGVtZXMvZHVuZSknLFxuICBiYXNlMDA6ICcjMjAyMDFkJyxcbiAgYmFzZTAxOiAnIzI5MjgyNCcsXG4gIGJhc2UwMjogJyM2ZTZiNWUnLFxuICBiYXNlMDM6ICcjN2Q3YTY4JyxcbiAgYmFzZTA0OiAnIzk5OTU4MCcsXG4gIGJhc2UwNTogJyNhNmEyOGMnLFxuICBiYXNlMDY6ICcjZThlNGNmJyxcbiAgYmFzZTA3OiAnI2ZlZmJlYycsXG4gIGJhc2UwODogJyNkNzM3MzcnLFxuICBiYXNlMDk6ICcjYjY1NjExJyxcbiAgYmFzZTBBOiAnI2NmYjAxNycsXG4gIGJhc2UwQjogJyM2MGFjMzknLFxuICBiYXNlMEM6ICcjMWZhZDgzJyxcbiAgYmFzZTBEOiAnIzY2ODRlMScsXG4gIGJhc2UwRTogJyNiODU0ZDQnLFxuICBiYXNlMEY6ICcjZDQzNTUyJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnYXRlbGllciBmb3Jlc3QnLFxuICBhdXRob3I6ICdicmFtIGRlIGhhYW4gKGh0dHA6Ly9hdGVsaWVyYnJhbS5naXRodWIuaW8vc3ludGF4LWhpZ2hsaWdodGluZy9hdGVsaWVyLXNjaGVtZXMvZm9yZXN0KScsXG4gIGJhc2UwMDogJyMxYjE5MTgnLFxuICBiYXNlMDE6ICcjMmMyNDIxJyxcbiAgYmFzZTAyOiAnIzY4NjE1ZScsXG4gIGJhc2UwMzogJyM3NjZlNmInLFxuICBiYXNlMDQ6ICcjOWM5NDkxJyxcbiAgYmFzZTA1OiAnI2E4YTE5ZicsXG4gIGJhc2UwNjogJyNlNmUyZTAnLFxuICBiYXNlMDc6ICcjZjFlZmVlJyxcbiAgYmFzZTA4OiAnI2YyMmM0MCcsXG4gIGJhc2UwOTogJyNkZjUzMjAnLFxuICBiYXNlMEE6ICcjZDU5MTFhJyxcbiAgYmFzZTBCOiAnIzVhYjczOCcsXG4gIGJhc2UwQzogJyMwMGFkOWMnLFxuICBiYXNlMEQ6ICcjNDA3ZWU3JyxcbiAgYmFzZTBFOiAnIzY2NjZlYScsXG4gIGJhc2UwRjogJyNjMzNmZjMnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdhdGVsaWVyIGhlYXRoJyxcbiAgYXV0aG9yOiAnYnJhbSBkZSBoYWFuIChodHRwOi8vYXRlbGllcmJyYW0uZ2l0aHViLmlvL3N5bnRheC1oaWdobGlnaHRpbmcvYXRlbGllci1zY2hlbWVzL2hlYXRoKScsXG4gIGJhc2UwMDogJyMxYjE4MWInLFxuICBiYXNlMDE6ICcjMjkyMzI5JyxcbiAgYmFzZTAyOiAnIzY5NWQ2OScsXG4gIGJhc2UwMzogJyM3NzY5NzcnLFxuICBiYXNlMDQ6ICcjOWU4ZjllJyxcbiAgYmFzZTA1OiAnI2FiOWJhYicsXG4gIGJhc2UwNjogJyNkOGNhZDgnLFxuICBiYXNlMDc6ICcjZjdmM2Y3JyxcbiAgYmFzZTA4OiAnI2NhNDAyYicsXG4gIGJhc2UwOTogJyNhNjU5MjYnLFxuICBiYXNlMEE6ICcjYmI4YTM1JyxcbiAgYmFzZTBCOiAnIzM3OWEzNycsXG4gIGJhc2UwQzogJyMxNTkzOTMnLFxuICBiYXNlMEQ6ICcjNTE2YWVjJyxcbiAgYmFzZTBFOiAnIzdiNTljMCcsXG4gIGJhc2UwRjogJyNjYzMzY2MnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdhdGVsaWVyIGxha2VzaWRlJyxcbiAgYXV0aG9yOiAnYnJhbSBkZSBoYWFuIChodHRwOi8vYXRlbGllcmJyYW0uZ2l0aHViLmlvL3N5bnRheC1oaWdobGlnaHRpbmcvYXRlbGllci1zY2hlbWVzL2xha2VzaWRlLyknLFxuICBiYXNlMDA6ICcjMTYxYjFkJyxcbiAgYmFzZTAxOiAnIzFmMjkyZScsXG4gIGJhc2UwMjogJyM1MTZkN2InLFxuICBiYXNlMDM6ICcjNWE3YjhjJyxcbiAgYmFzZTA0OiAnIzcxOTVhOCcsXG4gIGJhc2UwNTogJyM3ZWEyYjQnLFxuICBiYXNlMDY6ICcjYzFlNGY2JyxcbiAgYmFzZTA3OiAnI2ViZjhmZicsXG4gIGJhc2UwODogJyNkMjJkNzInLFxuICBiYXNlMDk6ICcjOTM1YzI1JyxcbiAgYmFzZTBBOiAnIzhhOGEwZicsXG4gIGJhc2UwQjogJyM1NjhjM2InLFxuICBiYXNlMEM6ICcjMmQ4ZjZmJyxcbiAgYmFzZTBEOiAnIzI1N2ZhZCcsXG4gIGJhc2UwRTogJyM1ZDVkYjEnLFxuICBiYXNlMEY6ICcjYjcyZGQyJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnYXRlbGllciBzZWFzaWRlJyxcbiAgYXV0aG9yOiAnYnJhbSBkZSBoYWFuIChodHRwOi8vYXRlbGllcmJyYW0uZ2l0aHViLmlvL3N5bnRheC1oaWdobGlnaHRpbmcvYXRlbGllci1zY2hlbWVzL3NlYXNpZGUvKScsXG4gIGJhc2UwMDogJyMxMzE1MTMnLFxuICBiYXNlMDE6ICcjMjQyOTI0JyxcbiAgYmFzZTAyOiAnIzVlNmU1ZScsXG4gIGJhc2UwMzogJyM2ODdkNjgnLFxuICBiYXNlMDQ6ICcjODA5OTgwJyxcbiAgYmFzZTA1OiAnIzhjYTY4YycsXG4gIGJhc2UwNjogJyNjZmU4Y2YnLFxuICBiYXNlMDc6ICcjZjBmZmYwJyxcbiAgYmFzZTA4OiAnI2U2MTkzYycsXG4gIGJhc2UwOTogJyM4NzcxMWQnLFxuICBiYXNlMEE6ICcjYzNjMzIyJyxcbiAgYmFzZTBCOiAnIzI5YTMyOScsXG4gIGJhc2UwQzogJyMxOTk5YjMnLFxuICBiYXNlMEQ6ICcjM2Q2MmY1JyxcbiAgYmFzZTBFOiAnI2FkMmJlZScsXG4gIGJhc2UwRjogJyNlNjE5YzMnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdiZXNwaW4nLFxuICBhdXRob3I6ICdqYW4gdC4gc290dCcsXG4gIGJhc2UwMDogJyMyODIxMWMnLFxuICBiYXNlMDE6ICcjMzYzMTJlJyxcbiAgYmFzZTAyOiAnIzVlNWQ1YycsXG4gIGJhc2UwMzogJyM2NjY2NjYnLFxuICBiYXNlMDQ6ICcjNzk3OTc3JyxcbiAgYmFzZTA1OiAnIzhhODk4NicsXG4gIGJhc2UwNjogJyM5ZDliOTcnLFxuICBiYXNlMDc6ICcjYmFhZTllJyxcbiAgYmFzZTA4OiAnI2NmNmE0YycsXG4gIGJhc2UwOTogJyNjZjdkMzQnLFxuICBiYXNlMEE6ICcjZjllZTk4JyxcbiAgYmFzZTBCOiAnIzU0YmUwZCcsXG4gIGJhc2UwQzogJyNhZmM0ZGInLFxuICBiYXNlMEQ6ICcjNWVhNmVhJyxcbiAgYmFzZTBFOiAnIzliODU5ZCcsXG4gIGJhc2UwRjogJyM5MzcxMjEnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdicmV3ZXInLFxuICBhdXRob3I6ICd0aW1vdGjDqWUgcG9pc290IChodHRwOi8vZ2l0aHViLmNvbS90cG9pc290KScsXG4gIGJhc2UwMDogJyMwYzBkMGUnLFxuICBiYXNlMDE6ICcjMmUyZjMwJyxcbiAgYmFzZTAyOiAnIzUxNTI1MycsXG4gIGJhc2UwMzogJyM3Mzc0NzUnLFxuICBiYXNlMDQ6ICcjOTU5Njk3JyxcbiAgYmFzZTA1OiAnI2I3YjhiOScsXG4gIGJhc2UwNjogJyNkYWRiZGMnLFxuICBiYXNlMDc6ICcjZmNmZGZlJyxcbiAgYmFzZTA4OiAnI2UzMWExYycsXG4gIGJhc2UwOTogJyNlNjU1MGQnLFxuICBiYXNlMEE6ICcjZGNhMDYwJyxcbiAgYmFzZTBCOiAnIzMxYTM1NCcsXG4gIGJhc2UwQzogJyM4MGIxZDMnLFxuICBiYXNlMEQ6ICcjMzE4MmJkJyxcbiAgYmFzZTBFOiAnIzc1NmJiMScsXG4gIGJhc2UwRjogJyNiMTU5MjgnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdicmlnaHQnLFxuICBhdXRob3I6ICdjaHJpcyBrZW1wc29uIChodHRwOi8vY2hyaXNrZW1wc29uLmNvbSknLFxuICBiYXNlMDA6ICcjMDAwMDAwJyxcbiAgYmFzZTAxOiAnIzMwMzAzMCcsXG4gIGJhc2UwMjogJyM1MDUwNTAnLFxuICBiYXNlMDM6ICcjYjBiMGIwJyxcbiAgYmFzZTA0OiAnI2QwZDBkMCcsXG4gIGJhc2UwNTogJyNlMGUwZTAnLFxuICBiYXNlMDY6ICcjZjVmNWY1JyxcbiAgYmFzZTA3OiAnI2ZmZmZmZicsXG4gIGJhc2UwODogJyNmYjAxMjAnLFxuICBiYXNlMDk6ICcjZmM2ZDI0JyxcbiAgYmFzZTBBOiAnI2ZkYTMzMScsXG4gIGJhc2UwQjogJyNhMWM2NTknLFxuICBiYXNlMEM6ICcjNzZjN2I3JyxcbiAgYmFzZTBEOiAnIzZmYjNkMicsXG4gIGJhc2UwRTogJyNkMzgxYzMnLFxuICBiYXNlMEY6ICcjYmU2NDNjJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnY2hhbGsnLFxuICBhdXRob3I6ICdjaHJpcyBrZW1wc29uIChodHRwOi8vY2hyaXNrZW1wc29uLmNvbSknLFxuICBiYXNlMDA6ICcjMTUxNTE1JyxcbiAgYmFzZTAxOiAnIzIwMjAyMCcsXG4gIGJhc2UwMjogJyMzMDMwMzAnLFxuICBiYXNlMDM6ICcjNTA1MDUwJyxcbiAgYmFzZTA0OiAnI2IwYjBiMCcsXG4gIGJhc2UwNTogJyNkMGQwZDAnLFxuICBiYXNlMDY6ICcjZTBlMGUwJyxcbiAgYmFzZTA3OiAnI2Y1ZjVmNScsXG4gIGJhc2UwODogJyNmYjlmYjEnLFxuICBiYXNlMDk6ICcjZWRhOTg3JyxcbiAgYmFzZTBBOiAnI2RkYjI2ZicsXG4gIGJhc2UwQjogJyNhY2MyNjcnLFxuICBiYXNlMEM6ICcjMTJjZmMwJyxcbiAgYmFzZTBEOiAnIzZmYzJlZicsXG4gIGJhc2UwRTogJyNlMWEzZWUnLFxuICBiYXNlMEY6ICcjZGVhZjhmJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnY29kZXNjaG9vbCcsXG4gIGF1dGhvcjogJ2JyZXR0b2Y4NicsXG4gIGJhc2UwMDogJyMyMzJjMzEnLFxuICBiYXNlMDE6ICcjMWMzNjU3JyxcbiAgYmFzZTAyOiAnIzJhMzQzYScsXG4gIGJhc2UwMzogJyMzZjQ5NDQnLFxuICBiYXNlMDQ6ICcjODQ4OThjJyxcbiAgYmFzZTA1OiAnIzllYTdhNicsXG4gIGJhc2UwNjogJyNhN2NmYTMnLFxuICBiYXNlMDc6ICcjYjVkOGY2JyxcbiAgYmFzZTA4OiAnIzJhNTQ5MScsXG4gIGJhc2UwOTogJyM0MzgyMGQnLFxuICBiYXNlMEE6ICcjYTAzYjFlJyxcbiAgYmFzZTBCOiAnIzIzNzk4NicsXG4gIGJhc2UwQzogJyNiMDJmMzAnLFxuICBiYXNlMEQ6ICcjNDg0ZDc5JyxcbiAgYmFzZTBFOiAnI2M1OTgyMCcsXG4gIGJhc2UwRjogJyNjOTgzNDQnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdjb2xvcnMnLFxuICBhdXRob3I6ICdtcm1ycyAoaHR0cDovL2NscnMuY2MpJyxcbiAgYmFzZTAwOiAnIzExMTExMScsXG4gIGJhc2UwMTogJyMzMzMzMzMnLFxuICBiYXNlMDI6ICcjNTU1NTU1JyxcbiAgYmFzZTAzOiAnIzc3Nzc3NycsXG4gIGJhc2UwNDogJyM5OTk5OTknLFxuICBiYXNlMDU6ICcjYmJiYmJiJyxcbiAgYmFzZTA2OiAnI2RkZGRkZCcsXG4gIGJhc2UwNzogJyNmZmZmZmYnLFxuICBiYXNlMDg6ICcjZmY0MTM2JyxcbiAgYmFzZTA5OiAnI2ZmODUxYicsXG4gIGJhc2UwQTogJyNmZmRjMDAnLFxuICBiYXNlMEI6ICcjMmVjYzQwJyxcbiAgYmFzZTBDOiAnIzdmZGJmZicsXG4gIGJhc2UwRDogJyMwMDc0ZDknLFxuICBiYXNlMEU6ICcjYjEwZGM5JyxcbiAgYmFzZTBGOiAnIzg1MTQ0Yidcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ2RlZmF1bHQnLFxuICBhdXRob3I6ICdjaHJpcyBrZW1wc29uIChodHRwOi8vY2hyaXNrZW1wc29uLmNvbSknLFxuICBiYXNlMDA6ICcjMTgxODE4JyxcbiAgYmFzZTAxOiAnIzI4MjgyOCcsXG4gIGJhc2UwMjogJyMzODM4MzgnLFxuICBiYXNlMDM6ICcjNTg1ODU4JyxcbiAgYmFzZTA0OiAnI2I4YjhiOCcsXG4gIGJhc2UwNTogJyNkOGQ4ZDgnLFxuICBiYXNlMDY6ICcjZThlOGU4JyxcbiAgYmFzZTA3OiAnI2Y4ZjhmOCcsXG4gIGJhc2UwODogJyNhYjQ2NDInLFxuICBiYXNlMDk6ICcjZGM5NjU2JyxcbiAgYmFzZTBBOiAnI2Y3Y2E4OCcsXG4gIGJhc2UwQjogJyNhMWI1NmMnLFxuICBiYXNlMEM6ICcjODZjMWI5JyxcbiAgYmFzZTBEOiAnIzdjYWZjMicsXG4gIGJhc2UwRTogJyNiYThiYWYnLFxuICBiYXNlMEY6ICcjYTE2OTQ2J1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnZWlnaHRpZXMnLFxuICBhdXRob3I6ICdjaHJpcyBrZW1wc29uIChodHRwOi8vY2hyaXNrZW1wc29uLmNvbSknLFxuICBiYXNlMDA6ICcjMmQyZDJkJyxcbiAgYmFzZTAxOiAnIzM5MzkzOScsXG4gIGJhc2UwMjogJyM1MTUxNTEnLFxuICBiYXNlMDM6ICcjNzQ3MzY5JyxcbiAgYmFzZTA0OiAnI2EwOWY5MycsXG4gIGJhc2UwNTogJyNkM2QwYzgnLFxuICBiYXNlMDY6ICcjZThlNmRmJyxcbiAgYmFzZTA3OiAnI2YyZjBlYycsXG4gIGJhc2UwODogJyNmMjc3N2EnLFxuICBiYXNlMDk6ICcjZjk5MTU3JyxcbiAgYmFzZTBBOiAnI2ZmY2M2NicsXG4gIGJhc2UwQjogJyM5OWNjOTknLFxuICBiYXNlMEM6ICcjNjZjY2NjJyxcbiAgYmFzZTBEOiAnIzY2OTljYycsXG4gIGJhc2UwRTogJyNjYzk5Y2MnLFxuICBiYXNlMEY6ICcjZDI3YjUzJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnZW1iZXJzJyxcbiAgYXV0aG9yOiAnamFubmlrIHNpZWJlcnQgKGh0dHBzOi8vZ2l0aHViLmNvbS9qYW5uaWtzKScsXG4gIGJhc2UwMDogJyMxNjEzMEYnLFxuICBiYXNlMDE6ICcjMkMyNjIwJyxcbiAgYmFzZTAyOiAnIzQzM0IzMicsXG4gIGJhc2UwMzogJyM1QTUwNDcnLFxuICBiYXNlMDQ6ICcjOEE4MDc1JyxcbiAgYmFzZTA1OiAnI0EzOUE5MCcsXG4gIGJhc2UwNjogJyNCRUI2QUUnLFxuICBiYXNlMDc6ICcjREJENkQxJyxcbiAgYmFzZTA4OiAnIzgyNkQ1NycsXG4gIGJhc2UwOTogJyM4MjgyNTcnLFxuICBiYXNlMEE6ICcjNkQ4MjU3JyxcbiAgYmFzZTBCOiAnIzU3ODI2RCcsXG4gIGJhc2UwQzogJyM1NzZEODInLFxuICBiYXNlMEQ6ICcjNkQ1NzgyJyxcbiAgYmFzZTBFOiAnIzgyNTc2RCcsXG4gIGJhc2UwRjogJyM4MjU3NTcnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdmbGF0JyxcbiAgYXV0aG9yOiAnY2hyaXMga2VtcHNvbiAoaHR0cDovL2Nocmlza2VtcHNvbi5jb20pJyxcbiAgYmFzZTAwOiAnIzJDM0U1MCcsXG4gIGJhc2UwMTogJyMzNDQ5NUUnLFxuICBiYXNlMDI6ICcjN0Y4QzhEJyxcbiAgYmFzZTAzOiAnIzk1QTVBNicsXG4gIGJhc2UwNDogJyNCREMzQzcnLFxuICBiYXNlMDU6ICcjZTBlMGUwJyxcbiAgYmFzZTA2OiAnI2Y1ZjVmNScsXG4gIGJhc2UwNzogJyNFQ0YwRjEnLFxuICBiYXNlMDg6ICcjRTc0QzNDJyxcbiAgYmFzZTA5OiAnI0U2N0UyMicsXG4gIGJhc2UwQTogJyNGMUM0MEYnLFxuICBiYXNlMEI6ICcjMkVDQzcxJyxcbiAgYmFzZTBDOiAnIzFBQkM5QycsXG4gIGJhc2UwRDogJyMzNDk4REInLFxuICBiYXNlMEU6ICcjOUI1OUI2JyxcbiAgYmFzZTBGOiAnI2JlNjQzYydcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ2dvb2dsZScsXG4gIGF1dGhvcjogJ3NldGggd3JpZ2h0IChodHRwOi8vc2V0aGF3cmlnaHQuY29tKScsXG4gIGJhc2UwMDogJyMxZDFmMjEnLFxuICBiYXNlMDE6ICcjMjgyYTJlJyxcbiAgYmFzZTAyOiAnIzM3M2I0MScsXG4gIGJhc2UwMzogJyM5Njk4OTYnLFxuICBiYXNlMDQ6ICcjYjRiN2I0JyxcbiAgYmFzZTA1OiAnI2M1YzhjNicsXG4gIGJhc2UwNjogJyNlMGUwZTAnLFxuICBiYXNlMDc6ICcjZmZmZmZmJyxcbiAgYmFzZTA4OiAnI0NDMzQyQicsXG4gIGJhc2UwOTogJyNGOTZBMzgnLFxuICBiYXNlMEE6ICcjRkJBOTIyJyxcbiAgYmFzZTBCOiAnIzE5ODg0NCcsXG4gIGJhc2UwQzogJyMzOTcxRUQnLFxuICBiYXNlMEQ6ICcjMzk3MUVEJyxcbiAgYmFzZTBFOiAnI0EzNkFDNycsXG4gIGJhc2UwRjogJyMzOTcxRUQnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdncmF5c2NhbGUnLFxuICBhdXRob3I6ICdhbGV4YW5kcmUgZ2F2aW9saSAoaHR0cHM6Ly9naXRodWIuY29tL2FsZXh4Mi8pJyxcbiAgYmFzZTAwOiAnIzEwMTAxMCcsXG4gIGJhc2UwMTogJyMyNTI1MjUnLFxuICBiYXNlMDI6ICcjNDY0NjQ2JyxcbiAgYmFzZTAzOiAnIzUyNTI1MicsXG4gIGJhc2UwNDogJyNhYmFiYWInLFxuICBiYXNlMDU6ICcjYjliOWI5JyxcbiAgYmFzZTA2OiAnI2UzZTNlMycsXG4gIGJhc2UwNzogJyNmN2Y3ZjcnLFxuICBiYXNlMDg6ICcjN2M3YzdjJyxcbiAgYmFzZTA5OiAnIzk5OTk5OScsXG4gIGJhc2UwQTogJyNhMGEwYTAnLFxuICBiYXNlMEI6ICcjOGU4ZThlJyxcbiAgYmFzZTBDOiAnIzg2ODY4NicsXG4gIGJhc2UwRDogJyM2ODY4NjgnLFxuICBiYXNlMEU6ICcjNzQ3NDc0JyxcbiAgYmFzZTBGOiAnIzVlNWU1ZSdcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ2dyZWVuIHNjcmVlbicsXG4gIGF1dGhvcjogJ2NocmlzIGtlbXBzb24gKGh0dHA6Ly9jaHJpc2tlbXBzb24uY29tKScsXG4gIGJhc2UwMDogJyMwMDExMDAnLFxuICBiYXNlMDE6ICcjMDAzMzAwJyxcbiAgYmFzZTAyOiAnIzAwNTUwMCcsXG4gIGJhc2UwMzogJyMwMDc3MDAnLFxuICBiYXNlMDQ6ICcjMDA5OTAwJyxcbiAgYmFzZTA1OiAnIzAwYmIwMCcsXG4gIGJhc2UwNjogJyMwMGRkMDAnLFxuICBiYXNlMDc6ICcjMDBmZjAwJyxcbiAgYmFzZTA4OiAnIzAwNzcwMCcsXG4gIGJhc2UwOTogJyMwMDk5MDAnLFxuICBiYXNlMEE6ICcjMDA3NzAwJyxcbiAgYmFzZTBCOiAnIzAwYmIwMCcsXG4gIGJhc2UwQzogJyMwMDU1MDAnLFxuICBiYXNlMEQ6ICcjMDA5OTAwJyxcbiAgYmFzZTBFOiAnIzAwYmIwMCcsXG4gIGJhc2UwRjogJyMwMDU1MDAnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdoYXJtb25pYzE2JyxcbiAgYXV0aG9yOiAnamFubmlrIHNpZWJlcnQgKGh0dHBzOi8vZ2l0aHViLmNvbS9qYW5uaWtzKScsXG4gIGJhc2UwMDogJyMwYjFjMmMnLFxuICBiYXNlMDE6ICcjMjIzYjU0JyxcbiAgYmFzZTAyOiAnIzQwNWM3OScsXG4gIGJhc2UwMzogJyM2MjdlOTknLFxuICBiYXNlMDQ6ICcjYWFiY2NlJyxcbiAgYmFzZTA1OiAnI2NiZDZlMicsXG4gIGJhc2UwNjogJyNlNWViZjEnLFxuICBiYXNlMDc6ICcjZjdmOWZiJyxcbiAgYmFzZTA4OiAnI2JmOGI1NicsXG4gIGJhc2UwOTogJyNiZmJmNTYnLFxuICBiYXNlMEE6ICcjOGJiZjU2JyxcbiAgYmFzZTBCOiAnIzU2YmY4YicsXG4gIGJhc2UwQzogJyM1NjhiYmYnLFxuICBiYXNlMEQ6ICcjOGI1NmJmJyxcbiAgYmFzZTBFOiAnI2JmNTY4YicsXG4gIGJhc2UwRjogJyNiZjU2NTYnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdob3BzY290Y2gnLFxuICBhdXRob3I6ICdqYW4gdC4gc290dCcsXG4gIGJhc2UwMDogJyMzMjI5MzEnLFxuICBiYXNlMDE6ICcjNDMzYjQyJyxcbiAgYmFzZTAyOiAnIzVjNTQ1YicsXG4gIGJhc2UwMzogJyM3OTczNzknLFxuICBiYXNlMDQ6ICcjOTg5NDk4JyxcbiAgYmFzZTA1OiAnI2I5YjViOCcsXG4gIGJhc2UwNjogJyNkNWQzZDUnLFxuICBiYXNlMDc6ICcjZmZmZmZmJyxcbiAgYmFzZTA4OiAnI2RkNDY0YycsXG4gIGJhc2UwOTogJyNmZDhiMTknLFxuICBiYXNlMEE6ICcjZmRjYzU5JyxcbiAgYmFzZTBCOiAnIzhmYzEzZScsXG4gIGJhc2UwQzogJyMxNDliOTMnLFxuICBiYXNlMEQ6ICcjMTI5MGJmJyxcbiAgYmFzZTBFOiAnI2M4NWU3YycsXG4gIGJhc2UwRjogJyNiMzM1MDgnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmUob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbJ2RlZmF1bHQnXSA6IG9iajsgfVxuXG52YXIgX3RocmVlemVyb3R3b2ZvdXIgPSByZXF1aXJlKCcuL3RocmVlemVyb3R3b2ZvdXInKTtcblxuZXhwb3J0cy50aHJlZXplcm90d29mb3VyID0gX2ludGVyb3BSZXF1aXJlKF90aHJlZXplcm90d29mb3VyKTtcblxudmFyIF9hcGF0aHkgPSByZXF1aXJlKCcuL2FwYXRoeScpO1xuXG5leHBvcnRzLmFwYXRoeSA9IF9pbnRlcm9wUmVxdWlyZShfYXBhdGh5KTtcblxudmFyIF9hc2hlcyA9IHJlcXVpcmUoJy4vYXNoZXMnKTtcblxuZXhwb3J0cy5hc2hlcyA9IF9pbnRlcm9wUmVxdWlyZShfYXNoZXMpO1xuXG52YXIgX2F0ZWxpZXJEdW5lID0gcmVxdWlyZSgnLi9hdGVsaWVyLWR1bmUnKTtcblxuZXhwb3J0cy5hdGVsaWVyRHVuZSA9IF9pbnRlcm9wUmVxdWlyZShfYXRlbGllckR1bmUpO1xuXG52YXIgX2F0ZWxpZXJGb3Jlc3QgPSByZXF1aXJlKCcuL2F0ZWxpZXItZm9yZXN0Jyk7XG5cbmV4cG9ydHMuYXRlbGllckZvcmVzdCA9IF9pbnRlcm9wUmVxdWlyZShfYXRlbGllckZvcmVzdCk7XG5cbnZhciBfYXRlbGllckhlYXRoID0gcmVxdWlyZSgnLi9hdGVsaWVyLWhlYXRoJyk7XG5cbmV4cG9ydHMuYXRlbGllckhlYXRoID0gX2ludGVyb3BSZXF1aXJlKF9hdGVsaWVySGVhdGgpO1xuXG52YXIgX2F0ZWxpZXJMYWtlc2lkZSA9IHJlcXVpcmUoJy4vYXRlbGllci1sYWtlc2lkZScpO1xuXG5leHBvcnRzLmF0ZWxpZXJMYWtlc2lkZSA9IF9pbnRlcm9wUmVxdWlyZShfYXRlbGllckxha2VzaWRlKTtcblxudmFyIF9hdGVsaWVyU2Vhc2lkZSA9IHJlcXVpcmUoJy4vYXRlbGllci1zZWFzaWRlJyk7XG5cbmV4cG9ydHMuYXRlbGllclNlYXNpZGUgPSBfaW50ZXJvcFJlcXVpcmUoX2F0ZWxpZXJTZWFzaWRlKTtcblxudmFyIF9iZXNwaW4gPSByZXF1aXJlKCcuL2Jlc3BpbicpO1xuXG5leHBvcnRzLmJlc3BpbiA9IF9pbnRlcm9wUmVxdWlyZShfYmVzcGluKTtcblxudmFyIF9icmV3ZXIgPSByZXF1aXJlKCcuL2JyZXdlcicpO1xuXG5leHBvcnRzLmJyZXdlciA9IF9pbnRlcm9wUmVxdWlyZShfYnJld2VyKTtcblxudmFyIF9icmlnaHQgPSByZXF1aXJlKCcuL2JyaWdodCcpO1xuXG5leHBvcnRzLmJyaWdodCA9IF9pbnRlcm9wUmVxdWlyZShfYnJpZ2h0KTtcblxudmFyIF9jaGFsayA9IHJlcXVpcmUoJy4vY2hhbGsnKTtcblxuZXhwb3J0cy5jaGFsayA9IF9pbnRlcm9wUmVxdWlyZShfY2hhbGspO1xuXG52YXIgX2NvZGVzY2hvb2wgPSByZXF1aXJlKCcuL2NvZGVzY2hvb2wnKTtcblxuZXhwb3J0cy5jb2Rlc2Nob29sID0gX2ludGVyb3BSZXF1aXJlKF9jb2Rlc2Nob29sKTtcblxudmFyIF9jb2xvcnMgPSByZXF1aXJlKCcuL2NvbG9ycycpO1xuXG5leHBvcnRzLmNvbG9ycyA9IF9pbnRlcm9wUmVxdWlyZShfY29sb3JzKTtcblxudmFyIF9kZWZhdWx0ID0gcmVxdWlyZSgnLi9kZWZhdWx0Jyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IF9pbnRlcm9wUmVxdWlyZShfZGVmYXVsdCk7XG5cbnZhciBfZWlnaHRpZXMgPSByZXF1aXJlKCcuL2VpZ2h0aWVzJyk7XG5cbmV4cG9ydHMuZWlnaHRpZXMgPSBfaW50ZXJvcFJlcXVpcmUoX2VpZ2h0aWVzKTtcblxudmFyIF9lbWJlcnMgPSByZXF1aXJlKCcuL2VtYmVycycpO1xuXG5leHBvcnRzLmVtYmVycyA9IF9pbnRlcm9wUmVxdWlyZShfZW1iZXJzKTtcblxudmFyIF9mbGF0ID0gcmVxdWlyZSgnLi9mbGF0Jyk7XG5cbmV4cG9ydHMuZmxhdCA9IF9pbnRlcm9wUmVxdWlyZShfZmxhdCk7XG5cbnZhciBfZ29vZ2xlID0gcmVxdWlyZSgnLi9nb29nbGUnKTtcblxuZXhwb3J0cy5nb29nbGUgPSBfaW50ZXJvcFJlcXVpcmUoX2dvb2dsZSk7XG5cbnZhciBfZ3JheXNjYWxlID0gcmVxdWlyZSgnLi9ncmF5c2NhbGUnKTtcblxuZXhwb3J0cy5ncmF5c2NhbGUgPSBfaW50ZXJvcFJlcXVpcmUoX2dyYXlzY2FsZSk7XG5cbnZhciBfZ3JlZW5zY3JlZW4gPSByZXF1aXJlKCcuL2dyZWVuc2NyZWVuJyk7XG5cbmV4cG9ydHMuZ3JlZW5zY3JlZW4gPSBfaW50ZXJvcFJlcXVpcmUoX2dyZWVuc2NyZWVuKTtcblxudmFyIF9oYXJtb25pYyA9IHJlcXVpcmUoJy4vaGFybW9uaWMnKTtcblxuZXhwb3J0cy5oYXJtb25pYyA9IF9pbnRlcm9wUmVxdWlyZShfaGFybW9uaWMpO1xuXG52YXIgX2hvcHNjb3RjaCA9IHJlcXVpcmUoJy4vaG9wc2NvdGNoJyk7XG5cbmV4cG9ydHMuaG9wc2NvdGNoID0gX2ludGVyb3BSZXF1aXJlKF9ob3BzY290Y2gpO1xuXG52YXIgX2lzb3RvcGUgPSByZXF1aXJlKCcuL2lzb3RvcGUnKTtcblxuZXhwb3J0cy5pc290b3BlID0gX2ludGVyb3BSZXF1aXJlKF9pc290b3BlKTtcblxudmFyIF9tYXJyYWtlc2ggPSByZXF1aXJlKCcuL21hcnJha2VzaCcpO1xuXG5leHBvcnRzLm1hcnJha2VzaCA9IF9pbnRlcm9wUmVxdWlyZShfbWFycmFrZXNoKTtcblxudmFyIF9tb2NoYSA9IHJlcXVpcmUoJy4vbW9jaGEnKTtcblxuZXhwb3J0cy5tb2NoYSA9IF9pbnRlcm9wUmVxdWlyZShfbW9jaGEpO1xuXG52YXIgX21vbm9rYWkgPSByZXF1aXJlKCcuL21vbm9rYWknKTtcblxuZXhwb3J0cy5tb25va2FpID0gX2ludGVyb3BSZXF1aXJlKF9tb25va2FpKTtcblxudmFyIF9vY2VhbiA9IHJlcXVpcmUoJy4vb2NlYW4nKTtcblxuZXhwb3J0cy5vY2VhbiA9IF9pbnRlcm9wUmVxdWlyZShfb2NlYW4pO1xuXG52YXIgX3BhcmFpc28gPSByZXF1aXJlKCcuL3BhcmFpc28nKTtcblxuZXhwb3J0cy5wYXJhaXNvID0gX2ludGVyb3BSZXF1aXJlKF9wYXJhaXNvKTtcblxudmFyIF9wb3AgPSByZXF1aXJlKCcuL3BvcCcpO1xuXG5leHBvcnRzLnBvcCA9IF9pbnRlcm9wUmVxdWlyZShfcG9wKTtcblxudmFyIF9yYWlsc2Nhc3RzID0gcmVxdWlyZSgnLi9yYWlsc2Nhc3RzJyk7XG5cbmV4cG9ydHMucmFpbHNjYXN0cyA9IF9pbnRlcm9wUmVxdWlyZShfcmFpbHNjYXN0cyk7XG5cbnZhciBfc2hhcGVzaGlmdGVyID0gcmVxdWlyZSgnLi9zaGFwZXNoaWZ0ZXInKTtcblxuZXhwb3J0cy5zaGFwZXNoaWZ0ZXIgPSBfaW50ZXJvcFJlcXVpcmUoX3NoYXBlc2hpZnRlcik7XG5cbnZhciBfc29sYXJpemVkID0gcmVxdWlyZSgnLi9zb2xhcml6ZWQnKTtcblxuZXhwb3J0cy5zb2xhcml6ZWQgPSBfaW50ZXJvcFJlcXVpcmUoX3NvbGFyaXplZCk7XG5cbnZhciBfc3VtbWVyZnJ1aXQgPSByZXF1aXJlKCcuL3N1bW1lcmZydWl0Jyk7XG5cbmV4cG9ydHMuc3VtbWVyZnJ1aXQgPSBfaW50ZXJvcFJlcXVpcmUoX3N1bW1lcmZydWl0KTtcblxudmFyIF90b21vcnJvdyA9IHJlcXVpcmUoJy4vdG9tb3Jyb3cnKTtcblxuZXhwb3J0cy50b21vcnJvdyA9IF9pbnRlcm9wUmVxdWlyZShfdG9tb3Jyb3cpO1xuXG52YXIgX3R1YmUgPSByZXF1aXJlKCcuL3R1YmUnKTtcblxuZXhwb3J0cy50dWJlID0gX2ludGVyb3BSZXF1aXJlKF90dWJlKTtcblxudmFyIF90d2lsaWdodCA9IHJlcXVpcmUoJy4vdHdpbGlnaHQnKTtcblxuZXhwb3J0cy50d2lsaWdodCA9IF9pbnRlcm9wUmVxdWlyZShfdHdpbGlnaHQpOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnaXNvdG9wZScsXG4gIGF1dGhvcjogJ2phbiB0LiBzb3R0JyxcbiAgYmFzZTAwOiAnIzAwMDAwMCcsXG4gIGJhc2UwMTogJyM0MDQwNDAnLFxuICBiYXNlMDI6ICcjNjA2MDYwJyxcbiAgYmFzZTAzOiAnIzgwODA4MCcsXG4gIGJhc2UwNDogJyNjMGMwYzAnLFxuICBiYXNlMDU6ICcjZDBkMGQwJyxcbiAgYmFzZTA2OiAnI2UwZTBlMCcsXG4gIGJhc2UwNzogJyNmZmZmZmYnLFxuICBiYXNlMDg6ICcjZmYwMDAwJyxcbiAgYmFzZTA5OiAnI2ZmOTkwMCcsXG4gIGJhc2UwQTogJyNmZjAwOTknLFxuICBiYXNlMEI6ICcjMzNmZjAwJyxcbiAgYmFzZTBDOiAnIzAwZmZmZicsXG4gIGJhc2UwRDogJyMwMDY2ZmYnLFxuICBiYXNlMEU6ICcjY2MwMGZmJyxcbiAgYmFzZTBGOiAnIzMzMDBmZidcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ21hcnJha2VzaCcsXG4gIGF1dGhvcjogJ2FsZXhhbmRyZSBnYXZpb2xpIChodHRwOi8vZ2l0aHViLmNvbS9hbGV4eDIvKScsXG4gIGJhc2UwMDogJyMyMDE2MDInLFxuICBiYXNlMDE6ICcjMzAyZTAwJyxcbiAgYmFzZTAyOiAnIzVmNWIxNycsXG4gIGJhc2UwMzogJyM2YzY4MjMnLFxuICBiYXNlMDQ6ICcjODY4MTNiJyxcbiAgYmFzZTA1OiAnIzk0OGU0OCcsXG4gIGJhc2UwNjogJyNjY2MzN2EnLFxuICBiYXNlMDc6ICcjZmFmMGE1JyxcbiAgYmFzZTA4OiAnI2MzNTM1OScsXG4gIGJhc2UwOTogJyNiMzYxNDQnLFxuICBiYXNlMEE6ICcjYTg4MzM5JyxcbiAgYmFzZTBCOiAnIzE4OTc0ZScsXG4gIGJhc2UwQzogJyM3NWE3MzgnLFxuICBiYXNlMEQ6ICcjNDc3Y2ExJyxcbiAgYmFzZTBFOiAnIzg4NjhiMycsXG4gIGJhc2UwRjogJyNiMzU4OGUnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdtb2NoYScsXG4gIGF1dGhvcjogJ2NocmlzIGtlbXBzb24gKGh0dHA6Ly9jaHJpc2tlbXBzb24uY29tKScsXG4gIGJhc2UwMDogJyMzQjMyMjgnLFxuICBiYXNlMDE6ICcjNTM0NjM2JyxcbiAgYmFzZTAyOiAnIzY0NTI0MCcsXG4gIGJhc2UwMzogJyM3ZTcwNWEnLFxuICBiYXNlMDQ6ICcjYjhhZmFkJyxcbiAgYmFzZTA1OiAnI2QwYzhjNicsXG4gIGJhc2UwNjogJyNlOWUxZGQnLFxuICBiYXNlMDc6ICcjZjVlZWViJyxcbiAgYmFzZTA4OiAnI2NiNjA3NycsXG4gIGJhc2UwOTogJyNkMjhiNzEnLFxuICBiYXNlMEE6ICcjZjRiYzg3JyxcbiAgYmFzZTBCOiAnI2JlYjU1YicsXG4gIGJhc2UwQzogJyM3YmJkYTQnLFxuICBiYXNlMEQ6ICcjOGFiM2I1JyxcbiAgYmFzZTBFOiAnI2E4OWJiOScsXG4gIGJhc2UwRjogJyNiYjk1ODQnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdtb25va2FpJyxcbiAgYXV0aG9yOiAnd2ltZXIgaGF6ZW5iZXJnIChodHRwOi8vd3d3Lm1vbm9rYWkubmwpJyxcbiAgYmFzZTAwOiAnIzI3MjgyMicsXG4gIGJhc2UwMTogJyMzODM4MzAnLFxuICBiYXNlMDI6ICcjNDk0ODNlJyxcbiAgYmFzZTAzOiAnIzc1NzE1ZScsXG4gIGJhc2UwNDogJyNhNTlmODUnLFxuICBiYXNlMDU6ICcjZjhmOGYyJyxcbiAgYmFzZTA2OiAnI2Y1ZjRmMScsXG4gIGJhc2UwNzogJyNmOWY4ZjUnLFxuICBiYXNlMDg6ICcjZjkyNjcyJyxcbiAgYmFzZTA5OiAnI2ZkOTcxZicsXG4gIGJhc2UwQTogJyNmNGJmNzUnLFxuICBiYXNlMEI6ICcjYTZlMjJlJyxcbiAgYmFzZTBDOiAnI2ExZWZlNCcsXG4gIGJhc2UwRDogJyM2NmQ5ZWYnLFxuICBiYXNlMEU6ICcjYWU4MWZmJyxcbiAgYmFzZTBGOiAnI2NjNjYzMydcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ29jZWFuJyxcbiAgYXV0aG9yOiAnY2hyaXMga2VtcHNvbiAoaHR0cDovL2Nocmlza2VtcHNvbi5jb20pJyxcbiAgYmFzZTAwOiAnIzJiMzAzYicsXG4gIGJhc2UwMTogJyMzNDNkNDYnLFxuICBiYXNlMDI6ICcjNGY1YjY2JyxcbiAgYmFzZTAzOiAnIzY1NzM3ZScsXG4gIGJhc2UwNDogJyNhN2FkYmEnLFxuICBiYXNlMDU6ICcjYzBjNWNlJyxcbiAgYmFzZTA2OiAnI2RmZTFlOCcsXG4gIGJhc2UwNzogJyNlZmYxZjUnLFxuICBiYXNlMDg6ICcjYmY2MTZhJyxcbiAgYmFzZTA5OiAnI2QwODc3MCcsXG4gIGJhc2UwQTogJyNlYmNiOGInLFxuICBiYXNlMEI6ICcjYTNiZThjJyxcbiAgYmFzZTBDOiAnIzk2YjViNCcsXG4gIGJhc2UwRDogJyM4ZmExYjMnLFxuICBiYXNlMEU6ICcjYjQ4ZWFkJyxcbiAgYmFzZTBGOiAnI2FiNzk2Nydcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ3BhcmFpc28nLFxuICBhdXRob3I6ICdqYW4gdC4gc290dCcsXG4gIGJhc2UwMDogJyMyZjFlMmUnLFxuICBiYXNlMDE6ICcjNDEzMjNmJyxcbiAgYmFzZTAyOiAnIzRmNDI0YycsXG4gIGJhc2UwMzogJyM3NzZlNzEnLFxuICBiYXNlMDQ6ICcjOGQ4Njg3JyxcbiAgYmFzZTA1OiAnI2EzOWU5YicsXG4gIGJhc2UwNjogJyNiOWI2YjAnLFxuICBiYXNlMDc6ICcjZTdlOWRiJyxcbiAgYmFzZTA4OiAnI2VmNjE1NScsXG4gIGJhc2UwOTogJyNmOTliMTUnLFxuICBiYXNlMEE6ICcjZmVjNDE4JyxcbiAgYmFzZTBCOiAnIzQ4YjY4NScsXG4gIGJhc2UwQzogJyM1YmM0YmYnLFxuICBiYXNlMEQ6ICcjMDZiNmVmJyxcbiAgYmFzZTBFOiAnIzgxNWJhNCcsXG4gIGJhc2UwRjogJyNlOTZiYTgnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdwb3AnLFxuICBhdXRob3I6ICdjaHJpcyBrZW1wc29uIChodHRwOi8vY2hyaXNrZW1wc29uLmNvbSknLFxuICBiYXNlMDA6ICcjMDAwMDAwJyxcbiAgYmFzZTAxOiAnIzIwMjAyMCcsXG4gIGJhc2UwMjogJyMzMDMwMzAnLFxuICBiYXNlMDM6ICcjNTA1MDUwJyxcbiAgYmFzZTA0OiAnI2IwYjBiMCcsXG4gIGJhc2UwNTogJyNkMGQwZDAnLFxuICBiYXNlMDY6ICcjZTBlMGUwJyxcbiAgYmFzZTA3OiAnI2ZmZmZmZicsXG4gIGJhc2UwODogJyNlYjAwOGEnLFxuICBiYXNlMDk6ICcjZjI5MzMzJyxcbiAgYmFzZTBBOiAnI2Y4Y2ExMicsXG4gIGJhc2UwQjogJyMzN2IzNDknLFxuICBiYXNlMEM6ICcjMDBhYWJiJyxcbiAgYmFzZTBEOiAnIzBlNWE5NCcsXG4gIGJhc2UwRTogJyNiMzFlOGQnLFxuICBiYXNlMEY6ICcjN2EyZDAwJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAncmFpbHNjYXN0cycsXG4gIGF1dGhvcjogJ3J5YW4gYmF0ZXMgKGh0dHA6Ly9yYWlsc2Nhc3RzLmNvbSknLFxuICBiYXNlMDA6ICcjMmIyYjJiJyxcbiAgYmFzZTAxOiAnIzI3MjkzNScsXG4gIGJhc2UwMjogJyMzYTQwNTUnLFxuICBiYXNlMDM6ICcjNWE2NDdlJyxcbiAgYmFzZTA0OiAnI2Q0Y2ZjOScsXG4gIGJhc2UwNTogJyNlNmUxZGMnLFxuICBiYXNlMDY6ICcjZjRmMWVkJyxcbiAgYmFzZTA3OiAnI2Y5ZjdmMycsXG4gIGJhc2UwODogJyNkYTQ5MzknLFxuICBiYXNlMDk6ICcjY2M3ODMzJyxcbiAgYmFzZTBBOiAnI2ZmYzY2ZCcsXG4gIGJhc2UwQjogJyNhNWMyNjEnLFxuICBiYXNlMEM6ICcjNTE5ZjUwJyxcbiAgYmFzZTBEOiAnIzZkOWNiZScsXG4gIGJhc2UwRTogJyNiNmIzZWInLFxuICBiYXNlMEY6ICcjYmM5NDU4J1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnc2hhcGVzaGlmdGVyJyxcbiAgYXV0aG9yOiAndHlsZXIgYmVuemlnZXIgKGh0dHA6Ly90eWJlbnouY29tKScsXG4gIGJhc2UwMDogJyMwMDAwMDAnLFxuICBiYXNlMDE6ICcjMDQwNDA0JyxcbiAgYmFzZTAyOiAnIzEwMjAxNScsXG4gIGJhc2UwMzogJyMzNDM0MzQnLFxuICBiYXNlMDQ6ICcjNTU1NTU1JyxcbiAgYmFzZTA1OiAnI2FiYWJhYicsXG4gIGJhc2UwNjogJyNlMGUwZTAnLFxuICBiYXNlMDc6ICcjZjlmOWY5JyxcbiAgYmFzZTA4OiAnI2U5MmYyZicsXG4gIGJhc2UwOTogJyNlMDk0NDgnLFxuICBiYXNlMEE6ICcjZGRkZDEzJyxcbiAgYmFzZTBCOiAnIzBlZDgzOScsXG4gIGJhc2UwQzogJyMyM2VkZGEnLFxuICBiYXNlMEQ6ICcjM2I0OGUzJyxcbiAgYmFzZTBFOiAnI2Y5OTZlMicsXG4gIGJhc2UwRjogJyM2OTU0MmQnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICdzb2xhcml6ZWQnLFxuICBhdXRob3I6ICdldGhhbiBzY2hvb25vdmVyIChodHRwOi8vZXRoYW5zY2hvb25vdmVyLmNvbS9zb2xhcml6ZWQpJyxcbiAgYmFzZTAwOiAnIzAwMmIzNicsXG4gIGJhc2UwMTogJyMwNzM2NDInLFxuICBiYXNlMDI6ICcjNTg2ZTc1JyxcbiAgYmFzZTAzOiAnIzY1N2I4MycsXG4gIGJhc2UwNDogJyM4Mzk0OTYnLFxuICBiYXNlMDU6ICcjOTNhMWExJyxcbiAgYmFzZTA2OiAnI2VlZThkNScsXG4gIGJhc2UwNzogJyNmZGY2ZTMnLFxuICBiYXNlMDg6ICcjZGMzMjJmJyxcbiAgYmFzZTA5OiAnI2NiNGIxNicsXG4gIGJhc2UwQTogJyNiNTg5MDAnLFxuICBiYXNlMEI6ICcjODU5OTAwJyxcbiAgYmFzZTBDOiAnIzJhYTE5OCcsXG4gIGJhc2UwRDogJyMyNjhiZDInLFxuICBiYXNlMEU6ICcjNmM3MWM0JyxcbiAgYmFzZTBGOiAnI2QzMzY4Midcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHNjaGVtZTogJ3N1bW1lcmZydWl0JyxcbiAgYXV0aG9yOiAnY2hyaXN0b3BoZXIgY29ybGV5IChodHRwOi8vY3Njb3JsZXkuZ2l0aHViLmlvLyknLFxuICBiYXNlMDA6ICcjMTUxNTE1JyxcbiAgYmFzZTAxOiAnIzIwMjAyMCcsXG4gIGJhc2UwMjogJyMzMDMwMzAnLFxuICBiYXNlMDM6ICcjNTA1MDUwJyxcbiAgYmFzZTA0OiAnI0IwQjBCMCcsXG4gIGJhc2UwNTogJyNEMEQwRDAnLFxuICBiYXNlMDY6ICcjRTBFMEUwJyxcbiAgYmFzZTA3OiAnI0ZGRkZGRicsXG4gIGJhc2UwODogJyNGRjAwODYnLFxuICBiYXNlMDk6ICcjRkQ4OTAwJyxcbiAgYmFzZTBBOiAnI0FCQTgwMCcsXG4gIGJhc2UwQjogJyMwMEM5MTgnLFxuICBiYXNlMEM6ICcjMWZhYWFhJyxcbiAgYmFzZTBEOiAnIzM3NzdFNicsXG4gIGJhc2UwRTogJyNBRDAwQTEnLFxuICBiYXNlMEY6ICcjY2M2NjMzJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAndGhyZWV6ZXJvdHdvZm91cicsXG4gIGF1dGhvcjogJ2phbiB0LiBzb3R0IChodHRwOi8vZ2l0aHViLmNvbS9pZGxlYmVyZyknLFxuICBiYXNlMDA6ICcjMDkwMzAwJyxcbiAgYmFzZTAxOiAnIzNhMzQzMicsXG4gIGJhc2UwMjogJyM0YTQ1NDMnLFxuICBiYXNlMDM6ICcjNWM1ODU1JyxcbiAgYmFzZTA0OiAnIzgwN2Q3YycsXG4gIGJhc2UwNTogJyNhNWEyYTInLFxuICBiYXNlMDY6ICcjZDZkNWQ0JyxcbiAgYmFzZTA3OiAnI2Y3ZjdmNycsXG4gIGJhc2UwODogJyNkYjJkMjAnLFxuICBiYXNlMDk6ICcjZThiYmQwJyxcbiAgYmFzZTBBOiAnI2ZkZWQwMicsXG4gIGJhc2UwQjogJyMwMWEyNTInLFxuICBiYXNlMEM6ICcjYjVlNGY0JyxcbiAgYmFzZTBEOiAnIzAxYTBlNCcsXG4gIGJhc2UwRTogJyNhMTZhOTQnLFxuICBiYXNlMEY6ICcjY2RhYjUzJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAndG9tb3Jyb3cnLFxuICBhdXRob3I6ICdjaHJpcyBrZW1wc29uIChodHRwOi8vY2hyaXNrZW1wc29uLmNvbSknLFxuICBiYXNlMDA6ICcjMWQxZjIxJyxcbiAgYmFzZTAxOiAnIzI4MmEyZScsXG4gIGJhc2UwMjogJyMzNzNiNDEnLFxuICBiYXNlMDM6ICcjOTY5ODk2JyxcbiAgYmFzZTA0OiAnI2I0YjdiNCcsXG4gIGJhc2UwNTogJyNjNWM4YzYnLFxuICBiYXNlMDY6ICcjZTBlMGUwJyxcbiAgYmFzZTA3OiAnI2ZmZmZmZicsXG4gIGJhc2UwODogJyNjYzY2NjYnLFxuICBiYXNlMDk6ICcjZGU5MzVmJyxcbiAgYmFzZTBBOiAnI2YwYzY3NCcsXG4gIGJhc2UwQjogJyNiNWJkNjgnLFxuICBiYXNlMEM6ICcjOGFiZWI3JyxcbiAgYmFzZTBEOiAnIzgxYTJiZScsXG4gIGJhc2UwRTogJyNiMjk0YmInLFxuICBiYXNlMEY6ICcjYTM2ODVhJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgc2NoZW1lOiAnbG9uZG9uIHR1YmUnLFxuICBhdXRob3I6ICdqYW4gdC4gc290dCcsXG4gIGJhc2UwMDogJyMyMzFmMjAnLFxuICBiYXNlMDE6ICcjMWMzZjk1JyxcbiAgYmFzZTAyOiAnIzVhNTc1OCcsXG4gIGJhc2UwMzogJyM3MzcxNzEnLFxuICBiYXNlMDQ6ICcjOTU5Y2ExJyxcbiAgYmFzZTA1OiAnI2Q5ZDhkOCcsXG4gIGJhc2UwNjogJyNlN2U3ZTgnLFxuICBiYXNlMDc6ICcjZmZmZmZmJyxcbiAgYmFzZTA4OiAnI2VlMmUyNCcsXG4gIGJhc2UwOTogJyNmMzg2YTEnLFxuICBiYXNlMEE6ICcjZmZkMjA0JyxcbiAgYmFzZTBCOiAnIzAwODUzZScsXG4gIGJhc2UwQzogJyM4NWNlYmMnLFxuICBiYXNlMEQ6ICcjMDA5ZGRjJyxcbiAgYmFzZTBFOiAnIzk4MDA1ZCcsXG4gIGJhc2UwRjogJyNiMDYxMTAnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBzY2hlbWU6ICd0d2lsaWdodCcsXG4gIGF1dGhvcjogJ2RhdmlkIGhhcnQgKGh0dHA6Ly9oYXJ0LWRldi5jb20pJyxcbiAgYmFzZTAwOiAnIzFlMWUxZScsXG4gIGJhc2UwMTogJyMzMjM1MzcnLFxuICBiYXNlMDI6ICcjNDY0YjUwJyxcbiAgYmFzZTAzOiAnIzVmNWE2MCcsXG4gIGJhc2UwNDogJyM4MzgxODQnLFxuICBiYXNlMDU6ICcjYTdhN2E3JyxcbiAgYmFzZTA2OiAnI2MzYzNjMycsXG4gIGJhc2UwNzogJyNmZmZmZmYnLFxuICBiYXNlMDg6ICcjY2Y2YTRjJyxcbiAgYmFzZTA5OiAnI2NkYTg2OScsXG4gIGJhc2UwQTogJyNmOWVlOTgnLFxuICBiYXNlMEI6ICcjOGY5ZDZhJyxcbiAgYmFzZTBDOiAnI2FmYzRkYicsXG4gIGJhc2UwRDogJyM3NTg3YTYnLFxuICBiYXNlMEU6ICcjOWI4NTlkJyxcbiAgYmFzZTBGOiAnIzliNzAzZidcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKiBNSVQgbGljZW5zZSAqL1xudmFyIGNzc0tleXdvcmRzID0gcmVxdWlyZSgnY29sb3ItbmFtZScpO1xuXG4vLyBOT1RFOiBjb252ZXJzaW9ucyBzaG91bGQgb25seSByZXR1cm4gcHJpbWl0aXZlIHZhbHVlcyAoaS5lLiBhcnJheXMsIG9yXG4vLyAgICAgICB2YWx1ZXMgdGhhdCBnaXZlIGNvcnJlY3QgYHR5cGVvZmAgcmVzdWx0cykuXG4vLyAgICAgICBkbyBub3QgdXNlIGJveCB2YWx1ZXMgdHlwZXMgKGkuZS4gTnVtYmVyKCksIFN0cmluZygpLCBldGMuKVxuXG52YXIgcmV2ZXJzZUtleXdvcmRzID0ge307XG5mb3IgKHZhciBrZXkgaW4gY3NzS2V5d29yZHMpIHtcblx0aWYgKGNzc0tleXdvcmRzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRyZXZlcnNlS2V5d29yZHNbY3NzS2V5d29yZHNba2V5XV0gPSBrZXk7XG5cdH1cbn1cblxudmFyIGNvbnZlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IHtcblx0cmdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3JnYid9LFxuXHRoc2w6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHNsJ30sXG5cdGhzdjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc3YnfSxcblx0aHdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2h3Yid9LFxuXHRjbXlrOiB7Y2hhbm5lbHM6IDQsIGxhYmVsczogJ2NteWsnfSxcblx0eHl6OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3h5eid9LFxuXHRsYWI6IHtjaGFubmVsczogMywgbGFiZWxzOiAnbGFiJ30sXG5cdGxjaDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsY2gnfSxcblx0aGV4OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydoZXgnXX0sXG5cdGtleXdvcmQ6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2tleXdvcmQnXX0sXG5cdGFuc2kxNjoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnYW5zaTE2J119LFxuXHRhbnNpMjU2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMjU2J119LFxuXHRoY2c6IHtjaGFubmVsczogMywgbGFiZWxzOiBbJ2gnLCAnYycsICdnJ119LFxuXHRhcHBsZToge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsncjE2JywgJ2cxNicsICdiMTYnXX0sXG5cdGdyYXk6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2dyYXknXX1cbn07XG5cbi8vIGhpZGUgLmNoYW5uZWxzIGFuZCAubGFiZWxzIHByb3BlcnRpZXNcbmZvciAodmFyIG1vZGVsIGluIGNvbnZlcnQpIHtcblx0aWYgKGNvbnZlcnQuaGFzT3duUHJvcGVydHkobW9kZWwpKSB7XG5cdFx0aWYgKCEoJ2NoYW5uZWxzJyBpbiBjb252ZXJ0W21vZGVsXSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0XHR9XG5cblx0XHRpZiAoISgnbGFiZWxzJyBpbiBjb252ZXJ0W21vZGVsXSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVsIGxhYmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0XHR9XG5cblx0XHRpZiAoY29udmVydFttb2RlbF0ubGFiZWxzLmxlbmd0aCAhPT0gY29udmVydFttb2RlbF0uY2hhbm5lbHMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBhbmQgbGFiZWwgY291bnRzIG1pc21hdGNoOiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHZhciBjaGFubmVscyA9IGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRcdHZhciBsYWJlbHMgPSBjb252ZXJ0W21vZGVsXS5sYWJlbHM7XG5cdFx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRcdGRlbGV0ZSBjb252ZXJ0W21vZGVsXS5sYWJlbHM7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNoYW5uZWxzfSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBsYWJlbHN9KTtcblx0fVxufVxuXG5jb252ZXJ0LnJnYi5oc2wgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcblx0dmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHR2YXIgZGVsdGEgPSBtYXggLSBtaW47XG5cdHZhciBoO1xuXHR2YXIgcztcblx0dmFyIGw7XG5cblx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0aCA9IDA7XG5cdH0gZWxzZSBpZiAociA9PT0gbWF4KSB7XG5cdFx0aCA9IChnIC0gYikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChnID09PSBtYXgpIHtcblx0XHRoID0gMiArIChiIC0gcikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChiID09PSBtYXgpIHtcblx0XHRoID0gNCArIChyIC0gZykgLyBkZWx0YTtcblx0fVxuXG5cdGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG5cblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAzNjA7XG5cdH1cblxuXHRsID0gKG1pbiArIG1heCkgLyAyO1xuXG5cdGlmIChtYXggPT09IG1pbikge1xuXHRcdHMgPSAwO1xuXHR9IGVsc2UgaWYgKGwgPD0gMC41KSB7XG5cdFx0cyA9IGRlbHRhIC8gKG1heCArIG1pbik7XG5cdH0gZWxzZSB7XG5cdFx0cyA9IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pO1xuXHR9XG5cblx0cmV0dXJuIFtoLCBzICogMTAwLCBsICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmhzdiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHJkaWY7XG5cdHZhciBnZGlmO1xuXHR2YXIgYmRpZjtcblx0dmFyIGg7XG5cdHZhciBzO1xuXG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciB2ID0gTWF0aC5tYXgociwgZywgYik7XG5cdHZhciBkaWZmID0gdiAtIE1hdGgubWluKHIsIGcsIGIpO1xuXHR2YXIgZGlmZmMgPSBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAodiAtIGMpIC8gNiAvIGRpZmYgKyAxIC8gMjtcblx0fTtcblxuXHRpZiAoZGlmZiA9PT0gMCkge1xuXHRcdGggPSBzID0gMDtcblx0fSBlbHNlIHtcblx0XHRzID0gZGlmZiAvIHY7XG5cdFx0cmRpZiA9IGRpZmZjKHIpO1xuXHRcdGdkaWYgPSBkaWZmYyhnKTtcblx0XHRiZGlmID0gZGlmZmMoYik7XG5cblx0XHRpZiAociA9PT0gdikge1xuXHRcdFx0aCA9IGJkaWYgLSBnZGlmO1xuXHRcdH0gZWxzZSBpZiAoZyA9PT0gdikge1xuXHRcdFx0aCA9ICgxIC8gMykgKyByZGlmIC0gYmRpZjtcblx0XHR9IGVsc2UgaWYgKGIgPT09IHYpIHtcblx0XHRcdGggPSAoMiAvIDMpICsgZ2RpZiAtIHJkaWY7XG5cdFx0fVxuXHRcdGlmIChoIDwgMCkge1xuXHRcdFx0aCArPSAxO1xuXHRcdH0gZWxzZSBpZiAoaCA+IDEpIHtcblx0XHRcdGggLT0gMTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdGggKiAzNjAsXG5cdFx0cyAqIDEwMCxcblx0XHR2ICogMTAwXG5cdF07XG59O1xuXG5jb252ZXJ0LnJnYi5od2IgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdO1xuXHR2YXIgZyA9IHJnYlsxXTtcblx0dmFyIGIgPSByZ2JbMl07XG5cdHZhciBoID0gY29udmVydC5yZ2IuaHNsKHJnYilbMF07XG5cdHZhciB3ID0gMSAvIDI1NSAqIE1hdGgubWluKHIsIE1hdGgubWluKGcsIGIpKTtcblxuXHRiID0gMSAtIDEgLyAyNTUgKiBNYXRoLm1heChyLCBNYXRoLm1heChnLCBiKSk7XG5cblx0cmV0dXJuIFtoLCB3ICogMTAwLCBiICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmNteWsgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBjO1xuXHR2YXIgbTtcblx0dmFyIHk7XG5cdHZhciBrO1xuXG5cdGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcblx0YyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXHRtID0gKDEgLSBnIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdHkgPSAoMSAtIGIgLSBrKSAvICgxIC0gaykgfHwgMDtcblxuXHRyZXR1cm4gW2MgKiAxMDAsIG0gKiAxMDAsIHkgKiAxMDAsIGsgKiAxMDBdO1xufTtcblxuLyoqXG4gKiBTZWUgaHR0cHM6Ly9lbi5tLndpa2lwZWRpYS5vcmcvd2lraS9FdWNsaWRlYW5fZGlzdGFuY2UjU3F1YXJlZF9FdWNsaWRlYW5fZGlzdGFuY2VcbiAqICovXG5mdW5jdGlvbiBjb21wYXJhdGl2ZURpc3RhbmNlKHgsIHkpIHtcblx0cmV0dXJuIChcblx0XHRNYXRoLnBvdyh4WzBdIC0geVswXSwgMikgK1xuXHRcdE1hdGgucG93KHhbMV0gLSB5WzFdLCAyKSArXG5cdFx0TWF0aC5wb3coeFsyXSAtIHlbMl0sIDIpXG5cdCk7XG59XG5cbmNvbnZlcnQucmdiLmtleXdvcmQgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByZXZlcnNlZCA9IHJldmVyc2VLZXl3b3Jkc1tyZ2JdO1xuXHRpZiAocmV2ZXJzZWQpIHtcblx0XHRyZXR1cm4gcmV2ZXJzZWQ7XG5cdH1cblxuXHR2YXIgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuXHR2YXIgY3VycmVudENsb3Nlc3RLZXl3b3JkO1xuXG5cdGZvciAodmFyIGtleXdvcmQgaW4gY3NzS2V5d29yZHMpIHtcblx0XHRpZiAoY3NzS2V5d29yZHMuaGFzT3duUHJvcGVydHkoa2V5d29yZCkpIHtcblx0XHRcdHZhciB2YWx1ZSA9IGNzc0tleXdvcmRzW2tleXdvcmRdO1xuXG5cdFx0XHQvLyBDb21wdXRlIGNvbXBhcmF0aXZlIGRpc3RhbmNlXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBjb21wYXJhdGl2ZURpc3RhbmNlKHJnYiwgdmFsdWUpO1xuXG5cdFx0XHQvLyBDaGVjayBpZiBpdHMgbGVzcywgaWYgc28gc2V0IGFzIGNsb3Nlc3Rcblx0XHRcdGlmIChkaXN0YW5jZSA8IGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UpIHtcblx0XHRcdFx0Y3VycmVudENsb3Nlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuXHRcdFx0XHRjdXJyZW50Q2xvc2VzdEtleXdvcmQgPSBrZXl3b3JkO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG59O1xuXG5jb252ZXJ0LmtleXdvcmQucmdiID0gZnVuY3Rpb24gKGtleXdvcmQpIHtcblx0cmV0dXJuIGNzc0tleXdvcmRzW2tleXdvcmRdO1xufTtcblxuY29udmVydC5yZ2IueHl6ID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgciA9IHJnYlswXSAvIDI1NTtcblx0dmFyIGcgPSByZ2JbMV0gLyAyNTU7XG5cdHZhciBiID0gcmdiWzJdIC8gMjU1O1xuXG5cdC8vIGFzc3VtZSBzUkdCXG5cdHIgPSByID4gMC4wNDA0NSA/IE1hdGgucG93KCgociArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChyIC8gMTIuOTIpO1xuXHRnID0gZyA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKGcgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAoZyAvIDEyLjkyKTtcblx0YiA9IGIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChiICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKGIgLyAxMi45Mik7XG5cblx0dmFyIHggPSAociAqIDAuNDEyNCkgKyAoZyAqIDAuMzU3NikgKyAoYiAqIDAuMTgwNSk7XG5cdHZhciB5ID0gKHIgKiAwLjIxMjYpICsgKGcgKiAwLjcxNTIpICsgKGIgKiAwLjA3MjIpO1xuXHR2YXIgeiA9IChyICogMC4wMTkzKSArIChnICogMC4xMTkyKSArIChiICogMC45NTA1KTtcblxuXHRyZXR1cm4gW3ggKiAxMDAsIHkgKiAxMDAsIHogKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IubGFiID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgeHl6ID0gY29udmVydC5yZ2IueHl6KHJnYik7XG5cdHZhciB4ID0geHl6WzBdO1xuXHR2YXIgeSA9IHh5elsxXTtcblx0dmFyIHogPSB4eXpbMl07XG5cdHZhciBsO1xuXHR2YXIgYTtcblx0dmFyIGI7XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/IE1hdGgucG93KHgsIDEgLyAzKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcblx0eSA9IHkgPiAwLjAwODg1NiA/IE1hdGgucG93KHksIDEgLyAzKSA6ICg3Ljc4NyAqIHkpICsgKDE2IC8gMTE2KTtcblx0eiA9IHogPiAwLjAwODg1NiA/IE1hdGgucG93KHosIDEgLyAzKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRsID0gKDExNiAqIHkpIC0gMTY7XG5cdGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5oc2wucmdiID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXSAvIDM2MDtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgdDE7XG5cdHZhciB0Mjtcblx0dmFyIHQzO1xuXHR2YXIgcmdiO1xuXHR2YXIgdmFsO1xuXG5cdGlmIChzID09PSAwKSB7XG5cdFx0dmFsID0gbCAqIDI1NTtcblx0XHRyZXR1cm4gW3ZhbCwgdmFsLCB2YWxdO1xuXHR9XG5cblx0aWYgKGwgPCAwLjUpIHtcblx0XHR0MiA9IGwgKiAoMSArIHMpO1xuXHR9IGVsc2Uge1xuXHRcdHQyID0gbCArIHMgLSBsICogcztcblx0fVxuXG5cdHQxID0gMiAqIGwgLSB0MjtcblxuXHRyZ2IgPSBbMCwgMCwgMF07XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0dDMgPSBoICsgMSAvIDMgKiAtKGkgLSAxKTtcblx0XHRpZiAodDMgPCAwKSB7XG5cdFx0XHR0MysrO1xuXHRcdH1cblx0XHRpZiAodDMgPiAxKSB7XG5cdFx0XHR0My0tO1xuXHRcdH1cblxuXHRcdGlmICg2ICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0Mztcblx0XHR9IGVsc2UgaWYgKDIgKiB0MyA8IDEpIHtcblx0XHRcdHZhbCA9IHQyO1xuXHRcdH0gZWxzZSBpZiAoMyAqIHQzIDwgMikge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiAoMiAvIDMgLSB0MykgKiA2O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwgPSB0MTtcblx0XHR9XG5cblx0XHRyZ2JbaV0gPSB2YWwgKiAyNTU7XG5cdH1cblxuXHRyZXR1cm4gcmdiO1xufTtcblxuY29udmVydC5oc2wuaHN2ID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXTtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgc21pbiA9IHM7XG5cdHZhciBsbWluID0gTWF0aC5tYXgobCwgMC4wMSk7XG5cdHZhciBzdjtcblx0dmFyIHY7XG5cblx0bCAqPSAyO1xuXHRzICo9IChsIDw9IDEpID8gbCA6IDIgLSBsO1xuXHRzbWluICo9IGxtaW4gPD0gMSA/IGxtaW4gOiAyIC0gbG1pbjtcblx0diA9IChsICsgcykgLyAyO1xuXHRzdiA9IGwgPT09IDAgPyAoMiAqIHNtaW4pIC8gKGxtaW4gKyBzbWluKSA6ICgyICogcykgLyAobCArIHMpO1xuXG5cdHJldHVybiBbaCwgc3YgKiAxMDAsIHYgKiAxMDBdO1xufTtcblxuY29udmVydC5oc3YucmdiID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXSAvIDYwO1xuXHR2YXIgcyA9IGhzdlsxXSAvIDEwMDtcblx0dmFyIHYgPSBoc3ZbMl0gLyAxMDA7XG5cdHZhciBoaSA9IE1hdGguZmxvb3IoaCkgJSA2O1xuXG5cdHZhciBmID0gaCAtIE1hdGguZmxvb3IoaCk7XG5cdHZhciBwID0gMjU1ICogdiAqICgxIC0gcyk7XG5cdHZhciBxID0gMjU1ICogdiAqICgxIC0gKHMgKiBmKSk7XG5cdHZhciB0ID0gMjU1ICogdiAqICgxIC0gKHMgKiAoMSAtIGYpKSk7XG5cdHYgKj0gMjU1O1xuXG5cdHN3aXRjaCAoaGkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRyZXR1cm4gW3YsIHQsIHBdO1xuXHRcdGNhc2UgMTpcblx0XHRcdHJldHVybiBbcSwgdiwgcF07XG5cdFx0Y2FzZSAyOlxuXHRcdFx0cmV0dXJuIFtwLCB2LCB0XTtcblx0XHRjYXNlIDM6XG5cdFx0XHRyZXR1cm4gW3AsIHEsIHZdO1xuXHRcdGNhc2UgNDpcblx0XHRcdHJldHVybiBbdCwgcCwgdl07XG5cdFx0Y2FzZSA1OlxuXHRcdFx0cmV0dXJuIFt2LCBwLCBxXTtcblx0fVxufTtcblxuY29udmVydC5oc3YuaHNsID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXTtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXHR2YXIgdm1pbiA9IE1hdGgubWF4KHYsIDAuMDEpO1xuXHR2YXIgbG1pbjtcblx0dmFyIHNsO1xuXHR2YXIgbDtcblxuXHRsID0gKDIgLSBzKSAqIHY7XG5cdGxtaW4gPSAoMiAtIHMpICogdm1pbjtcblx0c2wgPSBzICogdm1pbjtcblx0c2wgLz0gKGxtaW4gPD0gMSkgPyBsbWluIDogMiAtIGxtaW47XG5cdHNsID0gc2wgfHwgMDtcblx0bCAvPSAyO1xuXG5cdHJldHVybiBbaCwgc2wgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuLy8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3NzLWNvbG9yLyNod2ItdG8tcmdiXG5jb252ZXJ0Lmh3Yi5yZ2IgPSBmdW5jdGlvbiAoaHdiKSB7XG5cdHZhciBoID0gaHdiWzBdIC8gMzYwO1xuXHR2YXIgd2ggPSBod2JbMV0gLyAxMDA7XG5cdHZhciBibCA9IGh3YlsyXSAvIDEwMDtcblx0dmFyIHJhdGlvID0gd2ggKyBibDtcblx0dmFyIGk7XG5cdHZhciB2O1xuXHR2YXIgZjtcblx0dmFyIG47XG5cblx0Ly8gd2ggKyBibCBjYW50IGJlID4gMVxuXHRpZiAocmF0aW8gPiAxKSB7XG5cdFx0d2ggLz0gcmF0aW87XG5cdFx0YmwgLz0gcmF0aW87XG5cdH1cblxuXHRpID0gTWF0aC5mbG9vcig2ICogaCk7XG5cdHYgPSAxIC0gYmw7XG5cdGYgPSA2ICogaCAtIGk7XG5cblx0aWYgKChpICYgMHgwMSkgIT09IDApIHtcblx0XHRmID0gMSAtIGY7XG5cdH1cblxuXHRuID0gd2ggKyBmICogKHYgLSB3aCk7IC8vIGxpbmVhciBpbnRlcnBvbGF0aW9uXG5cblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblx0c3dpdGNoIChpKSB7XG5cdFx0ZGVmYXVsdDpcblx0XHRjYXNlIDY6XG5cdFx0Y2FzZSAwOiByID0gdjsgZyA9IG47IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAxOiByID0gbjsgZyA9IHY7IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAyOiByID0gd2g7IGcgPSB2OyBiID0gbjsgYnJlYWs7XG5cdFx0Y2FzZSAzOiByID0gd2g7IGcgPSBuOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA0OiByID0gbjsgZyA9IHdoOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA1OiByID0gdjsgZyA9IHdoOyBiID0gbjsgYnJlYWs7XG5cdH1cblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uIChjbXlrKSB7XG5cdHZhciBjID0gY215a1swXSAvIDEwMDtcblx0dmFyIG0gPSBjbXlrWzFdIC8gMTAwO1xuXHR2YXIgeSA9IGNteWtbMl0gLyAxMDA7XG5cdHZhciBrID0gY215a1szXSAvIDEwMDtcblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblxuXHRyID0gMSAtIE1hdGgubWluKDEsIGMgKiAoMSAtIGspICsgayk7XG5cdGcgPSAxIC0gTWF0aC5taW4oMSwgbSAqICgxIC0gaykgKyBrKTtcblx0YiA9IDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspO1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0Lnh5ei5yZ2IgPSBmdW5jdGlvbiAoeHl6KSB7XG5cdHZhciB4ID0geHl6WzBdIC8gMTAwO1xuXHR2YXIgeSA9IHh5elsxXSAvIDEwMDtcblx0dmFyIHogPSB4eXpbMl0gLyAxMDA7XG5cdHZhciByO1xuXHR2YXIgZztcblx0dmFyIGI7XG5cblx0ciA9ICh4ICogMy4yNDA2KSArICh5ICogLTEuNTM3MikgKyAoeiAqIC0wLjQ5ODYpO1xuXHRnID0gKHggKiAtMC45Njg5KSArICh5ICogMS44NzU4KSArICh6ICogMC4wNDE1KTtcblx0YiA9ICh4ICogMC4wNTU3KSArICh5ICogLTAuMjA0MCkgKyAoeiAqIDEuMDU3MCk7XG5cblx0Ly8gYXNzdW1lIHNSR0Jcblx0ciA9IHIgPiAwLjAwMzEzMDhcblx0XHQ/ICgoMS4wNTUgKiBNYXRoLnBvdyhyLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuXHRcdDogciAqIDEyLjkyO1xuXG5cdGcgPSBnID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogTWF0aC5wb3coZywgMS4wIC8gMi40KSkgLSAwLjA1NSlcblx0XHQ6IGcgKiAxMi45MjtcblxuXHRiID0gYiA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIE1hdGgucG93KGIsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG5cdFx0OiBiICogMTIuOTI7XG5cblx0ciA9IE1hdGgubWluKE1hdGgubWF4KDAsIHIpLCAxKTtcblx0ZyA9IE1hdGgubWluKE1hdGgubWF4KDAsIGcpLCAxKTtcblx0YiA9IE1hdGgubWluKE1hdGgubWF4KDAsIGIpLCAxKTtcblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC54eXoubGFiID0gZnVuY3Rpb24gKHh5eikge1xuXHR2YXIgeCA9IHh5elswXTtcblx0dmFyIHkgPSB4eXpbMV07XG5cdHZhciB6ID0geHl6WzJdO1xuXHR2YXIgbDtcblx0dmFyIGE7XG5cdHZhciBiO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG5cdHkgPSB5ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5LCAxIC8gMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxIC8gMykgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0bCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRhID0gNTAwICogKHggLSB5KTtcblx0YiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQubGFiLnh5eiA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIHg7XG5cdHZhciB5O1xuXHR2YXIgejtcblxuXHR5ID0gKGwgKyAxNikgLyAxMTY7XG5cdHggPSBhIC8gNTAwICsgeTtcblx0eiA9IHkgLSBiIC8gMjAwO1xuXG5cdHZhciB5MiA9IE1hdGgucG93KHksIDMpO1xuXHR2YXIgeDIgPSBNYXRoLnBvdyh4LCAzKTtcblx0dmFyIHoyID0gTWF0aC5wb3coeiwgMyk7XG5cdHkgPSB5MiA+IDAuMDA4ODU2ID8geTIgOiAoeSAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXHR4ID0geDIgPiAwLjAwODg1NiA/IHgyIDogKHggLSAxNiAvIDExNikgLyA3Ljc4Nztcblx0eiA9IHoyID4gMC4wMDg4NTYgPyB6MiA6ICh6IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cblx0eCAqPSA5NS4wNDc7XG5cdHkgKj0gMTAwO1xuXHR6ICo9IDEwOC44ODM7XG5cblx0cmV0dXJuIFt4LCB5LCB6XTtcbn07XG5cbmNvbnZlcnQubGFiLmxjaCA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIGhyO1xuXHR2YXIgaDtcblx0dmFyIGM7XG5cblx0aHIgPSBNYXRoLmF0YW4yKGIsIGEpO1xuXHRoID0gaHIgKiAzNjAgLyAyIC8gTWF0aC5QSTtcblxuXHRpZiAoaCA8IDApIHtcblx0XHRoICs9IDM2MDtcblx0fVxuXG5cdGMgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG5cblx0cmV0dXJuIFtsLCBjLCBoXTtcbn07XG5cbmNvbnZlcnQubGNoLmxhYiA9IGZ1bmN0aW9uIChsY2gpIHtcblx0dmFyIGwgPSBsY2hbMF07XG5cdHZhciBjID0gbGNoWzFdO1xuXHR2YXIgaCA9IGxjaFsyXTtcblx0dmFyIGE7XG5cdHZhciBiO1xuXHR2YXIgaHI7XG5cblx0aHIgPSBoIC8gMzYwICogMiAqIE1hdGguUEk7XG5cdGEgPSBjICogTWF0aC5jb3MoaHIpO1xuXHRiID0gYyAqIE1hdGguc2luKGhyKTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblx0dmFyIHZhbHVlID0gMSBpbiBhcmd1bWVudHMgPyBhcmd1bWVudHNbMV0gOiBjb252ZXJ0LnJnYi5oc3YoYXJncylbMl07IC8vIGhzdiAtPiBhbnNpMTYgb3B0aW1pemF0aW9uXG5cblx0dmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlIC8gNTApO1xuXG5cdGlmICh2YWx1ZSA9PT0gMCkge1xuXHRcdHJldHVybiAzMDtcblx0fVxuXG5cdHZhciBhbnNpID0gMzBcblx0XHQrICgoTWF0aC5yb3VuZChiIC8gMjU1KSA8PCAyKVxuXHRcdHwgKE1hdGgucm91bmQoZyAvIDI1NSkgPDwgMSlcblx0XHR8IE1hdGgucm91bmQociAvIDI1NSkpO1xuXG5cdGlmICh2YWx1ZSA9PT0gMikge1xuXHRcdGFuc2kgKz0gNjA7XG5cdH1cblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuaHN2LmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdC8vIG9wdGltaXphdGlvbiBoZXJlOyB3ZSBhbHJlYWR5IGtub3cgdGhlIHZhbHVlIGFuZCBkb24ndCBuZWVkIHRvIGdldFxuXHQvLyBpdCBjb252ZXJ0ZWQgZm9yIHVzLlxuXHRyZXR1cm4gY29udmVydC5yZ2IuYW5zaTE2KGNvbnZlcnQuaHN2LnJnYihhcmdzKSwgYXJnc1syXSk7XG59O1xuXG5jb252ZXJ0LnJnYi5hbnNpMjU2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblxuXHQvLyB3ZSB1c2UgdGhlIGV4dGVuZGVkIGdyZXlzY2FsZSBwYWxldHRlIGhlcmUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZlxuXHQvLyBibGFjayBhbmQgd2hpdGUuIG5vcm1hbCBwYWxldHRlIG9ubHkgaGFzIDQgZ3JleXNjYWxlIHNoYWRlcy5cblx0aWYgKHIgPT09IGcgJiYgZyA9PT0gYikge1xuXHRcdGlmIChyIDwgOCkge1xuXHRcdFx0cmV0dXJuIDE2O1xuXHRcdH1cblxuXHRcdGlmIChyID4gMjQ4KSB7XG5cdFx0XHRyZXR1cm4gMjMxO1xuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLnJvdW5kKCgociAtIDgpIC8gMjQ3KSAqIDI0KSArIDIzMjtcblx0fVxuXG5cdHZhciBhbnNpID0gMTZcblx0XHQrICgzNiAqIE1hdGgucm91bmQociAvIDI1NSAqIDUpKVxuXHRcdCsgKDYgKiBNYXRoLnJvdW5kKGcgLyAyNTUgKiA1KSlcblx0XHQrIE1hdGgucm91bmQoYiAvIDI1NSAqIDUpO1xuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5hbnNpMTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIGNvbG9yID0gYXJncyAlIDEwO1xuXG5cdC8vIGhhbmRsZSBncmV5c2NhbGVcblx0aWYgKGNvbG9yID09PSAwIHx8IGNvbG9yID09PSA3KSB7XG5cdFx0aWYgKGFyZ3MgPiA1MCkge1xuXHRcdFx0Y29sb3IgKz0gMy41O1xuXHRcdH1cblxuXHRcdGNvbG9yID0gY29sb3IgLyAxMC41ICogMjU1O1xuXG5cdFx0cmV0dXJuIFtjb2xvciwgY29sb3IsIGNvbG9yXTtcblx0fVxuXG5cdHZhciBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcblx0dmFyIHIgPSAoKGNvbG9yICYgMSkgKiBtdWx0KSAqIDI1NTtcblx0dmFyIGcgPSAoKChjb2xvciA+PiAxKSAmIDEpICogbXVsdCkgKiAyNTU7XG5cdHZhciBiID0gKCgoY29sb3IgPj4gMikgJiAxKSAqIG11bHQpICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LmFuc2kyNTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gaGFuZGxlIGdyZXlzY2FsZVxuXHRpZiAoYXJncyA+PSAyMzIpIHtcblx0XHR2YXIgYyA9IChhcmdzIC0gMjMyKSAqIDEwICsgODtcblx0XHRyZXR1cm4gW2MsIGMsIGNdO1xuXHR9XG5cblx0YXJncyAtPSAxNjtcblxuXHR2YXIgcmVtO1xuXHR2YXIgciA9IE1hdGguZmxvb3IoYXJncyAvIDM2KSAvIDUgKiAyNTU7XG5cdHZhciBnID0gTWF0aC5mbG9vcigocmVtID0gYXJncyAlIDM2KSAvIDYpIC8gNSAqIDI1NTtcblx0dmFyIGIgPSAocmVtICUgNikgLyA1ICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oZXggPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgaW50ZWdlciA9ICgoTWF0aC5yb3VuZChhcmdzWzBdKSAmIDB4RkYpIDw8IDE2KVxuXHRcdCsgKChNYXRoLnJvdW5kKGFyZ3NbMV0pICYgMHhGRikgPDwgOClcblx0XHQrIChNYXRoLnJvdW5kKGFyZ3NbMl0pICYgMHhGRik7XG5cblx0dmFyIHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LmhleC5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgbWF0Y2ggPSBhcmdzLnRvU3RyaW5nKDE2KS5tYXRjaCgvW2EtZjAtOV17Nn18W2EtZjAtOV17M30vaSk7XG5cdGlmICghbWF0Y2gpIHtcblx0XHRyZXR1cm4gWzAsIDAsIDBdO1xuXHR9XG5cblx0dmFyIGNvbG9yU3RyaW5nID0gbWF0Y2hbMF07XG5cblx0aWYgKG1hdGNoWzBdLmxlbmd0aCA9PT0gMykge1xuXHRcdGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoY2hhcikge1xuXHRcdFx0cmV0dXJuIGNoYXIgKyBjaGFyO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGludGVnZXIgPSBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuXHR2YXIgciA9IChpbnRlZ2VyID4+IDE2KSAmIDB4RkY7XG5cdHZhciBnID0gKGludGVnZXIgPj4gOCkgJiAweEZGO1xuXHR2YXIgYiA9IGludGVnZXIgJiAweEZGO1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oY2cgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtYXggPSBNYXRoLm1heChNYXRoLm1heChyLCBnKSwgYik7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihNYXRoLm1pbihyLCBnKSwgYik7XG5cdHZhciBjaHJvbWEgPSAobWF4IC0gbWluKTtcblx0dmFyIGdyYXlzY2FsZTtcblx0dmFyIGh1ZTtcblxuXHRpZiAoY2hyb21hIDwgMSkge1xuXHRcdGdyYXlzY2FsZSA9IG1pbiAvICgxIC0gY2hyb21hKTtcblx0fSBlbHNlIHtcblx0XHRncmF5c2NhbGUgPSAwO1xuXHR9XG5cblx0aWYgKGNocm9tYSA8PSAwKSB7XG5cdFx0aHVlID0gMDtcblx0fSBlbHNlXG5cdGlmIChtYXggPT09IHIpIHtcblx0XHRodWUgPSAoKGcgLSBiKSAvIGNocm9tYSkgJSA2O1xuXHR9IGVsc2Vcblx0aWYgKG1heCA9PT0gZykge1xuXHRcdGh1ZSA9IDIgKyAoYiAtIHIpIC8gY2hyb21hO1xuXHR9IGVsc2Uge1xuXHRcdGh1ZSA9IDQgKyAociAtIGcpIC8gY2hyb21hICsgNDtcblx0fVxuXG5cdGh1ZSAvPSA2O1xuXHRodWUgJT0gMTtcblxuXHRyZXR1cm4gW2h1ZSAqIDM2MCwgY2hyb21hICogMTAwLCBncmF5c2NhbGUgKiAxMDBdO1xufTtcblxuY29udmVydC5oc2wuaGNnID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgcyA9IGhzbFsxXSAvIDEwMDtcblx0dmFyIGwgPSBoc2xbMl0gLyAxMDA7XG5cdHZhciBjID0gMTtcblx0dmFyIGYgPSAwO1xuXG5cdGlmIChsIDwgMC41KSB7XG5cdFx0YyA9IDIuMCAqIHMgKiBsO1xuXHR9IGVsc2Uge1xuXHRcdGMgPSAyLjAgKiBzICogKDEuMCAtIGwpO1xuXHR9XG5cblx0aWYgKGMgPCAxLjApIHtcblx0XHRmID0gKGwgLSAwLjUgKiBjKSAvICgxLjAgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHNsWzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHN2LmhjZyA9IGZ1bmN0aW9uIChoc3YpIHtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXG5cdHZhciBjID0gcyAqIHY7XG5cdHZhciBmID0gMDtcblxuXHRpZiAoYyA8IDEuMCkge1xuXHRcdGYgPSAodiAtIGMpIC8gKDEgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHN2WzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLnJnYiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGggPSBoY2dbMF0gLyAzNjA7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRpZiAoYyA9PT0gMC4wKSB7XG5cdFx0cmV0dXJuIFtnICogMjU1LCBnICogMjU1LCBnICogMjU1XTtcblx0fVxuXG5cdHZhciBwdXJlID0gWzAsIDAsIDBdO1xuXHR2YXIgaGkgPSAoaCAlIDEpICogNjtcblx0dmFyIHYgPSBoaSAlIDE7XG5cdHZhciB3ID0gMSAtIHY7XG5cdHZhciBtZyA9IDA7XG5cblx0c3dpdGNoIChNYXRoLmZsb29yKGhpKSkge1xuXHRcdGNhc2UgMDpcblx0XHRcdHB1cmVbMF0gPSAxOyBwdXJlWzFdID0gdjsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMTpcblx0XHRcdHB1cmVbMF0gPSB3OyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgMzpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gdzsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGNhc2UgNDpcblx0XHRcdHB1cmVbMF0gPSB2OyBwdXJlWzFdID0gMDsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSB3O1xuXHR9XG5cblx0bWcgPSAoMS4wIC0gYykgKiBnO1xuXG5cdHJldHVybiBbXG5cdFx0KGMgKiBwdXJlWzBdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMl0gKyBtZykgKiAyNTVcblx0XTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzdiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdHZhciBmID0gMDtcblxuXHRpZiAodiA+IDAuMCkge1xuXHRcdGYgPSBjIC8gdjtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBmICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzbCA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciBsID0gZyAqICgxLjAgLSBjKSArIDAuNSAqIGM7XG5cdHZhciBzID0gMDtcblxuXHRpZiAobCA+IDAuMCAmJiBsIDwgMC41KSB7XG5cdFx0cyA9IGMgLyAoMiAqIGwpO1xuXHR9IGVsc2Vcblx0aWYgKGwgPj0gMC41ICYmIGwgPCAxLjApIHtcblx0XHRzID0gYyAvICgyICogKDEgLSBsKSk7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5od2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblx0dmFyIHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0cmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xufTtcblxuY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24gKGh3Yikge1xuXHR2YXIgdyA9IGh3YlsxXSAvIDEwMDtcblx0dmFyIGIgPSBod2JbMl0gLyAxMDA7XG5cdHZhciB2ID0gMSAtIGI7XG5cdHZhciBjID0gdiAtIHc7XG5cdHZhciBnID0gMDtcblxuXHRpZiAoYyA8IDEpIHtcblx0XHRnID0gKHYgLSBjKSAvICgxIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2h3YlswXSwgYyAqIDEwMCwgZyAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmFwcGxlLnJnYiA9IGZ1bmN0aW9uIChhcHBsZSkge1xuXHRyZXR1cm4gWyhhcHBsZVswXSAvIDY1NTM1KSAqIDI1NSwgKGFwcGxlWzFdIC8gNjU1MzUpICogMjU1LCAoYXBwbGVbMl0gLyA2NTUzNSkgKiAyNTVdO1xufTtcblxuY29udmVydC5yZ2IuYXBwbGUgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHJldHVybiBbKHJnYlswXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsxXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsyXSAvIDI1NSkgKiA2NTUzNV07XG59O1xuXG5jb252ZXJ0LmdyYXkucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFthcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1XTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oc2wgPSBjb252ZXJ0LmdyYXkuaHN2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFswLCAwLCBhcmdzWzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5od2IgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gWzAsIDEwMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuY215ayA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbMCwgMCwgMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkubGFiID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFtncmF5WzBdLCAwLCAwXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oZXggPSBmdW5jdGlvbiAoZ3JheSkge1xuXHR2YXIgdmFsID0gTWF0aC5yb3VuZChncmF5WzBdIC8gMTAwICogMjU1KSAmIDB4RkY7XG5cdHZhciBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuXG5cdHZhciBzdHJpbmcgPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHRyZXR1cm4gJzAwMDAwMCcuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufTtcblxuY29udmVydC5yZ2IuZ3JheSA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHZhbCA9IChyZ2JbMF0gKyByZ2JbMV0gKyByZ2JbMl0pIC8gMztcblx0cmV0dXJuIFt2YWwgLyAyNTUgKiAxMDBdO1xufTtcbiIsInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcbnZhciByb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGUnKTtcblxudmFyIGNvbnZlcnQgPSB7fTtcblxudmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIHdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0uY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5sYWJlbHN9KTtcblxuXHR2YXIgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0dmFyIHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uICh0b01vZGVsKSB7XG5cdFx0dmFyIGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XHJcbiIsInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcblxuLypcblx0dGhpcyBmdW5jdGlvbiByb3V0ZXMgYSBtb2RlbCB0byBhbGwgb3RoZXIgbW9kZWxzLlxuXG5cdGFsbCBmdW5jdGlvbnMgdGhhdCBhcmUgcm91dGVkIGhhdmUgYSBwcm9wZXJ0eSBgLmNvbnZlcnNpb25gIGF0dGFjaGVkXG5cdHRvIHRoZSByZXR1cm5lZCBzeW50aGV0aWMgZnVuY3Rpb24uIFRoaXMgcHJvcGVydHkgaXMgYW4gYXJyYXlcblx0b2Ygc3RyaW5ncywgZWFjaCB3aXRoIHRoZSBzdGVwcyBpbiBiZXR3ZWVuIHRoZSAnZnJvbScgYW5kICd0bydcblx0Y29sb3IgbW9kZWxzIChpbmNsdXNpdmUpLlxuXG5cdGNvbnZlcnNpb25zIHRoYXQgYXJlIG5vdCBwb3NzaWJsZSBzaW1wbHkgYXJlIG5vdCBpbmNsdWRlZC5cbiovXG5cbmZ1bmN0aW9uIGJ1aWxkR3JhcGgoKSB7XG5cdHZhciBncmFwaCA9IHt9O1xuXHQvLyBodHRwczovL2pzcGVyZi5jb20vb2JqZWN0LWtleXMtdnMtZm9yLWluLXdpdGgtY2xvc3VyZS8zXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGdyYXBoW21vZGVsc1tpXV0gPSB7XG5cdFx0XHQvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG5cdFx0XHQvLyBtaWNyby1vcHQsIGJ1dCB0aGlzIGlzIHNpbXBsZS5cblx0XHRcdGRpc3RhbmNlOiAtMSxcblx0XHRcdHBhcmVudDogbnVsbFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNoXG5mdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGJ1aWxkR3JhcGgoKTtcblx0dmFyIHF1ZXVlID0gW2Zyb21Nb2RlbF07IC8vIHVuc2hpZnQgLT4gcXVldWUgLT4gcG9wXG5cblx0Z3JhcGhbZnJvbU1vZGVsXS5kaXN0YW5jZSA9IDA7XG5cblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdHZhciBjdXJyZW50ID0gcXVldWUucG9wKCk7XG5cdFx0dmFyIGFkamFjZW50cyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zW2N1cnJlbnRdKTtcblxuXHRcdGZvciAodmFyIGxlbiA9IGFkamFjZW50cy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHZhciBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcblx0XHRcdHZhciBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuXG5cdFx0XHRpZiAobm9kZS5kaXN0YW5jZSA9PT0gLTEpIHtcblx0XHRcdFx0bm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcblx0XHRcdFx0bm9kZS5wYXJlbnQgPSBjdXJyZW50O1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KGFkamFjZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIGxpbmsoZnJvbSwgdG8pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0cmV0dXJuIHRvKGZyb20oYXJncykpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCkge1xuXHR2YXIgcGF0aCA9IFtncmFwaFt0b01vZGVsXS5wYXJlbnQsIHRvTW9kZWxdO1xuXHR2YXIgZm4gPSBjb252ZXJzaW9uc1tncmFwaFt0b01vZGVsXS5wYXJlbnRdW3RvTW9kZWxdO1xuXG5cdHZhciBjdXIgPSBncmFwaFt0b01vZGVsXS5wYXJlbnQ7XG5cdHdoaWxlIChncmFwaFtjdXJdLnBhcmVudCkge1xuXHRcdHBhdGgudW5zaGlmdChncmFwaFtjdXJdLnBhcmVudCk7XG5cdFx0Zm4gPSBsaW5rKGNvbnZlcnNpb25zW2dyYXBoW2N1cl0ucGFyZW50XVtjdXJdLCBmbik7XG5cdFx0Y3VyID0gZ3JhcGhbY3VyXS5wYXJlbnQ7XG5cdH1cblxuXHRmbi5jb252ZXJzaW9uID0gcGF0aDtcblx0cmV0dXJuIGZuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdHZhciBjb252ZXJzaW9uID0ge307XG5cblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdHZhciB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdHZhciBub2RlID0gZ3JhcGhbdG9Nb2RlbF07XG5cblx0XHRpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblx0XHRcdC8vIG5vIHBvc3NpYmxlIGNvbnZlcnNpb24sIG9yIHRoaXMgbm9kZSBpcyB0aGUgc291cmNlIG1vZGVsLlxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udmVyc2lvblt0b01vZGVsXSA9IHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKTtcblx0fVxuXG5cdHJldHVybiBjb252ZXJzaW9uO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XHJcbiIsIi8qIE1JVCBsaWNlbnNlICovXG52YXIgY29sb3JOYW1lcyA9IHJlcXVpcmUoJ2NvbG9yLW5hbWUnKTtcbnZhciBzd2l6emxlID0gcmVxdWlyZSgnc2ltcGxlLXN3aXp6bGUnKTtcblxudmFyIHJldmVyc2VOYW1lcyA9IHt9O1xuXG4vLyBjcmVhdGUgYSBsaXN0IG9mIHJldmVyc2UgY29sb3IgbmFtZXNcbmZvciAodmFyIG5hbWUgaW4gY29sb3JOYW1lcykge1xuXHRpZiAoY29sb3JOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHRcdHJldmVyc2VOYW1lc1tjb2xvck5hbWVzW25hbWVdXSA9IG5hbWU7XG5cdH1cbn1cblxudmFyIGNzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG5cdHRvOiB7fSxcblx0Z2V0OiB7fVxufTtcblxuY3MuZ2V0ID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHR2YXIgcHJlZml4ID0gc3RyaW5nLnN1YnN0cmluZygwLCAzKS50b0xvd2VyQ2FzZSgpO1xuXHR2YXIgdmFsO1xuXHR2YXIgbW9kZWw7XG5cdHN3aXRjaCAocHJlZml4KSB7XG5cdFx0Y2FzZSAnaHNsJzpcblx0XHRcdHZhbCA9IGNzLmdldC5oc2woc3RyaW5nKTtcblx0XHRcdG1vZGVsID0gJ2hzbCc7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdod2InOlxuXHRcdFx0dmFsID0gY3MuZ2V0Lmh3YihzdHJpbmcpO1xuXHRcdFx0bW9kZWwgPSAnaHdiJztcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR2YWwgPSBjcy5nZXQucmdiKHN0cmluZyk7XG5cdFx0XHRtb2RlbCA9ICdyZ2InO1xuXHRcdFx0YnJlYWs7XG5cdH1cblxuXHRpZiAoIXZhbCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIHttb2RlbDogbW9kZWwsIHZhbHVlOiB2YWx9O1xufTtcblxuY3MuZ2V0LnJnYiA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0aWYgKCFzdHJpbmcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHZhciBhYmJyID0gL14jKFthLWYwLTldezMsNH0pJC9pO1xuXHR2YXIgaGV4ID0gL14jKFthLWYwLTldezZ9KShbYS1mMC05XXsyfSk/JC9pO1xuXHR2YXIgcmdiYSA9IC9ecmdiYT9cXChcXHMqKFsrLV0/XFxkKylcXHMqLFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvO1xuXHR2YXIgcGVyID0gL15yZ2JhP1xcKFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpJC87XG5cdHZhciBrZXl3b3JkID0gLyhcXEQrKS87XG5cblx0dmFyIHJnYiA9IFswLCAwLCAwLCAxXTtcblx0dmFyIG1hdGNoO1xuXHR2YXIgaTtcblx0dmFyIGhleEFscGhhO1xuXG5cdGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChoZXgpKSB7XG5cdFx0aGV4QWxwaGEgPSBtYXRjaFsyXTtcblx0XHRtYXRjaCA9IG1hdGNoWzFdO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3NsaWNlLXZzLXN1YnN0ci12cy1zdWJzdHJpbmctbWV0aG9kcy1sb25nLXN0cmluZy8xOVxuXHRcdFx0dmFyIGkyID0gaSAqIDI7XG5cdFx0XHRyZ2JbaV0gPSBwYXJzZUludChtYXRjaC5zbGljZShpMiwgaTIgKyAyKSwgMTYpO1xuXHRcdH1cblxuXHRcdGlmIChoZXhBbHBoYSkge1xuXHRcdFx0cmdiWzNdID0gcGFyc2VJbnQoaGV4QWxwaGEsIDE2KSAvIDI1NTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goYWJicikpIHtcblx0XHRtYXRjaCA9IG1hdGNoWzFdO1xuXHRcdGhleEFscGhhID0gbWF0Y2hbM107XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0XHRyZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpXSArIG1hdGNoW2ldLCAxNik7XG5cdFx0fVxuXG5cdFx0aWYgKGhleEFscGhhKSB7XG5cdFx0XHRyZ2JbM10gPSBwYXJzZUludChoZXhBbHBoYSArIGhleEFscGhhLCAxNikgLyAyNTU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKHJnYmEpKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiW2ldID0gcGFyc2VJbnQobWF0Y2hbaSArIDFdLCAwKTtcblx0XHR9XG5cblx0XHRpZiAobWF0Y2hbNF0pIHtcblx0XHRcdHJnYlszXSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuXHRcdH1cblx0fSBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChwZXIpKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiW2ldID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG1hdGNoW2kgKyAxXSkgKiAyLjU1KTtcblx0XHR9XG5cblx0XHRpZiAobWF0Y2hbNF0pIHtcblx0XHRcdHJnYlszXSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuXHRcdH1cblx0fSBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChrZXl3b3JkKSkge1xuXHRcdGlmIChtYXRjaFsxXSA9PT0gJ3RyYW5zcGFyZW50Jykge1xuXHRcdFx0cmV0dXJuIFswLCAwLCAwLCAwXTtcblx0XHR9XG5cblx0XHRyZ2IgPSBjb2xvck5hbWVzW21hdGNoWzFdXTtcblxuXHRcdGlmICghcmdiKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRyZ2JbM10gPSAxO1xuXG5cdFx0cmV0dXJuIHJnYjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRyZ2JbaV0gPSBjbGFtcChyZ2JbaV0sIDAsIDI1NSk7XG5cdH1cblx0cmdiWzNdID0gY2xhbXAocmdiWzNdLCAwLCAxKTtcblxuXHRyZXR1cm4gcmdiO1xufTtcblxuY3MuZ2V0LmhzbCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0aWYgKCFzdHJpbmcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHZhciBoc2wgPSAvXmhzbGE/XFwoXFxzKihbKy1dPyg/OlxcZHswLDN9XFwuKT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkkLztcblx0dmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGhzbCk7XG5cblx0aWYgKG1hdGNoKSB7XG5cdFx0dmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG5cdFx0dmFyIGggPSAocGFyc2VGbG9hdChtYXRjaFsxXSkgKyAzNjApICUgMzYwO1xuXHRcdHZhciBzID0gY2xhbXAocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCk7XG5cdFx0dmFyIGwgPSBjbGFtcChwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKTtcblx0XHR2YXIgYSA9IGNsYW1wKGlzTmFOKGFscGhhKSA/IDEgOiBhbHBoYSwgMCwgMSk7XG5cblx0XHRyZXR1cm4gW2gsIHMsIGwsIGFdO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59O1xuXG5jcy5nZXQuaHdiID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHRpZiAoIXN0cmluZykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIGh3YiA9IC9eaHdiXFwoXFxzKihbKy1dP1xcZHswLDN9KD86XFwuXFxkKyk/KSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkkLztcblx0dmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGh3Yik7XG5cblx0aWYgKG1hdGNoKSB7XG5cdFx0dmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG5cdFx0dmFyIGggPSAoKHBhcnNlRmxvYXQobWF0Y2hbMV0pICUgMzYwKSArIDM2MCkgJSAzNjA7XG5cdFx0dmFyIHcgPSBjbGFtcChwYXJzZUZsb2F0KG1hdGNoWzJdKSwgMCwgMTAwKTtcblx0XHR2YXIgYiA9IGNsYW1wKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApO1xuXHRcdHZhciBhID0gY2xhbXAoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcblx0XHRyZXR1cm4gW2gsIHcsIGIsIGFdO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59O1xuXG5jcy50by5oZXggPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZ2JhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXG5cdHJldHVybiAoXG5cdFx0JyMnICtcblx0XHRoZXhEb3VibGUocmdiYVswXSkgK1xuXHRcdGhleERvdWJsZShyZ2JhWzFdKSArXG5cdFx0aGV4RG91YmxlKHJnYmFbMl0pICtcblx0XHQocmdiYVszXSA8IDFcblx0XHRcdD8gKGhleERvdWJsZShNYXRoLnJvdW5kKHJnYmFbM10gKiAyNTUpKSlcblx0XHRcdDogJycpXG5cdCk7XG59O1xuXG5jcy50by5yZ2IgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZ2JhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXG5cdHJldHVybiByZ2JhLmxlbmd0aCA8IDQgfHwgcmdiYVszXSA9PT0gMVxuXHRcdD8gJ3JnYignICsgTWF0aC5yb3VuZChyZ2JhWzBdKSArICcsICcgKyBNYXRoLnJvdW5kKHJnYmFbMV0pICsgJywgJyArIE1hdGgucm91bmQocmdiYVsyXSkgKyAnKSdcblx0XHQ6ICdyZ2JhKCcgKyBNYXRoLnJvdW5kKHJnYmFbMF0pICsgJywgJyArIE1hdGgucm91bmQocmdiYVsxXSkgKyAnLCAnICsgTWF0aC5yb3VuZChyZ2JhWzJdKSArICcsICcgKyByZ2JhWzNdICsgJyknO1xufTtcblxuY3MudG8ucmdiLnBlcmNlbnQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZ2JhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXG5cdHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdIC8gMjU1ICogMTAwKTtcblx0dmFyIGcgPSBNYXRoLnJvdW5kKHJnYmFbMV0gLyAyNTUgKiAxMDApO1xuXHR2YXIgYiA9IE1hdGgucm91bmQocmdiYVsyXSAvIDI1NSAqIDEwMCk7XG5cblx0cmV0dXJuIHJnYmEubGVuZ3RoIDwgNCB8fCByZ2JhWzNdID09PSAxXG5cdFx0PyAncmdiKCcgKyByICsgJyUsICcgKyBnICsgJyUsICcgKyBiICsgJyUpJ1xuXHRcdDogJ3JnYmEoJyArIHIgKyAnJSwgJyArIGcgKyAnJSwgJyArIGIgKyAnJSwgJyArIHJnYmFbM10gKyAnKSc7XG59O1xuXG5jcy50by5oc2wgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBoc2xhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXHRyZXR1cm4gaHNsYS5sZW5ndGggPCA0IHx8IGhzbGFbM10gPT09IDFcblx0XHQ/ICdoc2woJyArIGhzbGFbMF0gKyAnLCAnICsgaHNsYVsxXSArICclLCAnICsgaHNsYVsyXSArICclKSdcblx0XHQ6ICdoc2xhKCcgKyBoc2xhWzBdICsgJywgJyArIGhzbGFbMV0gKyAnJSwgJyArIGhzbGFbMl0gKyAnJSwgJyArIGhzbGFbM10gKyAnKSc7XG59O1xuXG4vLyBod2IgaXMgYSBiaXQgZGlmZmVyZW50IHRoYW4gcmdiKGEpICYgaHNsKGEpIHNpbmNlIHRoZXJlIGlzIG5vIGFscGhhIHNwZWNpZmljIHN5bnRheFxuLy8gKGh3YiBoYXZlIGFscGhhIG9wdGlvbmFsICYgMSBpcyBkZWZhdWx0IHZhbHVlKVxuY3MudG8uaHdiID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgaHdiYSA9IHN3aXp6bGUoYXJndW1lbnRzKTtcblxuXHR2YXIgYSA9ICcnO1xuXHRpZiAoaHdiYS5sZW5ndGggPj0gNCAmJiBod2JhWzNdICE9PSAxKSB7XG5cdFx0YSA9ICcsICcgKyBod2JhWzNdO1xuXHR9XG5cblx0cmV0dXJuICdod2IoJyArIGh3YmFbMF0gKyAnLCAnICsgaHdiYVsxXSArICclLCAnICsgaHdiYVsyXSArICclJyArIGEgKyAnKSc7XG59O1xuXG5jcy50by5rZXl3b3JkID0gZnVuY3Rpb24gKHJnYikge1xuXHRyZXR1cm4gcmV2ZXJzZU5hbWVzW3JnYi5zbGljZSgwLCAzKV07XG59O1xuXG4vLyBoZWxwZXJzXG5mdW5jdGlvbiBjbGFtcChudW0sIG1pbiwgbWF4KSB7XG5cdHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bSksIG1heCk7XG59XG5cbmZ1bmN0aW9uIGhleERvdWJsZShudW0pIHtcblx0dmFyIHN0ciA9IG51bS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0cmV0dXJuIChzdHIubGVuZ3RoIDwgMikgPyAnMCcgKyBzdHIgOiBzdHI7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xvclN0cmluZyA9IHJlcXVpcmUoJ2NvbG9yLXN0cmluZycpO1xudmFyIGNvbnZlcnQgPSByZXF1aXJlKCdjb2xvci1jb252ZXJ0Jyk7XG5cbnZhciBfc2xpY2UgPSBbXS5zbGljZTtcblxudmFyIHNraXBwZWRNb2RlbHMgPSBbXG5cdC8vIHRvIGJlIGhvbmVzdCwgSSBkb24ndCByZWFsbHkgZmVlbCBsaWtlIGtleXdvcmQgYmVsb25ncyBpbiBjb2xvciBjb252ZXJ0LCBidXQgZWguXG5cdCdrZXl3b3JkJyxcblxuXHQvLyBncmF5IGNvbmZsaWN0cyB3aXRoIHNvbWUgbWV0aG9kIG5hbWVzLCBhbmQgaGFzIGl0cyBvd24gbWV0aG9kIGRlZmluZWQuXG5cdCdncmF5JyxcblxuXHQvLyBzaG91bGRuJ3QgcmVhbGx5IGJlIGluIGNvbG9yLWNvbnZlcnQgZWl0aGVyLi4uXG5cdCdoZXgnXG5dO1xuXG52YXIgaGFzaGVkTW9kZWxLZXlzID0ge307XG5PYmplY3Qua2V5cyhjb252ZXJ0KS5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xuXHRoYXNoZWRNb2RlbEtleXNbX3NsaWNlLmNhbGwoY29udmVydFttb2RlbF0ubGFiZWxzKS5zb3J0KCkuam9pbignJyldID0gbW9kZWw7XG59KTtcblxudmFyIGxpbWl0ZXJzID0ge307XG5cbmZ1bmN0aW9uIENvbG9yKG9iaiwgbW9kZWwpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbG9yKSkge1xuXHRcdHJldHVybiBuZXcgQ29sb3Iob2JqLCBtb2RlbCk7XG5cdH1cblxuXHRpZiAobW9kZWwgJiYgbW9kZWwgaW4gc2tpcHBlZE1vZGVscykge1xuXHRcdG1vZGVsID0gbnVsbDtcblx0fVxuXG5cdGlmIChtb2RlbCAmJiAhKG1vZGVsIGluIGNvbnZlcnQpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1vZGVsOiAnICsgbW9kZWwpO1xuXHR9XG5cblx0dmFyIGk7XG5cdHZhciBjaGFubmVscztcblxuXHRpZiAob2JqID09IG51bGwpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuXHRcdHRoaXMubW9kZWwgPSAncmdiJztcblx0XHR0aGlzLmNvbG9yID0gWzAsIDAsIDBdO1xuXHRcdHRoaXMudmFscGhhID0gMTtcblx0fSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdHRoaXMubW9kZWwgPSBvYmoubW9kZWw7XG5cdFx0dGhpcy5jb2xvciA9IG9iai5jb2xvci5zbGljZSgpO1xuXHRcdHRoaXMudmFscGhhID0gb2JqLnZhbHBoYTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuXHRcdHZhciByZXN1bHQgPSBjb2xvclN0cmluZy5nZXQob2JqKTtcblx0XHRpZiAocmVzdWx0ID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBjb2xvciBmcm9tIHN0cmluZzogJyArIG9iaik7XG5cdFx0fVxuXG5cdFx0dGhpcy5tb2RlbCA9IHJlc3VsdC5tb2RlbDtcblx0XHRjaGFubmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0uY2hhbm5lbHM7XG5cdFx0dGhpcy5jb2xvciA9IHJlc3VsdC52YWx1ZS5zbGljZSgwLCBjaGFubmVscyk7XG5cdFx0dGhpcy52YWxwaGEgPSB0eXBlb2YgcmVzdWx0LnZhbHVlW2NoYW5uZWxzXSA9PT0gJ251bWJlcicgPyByZXN1bHQudmFsdWVbY2hhbm5lbHNdIDogMTtcblx0fSBlbHNlIGlmIChvYmoubGVuZ3RoKSB7XG5cdFx0dGhpcy5tb2RlbCA9IG1vZGVsIHx8ICdyZ2InO1xuXHRcdGNoYW5uZWxzID0gY29udmVydFt0aGlzLm1vZGVsXS5jaGFubmVscztcblx0XHR2YXIgbmV3QXJyID0gX3NsaWNlLmNhbGwob2JqLCAwLCBjaGFubmVscyk7XG5cdFx0dGhpcy5jb2xvciA9IHplcm9BcnJheShuZXdBcnIsIGNoYW5uZWxzKTtcblx0XHR0aGlzLnZhbHBoYSA9IHR5cGVvZiBvYmpbY2hhbm5lbHNdID09PSAnbnVtYmVyJyA/IG9ialtjaGFubmVsc10gOiAxO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdudW1iZXInKSB7XG5cdFx0Ly8gdGhpcyBpcyBhbHdheXMgUkdCIC0gY2FuIGJlIGNvbnZlcnRlZCBsYXRlciBvbi5cblx0XHRvYmogJj0gMHhGRkZGRkY7XG5cdFx0dGhpcy5tb2RlbCA9ICdyZ2InO1xuXHRcdHRoaXMuY29sb3IgPSBbXG5cdFx0XHQob2JqID4+IDE2KSAmIDB4RkYsXG5cdFx0XHQob2JqID4+IDgpICYgMHhGRixcblx0XHRcdG9iaiAmIDB4RkZcblx0XHRdO1xuXHRcdHRoaXMudmFscGhhID0gMTtcblx0fSBlbHNlIHtcblx0XHR0aGlzLnZhbHBoYSA9IDE7XG5cblx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdFx0aWYgKCdhbHBoYScgaW4gb2JqKSB7XG5cdFx0XHRrZXlzLnNwbGljZShrZXlzLmluZGV4T2YoJ2FscGhhJyksIDEpO1xuXHRcdFx0dGhpcy52YWxwaGEgPSB0eXBlb2Ygb2JqLmFscGhhID09PSAnbnVtYmVyJyA/IG9iai5hbHBoYSA6IDA7XG5cdFx0fVxuXG5cdFx0dmFyIGhhc2hlZEtleXMgPSBrZXlzLnNvcnQoKS5qb2luKCcnKTtcblx0XHRpZiAoIShoYXNoZWRLZXlzIGluIGhhc2hlZE1vZGVsS2V5cykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIGNvbG9yIGZyb20gb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkob2JqKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5tb2RlbCA9IGhhc2hlZE1vZGVsS2V5c1toYXNoZWRLZXlzXTtcblxuXHRcdHZhciBsYWJlbHMgPSBjb252ZXJ0W3RoaXMubW9kZWxdLmxhYmVscztcblx0XHR2YXIgY29sb3IgPSBbXTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb2xvci5wdXNoKG9ialtsYWJlbHNbaV1dKTtcblx0XHR9XG5cblx0XHR0aGlzLmNvbG9yID0gemVyb0FycmF5KGNvbG9yKTtcblx0fVxuXG5cdC8vIHBlcmZvcm0gbGltaXRhdGlvbnMgKGNsYW1waW5nLCBldGMuKVxuXHRpZiAobGltaXRlcnNbdGhpcy5tb2RlbF0pIHtcblx0XHRjaGFubmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0uY2hhbm5lbHM7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGNoYW5uZWxzOyBpKyspIHtcblx0XHRcdHZhciBsaW1pdCA9IGxpbWl0ZXJzW3RoaXMubW9kZWxdW2ldO1xuXHRcdFx0aWYgKGxpbWl0KSB7XG5cdFx0XHRcdHRoaXMuY29sb3JbaV0gPSBsaW1pdCh0aGlzLmNvbG9yW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR0aGlzLnZhbHBoYSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHRoaXMudmFscGhhKSk7XG5cblx0aWYgKE9iamVjdC5mcmVlemUpIHtcblx0XHRPYmplY3QuZnJlZXplKHRoaXMpO1xuXHR9XG59XG5cbkNvbG9yLnByb3RvdHlwZSA9IHtcblx0dG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zdHJpbmcoKTtcblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpc1t0aGlzLm1vZGVsXSgpO1xuXHR9LFxuXG5cdHN0cmluZzogZnVuY3Rpb24gKHBsYWNlcykge1xuXHRcdHZhciBzZWxmID0gdGhpcy5tb2RlbCBpbiBjb2xvclN0cmluZy50byA/IHRoaXMgOiB0aGlzLnJnYigpO1xuXHRcdHNlbGYgPSBzZWxmLnJvdW5kKHR5cGVvZiBwbGFjZXMgPT09ICdudW1iZXInID8gcGxhY2VzIDogMSk7XG5cdFx0dmFyIGFyZ3MgPSBzZWxmLnZhbHBoYSA9PT0gMSA/IHNlbGYuY29sb3IgOiBzZWxmLmNvbG9yLmNvbmNhdCh0aGlzLnZhbHBoYSk7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLnRvW3NlbGYubW9kZWxdKGFyZ3MpO1xuXHR9LFxuXG5cdHBlcmNlbnRTdHJpbmc6IGZ1bmN0aW9uIChwbGFjZXMpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXMucmdiKCkucm91bmQodHlwZW9mIHBsYWNlcyA9PT0gJ251bWJlcicgPyBwbGFjZXMgOiAxKTtcblx0XHR2YXIgYXJncyA9IHNlbGYudmFscGhhID09PSAxID8gc2VsZi5jb2xvciA6IHNlbGYuY29sb3IuY29uY2F0KHRoaXMudmFscGhhKTtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcudG8ucmdiLnBlcmNlbnQoYXJncyk7XG5cdH0sXG5cblx0YXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWxwaGEgPT09IDEgPyB0aGlzLmNvbG9yLnNsaWNlKCkgOiB0aGlzLmNvbG9yLmNvbmNhdCh0aGlzLnZhbHBoYSk7XG5cdH0sXG5cblx0b2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdHZhciBjaGFubmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0uY2hhbm5lbHM7XG5cdFx0dmFyIGxhYmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0ubGFiZWxzO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjaGFubmVsczsgaSsrKSB7XG5cdFx0XHRyZXN1bHRbbGFiZWxzW2ldXSA9IHRoaXMuY29sb3JbaV07XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMudmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZXN1bHQuYWxwaGEgPSB0aGlzLnZhbHBoYTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdHVuaXRBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSB0aGlzLnJnYigpLmNvbG9yO1xuXHRcdHJnYlswXSAvPSAyNTU7XG5cdFx0cmdiWzFdIC89IDI1NTtcblx0XHRyZ2JbMl0gLz0gMjU1O1xuXG5cdFx0aWYgKHRoaXMudmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZ2IucHVzaCh0aGlzLnZhbHBoYSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJnYjtcblx0fSxcblxuXHR1bml0T2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IHRoaXMucmdiKCkub2JqZWN0KCk7XG5cdFx0cmdiLnIgLz0gMjU1O1xuXHRcdHJnYi5nIC89IDI1NTtcblx0XHRyZ2IuYiAvPSAyNTU7XG5cblx0XHRpZiAodGhpcy52YWxwaGEgIT09IDEpIHtcblx0XHRcdHJnYi5hbHBoYSA9IHRoaXMudmFscGhhO1xuXHRcdH1cblxuXHRcdHJldHVybiByZ2I7XG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uIChwbGFjZXMpIHtcblx0XHRwbGFjZXMgPSBNYXRoLm1heChwbGFjZXMgfHwgMCwgMCk7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcih0aGlzLmNvbG9yLm1hcChyb3VuZFRvUGxhY2UocGxhY2VzKSkuY29uY2F0KHRoaXMudmFscGhhKSwgdGhpcy5tb2RlbCk7XG5cdH0sXG5cblx0YWxwaGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcih0aGlzLmNvbG9yLmNvbmNhdChNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2YWwpKSksIHRoaXMubW9kZWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnZhbHBoYTtcblx0fSxcblxuXHQvLyByZ2Jcblx0cmVkOiBnZXRzZXQoJ3JnYicsIDAsIG1heGZuKDI1NSkpLFxuXHRncmVlbjogZ2V0c2V0KCdyZ2InLCAxLCBtYXhmbigyNTUpKSxcblx0Ymx1ZTogZ2V0c2V0KCdyZ2InLCAyLCBtYXhmbigyNTUpKSxcblxuXHRodWU6IGdldHNldChbJ2hzbCcsICdoc3YnLCAnaHNsJywgJ2h3YicsICdoY2cnXSwgMCwgZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gKCh2YWwgJSAzNjApICsgMzYwKSAlIDM2MDsgfSksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYnJhY2Utc3R5bGVcblxuXHRzYXR1cmF0aW9ubDogZ2V0c2V0KCdoc2wnLCAxLCBtYXhmbigxMDApKSxcblx0bGlnaHRuZXNzOiBnZXRzZXQoJ2hzbCcsIDIsIG1heGZuKDEwMCkpLFxuXG5cdHNhdHVyYXRpb252OiBnZXRzZXQoJ2hzdicsIDEsIG1heGZuKDEwMCkpLFxuXHR2YWx1ZTogZ2V0c2V0KCdoc3YnLCAyLCBtYXhmbigxMDApKSxcblxuXHRjaHJvbWE6IGdldHNldCgnaGNnJywgMSwgbWF4Zm4oMTAwKSksXG5cdGdyYXk6IGdldHNldCgnaGNnJywgMiwgbWF4Zm4oMTAwKSksXG5cblx0d2hpdGU6IGdldHNldCgnaHdiJywgMSwgbWF4Zm4oMTAwKSksXG5cdHdibGFjazogZ2V0c2V0KCdod2InLCAyLCBtYXhmbigxMDApKSxcblxuXHRjeWFuOiBnZXRzZXQoJ2NteWsnLCAwLCBtYXhmbigxMDApKSxcblx0bWFnZW50YTogZ2V0c2V0KCdjbXlrJywgMSwgbWF4Zm4oMTAwKSksXG5cdHllbGxvdzogZ2V0c2V0KCdjbXlrJywgMiwgbWF4Zm4oMTAwKSksXG5cdGJsYWNrOiBnZXRzZXQoJ2NteWsnLCAzLCBtYXhmbigxMDApKSxcblxuXHR4OiBnZXRzZXQoJ3h5eicsIDAsIG1heGZuKDEwMCkpLFxuXHR5OiBnZXRzZXQoJ3h5eicsIDEsIG1heGZuKDEwMCkpLFxuXHR6OiBnZXRzZXQoJ3h5eicsIDIsIG1heGZuKDEwMCkpLFxuXG5cdGw6IGdldHNldCgnbGFiJywgMCwgbWF4Zm4oMTAwKSksXG5cdGE6IGdldHNldCgnbGFiJywgMSksXG5cdGI6IGdldHNldCgnbGFiJywgMiksXG5cblx0a2V5d29yZDogZnVuY3Rpb24gKHZhbCkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKHZhbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnZlcnRbdGhpcy5tb2RlbF0ua2V5d29yZCh0aGlzLmNvbG9yKTtcblx0fSxcblxuXHRoZXg6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcih2YWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb2xvclN0cmluZy50by5oZXgodGhpcy5yZ2IoKS5yb3VuZCgpLmNvbG9yKTtcblx0fSxcblxuXHRyZ2JOdW1iZXI6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKS5jb2xvcjtcblx0XHRyZXR1cm4gKChyZ2JbMF0gJiAweEZGKSA8PCAxNikgfCAoKHJnYlsxXSAmIDB4RkYpIDw8IDgpIHwgKHJnYlsyXSAmIDB4RkYpO1xuXHR9LFxuXG5cdGx1bWlub3NpdHk6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG5cdFx0dmFyIHJnYiA9IHRoaXMucmdiKCkuY29sb3I7XG5cblx0XHR2YXIgbHVtID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjaGFuID0gcmdiW2ldIC8gMjU1O1xuXHRcdFx0bHVtW2ldID0gKGNoYW4gPD0gMC4wMzkyOCkgPyBjaGFuIC8gMTIuOTIgOiBNYXRoLnBvdygoKGNoYW4gKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDAuMjEyNiAqIGx1bVswXSArIDAuNzE1MiAqIGx1bVsxXSArIDAuMDcyMiAqIGx1bVsyXTtcblx0fSxcblxuXHRjb250cmFzdDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jY29udHJhc3QtcmF0aW9kZWZcblx0XHR2YXIgbHVtMSA9IHRoaXMubHVtaW5vc2l0eSgpO1xuXHRcdHZhciBsdW0yID0gY29sb3IyLmx1bWlub3NpdHkoKTtcblxuXHRcdGlmIChsdW0xID4gbHVtMikge1xuXHRcdFx0cmV0dXJuIChsdW0xICsgMC4wNSkgLyAobHVtMiArIDAuMDUpO1xuXHRcdH1cblxuXHRcdHJldHVybiAobHVtMiArIDAuMDUpIC8gKGx1bTEgKyAwLjA1KTtcblx0fSxcblxuXHRsZXZlbDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdHZhciBjb250cmFzdFJhdGlvID0gdGhpcy5jb250cmFzdChjb2xvcjIpO1xuXHRcdGlmIChjb250cmFzdFJhdGlvID49IDcuMSkge1xuXHRcdFx0cmV0dXJuICdBQUEnO1xuXHRcdH1cblxuXHRcdHJldHVybiAoY29udHJhc3RSYXRpbyA+PSA0LjUpID8gJ0FBJyA6ICcnO1xuXHR9LFxuXG5cdGlzRGFyazogZnVuY3Rpb24gKCkge1xuXHRcdC8vIFlJUSBlcXVhdGlvbiBmcm9tIGh0dHA6Ly8yNHdheXMub3JnLzIwMTAvY2FsY3VsYXRpbmctY29sb3ItY29udHJhc3Rcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKS5jb2xvcjtcblx0XHR2YXIgeWlxID0gKHJnYlswXSAqIDI5OSArIHJnYlsxXSAqIDU4NyArIHJnYlsyXSAqIDExNCkgLyAxMDAwO1xuXHRcdHJldHVybiB5aXEgPCAxMjg7XG5cdH0sXG5cblx0aXNMaWdodDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAhdGhpcy5pc0RhcmsoKTtcblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiLmNvbG9yW2ldID0gMjU1IC0gcmdiLmNvbG9yW2ldO1xuXHRcdH1cblx0XHRyZXR1cm4gcmdiO1xuXHR9LFxuXG5cdGxpZ2h0ZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLmhzbCgpO1xuXHRcdGhzbC5jb2xvclsyXSArPSBoc2wuY29sb3JbMl0gKiByYXRpbztcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdGRhcmtlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMuaHNsKCk7XG5cdFx0aHNsLmNvbG9yWzJdIC09IGhzbC5jb2xvclsyXSAqIHJhdGlvO1xuXHRcdHJldHVybiBoc2w7XG5cdH0sXG5cblx0c2F0dXJhdGU6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLmhzbCgpO1xuXHRcdGhzbC5jb2xvclsxXSArPSBoc2wuY29sb3JbMV0gKiByYXRpbztcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdGRlc2F0dXJhdGU6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLmhzbCgpO1xuXHRcdGhzbC5jb2xvclsxXSAtPSBoc2wuY29sb3JbMV0gKiByYXRpbztcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdHdoaXRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGh3YiA9IHRoaXMuaHdiKCk7XG5cdFx0aHdiLmNvbG9yWzFdICs9IGh3Yi5jb2xvclsxXSAqIHJhdGlvO1xuXHRcdHJldHVybiBod2I7XG5cdH0sXG5cblx0YmxhY2tlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGh3YiA9IHRoaXMuaHdiKCk7XG5cdFx0aHdiLmNvbG9yWzJdICs9IGh3Yi5jb2xvclsyXSAqIHJhdGlvO1xuXHRcdHJldHVybiBod2I7XG5cdH0sXG5cblx0Z3JheXNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmF5c2NhbGUjQ29udmVydGluZ19jb2xvcl90b19ncmF5c2NhbGVcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKS5jb2xvcjtcblx0XHR2YXIgdmFsID0gcmdiWzBdICogMC4zICsgcmdiWzFdICogMC41OSArIHJnYlsyXSAqIDAuMTE7XG5cdFx0cmV0dXJuIENvbG9yLnJnYih2YWwsIHZhbCwgdmFsKTtcblx0fSxcblxuXHRmYWRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHRyZXR1cm4gdGhpcy5hbHBoYSh0aGlzLnZhbHBoYSAtICh0aGlzLnZhbHBoYSAqIHJhdGlvKSk7XG5cdH0sXG5cblx0b3BhcXVlcjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWxwaGEodGhpcy52YWxwaGEgKyAodGhpcy52YWxwaGEgKiByYXRpbykpO1xuXHR9LFxuXG5cdHJvdGF0ZTogZnVuY3Rpb24gKGRlZ3JlZXMpIHtcblx0XHR2YXIgaHNsID0gdGhpcy5oc2woKTtcblx0XHR2YXIgaHVlID0gaHNsLmNvbG9yWzBdO1xuXHRcdGh1ZSA9IChodWUgKyBkZWdyZWVzKSAlIDM2MDtcblx0XHRodWUgPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuXHRcdGhzbC5jb2xvclswXSA9IGh1ZTtcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdG1peDogZnVuY3Rpb24gKG1peGluQ29sb3IsIHdlaWdodCkge1xuXHRcdC8vIHBvcnRlZCBmcm9tIHNhc3MgaW1wbGVtZW50YXRpb24gaW4gQ1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzL2xpYnNhc3MvYmxvYi8wZTZiNGEyODUwMDkyMzU2YWEzZWNlMDdjNmIyNDlmMDIyMWNhY2VkL2Z1bmN0aW9ucy5jcHAjTDIwOVxuXHRcdGlmICghbWl4aW5Db2xvciB8fCAhbWl4aW5Db2xvci5yZ2IpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgdG8gXCJtaXhcIiB3YXMgbm90IGEgQ29sb3IgaW5zdGFuY2UsIGJ1dCByYXRoZXIgYW4gaW5zdGFuY2Ugb2YgJyArIHR5cGVvZiBtaXhpbkNvbG9yKTtcblx0XHR9XG5cdFx0dmFyIGNvbG9yMSA9IG1peGluQ29sb3IucmdiKCk7XG5cdFx0dmFyIGNvbG9yMiA9IHRoaXMucmdiKCk7XG5cdFx0dmFyIHAgPSB3ZWlnaHQgPT09IHVuZGVmaW5lZCA/IDAuNSA6IHdlaWdodDtcblxuXHRcdHZhciB3ID0gMiAqIHAgLSAxO1xuXHRcdHZhciBhID0gY29sb3IxLmFscGhhKCkgLSBjb2xvcjIuYWxwaGEoKTtcblxuXHRcdHZhciB3MSA9ICgoKHcgKiBhID09PSAtMSkgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuXHRcdHZhciB3MiA9IDEgLSB3MTtcblxuXHRcdHJldHVybiBDb2xvci5yZ2IoXG5cdFx0XHRcdHcxICogY29sb3IxLnJlZCgpICsgdzIgKiBjb2xvcjIucmVkKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmdyZWVuKCkgKyB3MiAqIGNvbG9yMi5ncmVlbigpLFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5ibHVlKCkgKyB3MiAqIGNvbG9yMi5ibHVlKCksXG5cdFx0XHRcdGNvbG9yMS5hbHBoYSgpICogcCArIGNvbG9yMi5hbHBoYSgpICogKDEgLSBwKSk7XG5cdH1cbn07XG5cbi8vIG1vZGVsIGNvbnZlcnNpb24gbWV0aG9kcyBhbmQgc3RhdGljIGNvbnN0cnVjdG9yc1xuT2JqZWN0LmtleXMoY29udmVydCkuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcblx0aWYgKHNraXBwZWRNb2RlbHMuaW5kZXhPZihtb2RlbCkgIT09IC0xKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIGNoYW5uZWxzID0gY29udmVydFttb2RlbF0uY2hhbm5lbHM7XG5cblx0Ly8gY29udmVyc2lvbiBtZXRob2RzXG5cdENvbG9yLnByb3RvdHlwZVttb2RlbF0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMubW9kZWwgPT09IG1vZGVsKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKHRoaXMpO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKGFyZ3VtZW50cywgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHZhciBuZXdBbHBoYSA9IHR5cGVvZiBhcmd1bWVudHNbY2hhbm5lbHNdID09PSAnbnVtYmVyJyA/IGNoYW5uZWxzIDogdGhpcy52YWxwaGE7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcihhc3NlcnRBcnJheShjb252ZXJ0W3RoaXMubW9kZWxdW21vZGVsXS5yYXcodGhpcy5jb2xvcikpLmNvbmNhdChuZXdBbHBoYSksIG1vZGVsKTtcblx0fTtcblxuXHQvLyAnc3RhdGljJyBjb25zdHJ1Y3Rpb24gbWV0aG9kc1xuXHRDb2xvclttb2RlbF0gPSBmdW5jdGlvbiAoY29sb3IpIHtcblx0XHRpZiAodHlwZW9mIGNvbG9yID09PSAnbnVtYmVyJykge1xuXHRcdFx0Y29sb3IgPSB6ZXJvQXJyYXkoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSwgY2hhbm5lbHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IENvbG9yKGNvbG9yLCBtb2RlbCk7XG5cdH07XG59KTtcblxuZnVuY3Rpb24gcm91bmRUbyhudW0sIHBsYWNlcykge1xuXHRyZXR1cm4gTnVtYmVyKG51bS50b0ZpeGVkKHBsYWNlcykpO1xufVxuXG5mdW5jdGlvbiByb3VuZFRvUGxhY2UocGxhY2VzKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobnVtKSB7XG5cdFx0cmV0dXJuIHJvdW5kVG8obnVtLCBwbGFjZXMpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRzZXQobW9kZWwsIGNoYW5uZWwsIG1vZGlmaWVyKSB7XG5cdG1vZGVsID0gQXJyYXkuaXNBcnJheShtb2RlbCkgPyBtb2RlbCA6IFttb2RlbF07XG5cblx0bW9kZWwuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuXHRcdChsaW1pdGVyc1ttXSB8fCAobGltaXRlcnNbbV0gPSBbXSkpW2NoYW5uZWxdID0gbW9kaWZpZXI7XG5cdH0pO1xuXG5cdG1vZGVsID0gbW9kZWxbMF07XG5cblx0cmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcblx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdGlmIChtb2RpZmllcikge1xuXHRcdFx0XHR2YWwgPSBtb2RpZmllcih2YWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSB0aGlzW21vZGVsXSgpO1xuXHRcdFx0cmVzdWx0LmNvbG9yW2NoYW5uZWxdID0gdmFsO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRyZXN1bHQgPSB0aGlzW21vZGVsXSgpLmNvbG9yW2NoYW5uZWxdO1xuXHRcdGlmIChtb2RpZmllcikge1xuXHRcdFx0cmVzdWx0ID0gbW9kaWZpZXIocmVzdWx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xufVxuXG5mdW5jdGlvbiBtYXhmbihtYXgpIHtcblx0cmV0dXJuIGZ1bmN0aW9uICh2KSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKG1heCwgdikpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBcnJheSh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWxdO1xufVxuXG5mdW5jdGlvbiB6ZXJvQXJyYXkoYXJyLCBsZW5ndGgpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdGlmICh0eXBlb2YgYXJyW2ldICE9PSAnbnVtYmVyJykge1xuXHRcdFx0YXJyW2ldID0gMDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG52YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIEJJTkRfRkxBRyA9IDEsXG4gICAgQklORF9LRVlfRkxBRyA9IDIsXG4gICAgQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgQ1VSUllfRkxBRyA9IDgsXG4gICAgQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgIFBBUlRJQUxfRkxBRyA9IDMyLFxuICAgIFBBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgIEFSWV9GTEFHID0gMTI4LFxuICAgIFJFQVJHX0ZMQUcgPSAyNTYsXG4gICAgRkxJUF9GTEFHID0gNTEyO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG52YXIgd3JhcEZsYWdzID0gW1xuICBbJ2FyeScsIEFSWV9GTEFHXSxcbiAgWydiaW5kJywgQklORF9GTEFHXSxcbiAgWydiaW5kS2V5JywgQklORF9LRVlfRkxBR10sXG4gIFsnY3VycnknLCBDVVJSWV9GTEFHXSxcbiAgWydjdXJyeVJpZ2h0JywgQ1VSUllfUklHSFRfRkxBR10sXG4gIFsnZmxpcCcsIEZMSVBfRkxBR10sXG4gIFsncGFydGlhbCcsIFBBUlRJQUxfRkxBR10sXG4gIFsncGFydGlhbFJpZ2h0JywgUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgWydyZWFyZycsIFJFQVJHX0ZMQUddXG5dO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG52YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gKi9cbmZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IDA7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICByZXN1bHQrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCBpbiBJRSA8IDkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3NcbiAgLy8gZGVzcGl0ZSBoYXZpbmcgaW1wcm9wZXJseSBkZWZpbmVkIGB0b1N0cmluZ2AgbWV0aG9kcy5cbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSAhISh2YWx1ZSArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKiBVc2VkIHRvIHNldCBgdG9TdHJpbmdgIG1ldGhvZHMuICovXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5JyksXG4gICAgICBuYW1lID0gZ2V0TmF0aXZlLm5hbWU7XG5cbiAgcmV0dXJuIChuYW1lICYmIG5hbWUubGVuZ3RoID4gMikgPyBmdW5jIDogdW5kZWZpbmVkO1xufSgpKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDcmVhdGUocHJvdG8pIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHByb3RvKSA/IG9iamVjdENyZWF0ZShwcm90bykgOiB7fTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICovXG5mdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgfVxuICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgIH1cbiAgfVxuICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgfVxuICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgfVxuICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgQklORF9GTEFHLFxuICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgIH1cbiAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgIH1cbiAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgPyBbXVxuICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgfVxuICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIEFSWV9GTEFHLFxuICAgICAgaXNCaW5kID0gYml0bWFzayAmIEJJTkRfRkxBRyxcbiAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBCSU5EX0tFWV9GTEFHLFxuICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChDVVJSWV9GTEFHIHwgQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgRkxJUF9GTEFHLFxuICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICB9XG4gICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgfVxuICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgIH1cbiAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgIH1cbiAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICApO1xuICAgIH1cbiAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoYXJnUG9zKSB7XG4gICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICB9XG4gICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICB9XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgQklORF9GTEFHLFxuICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBDVVJSWV9GTEFHLFxuICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFBBUlRJQUxfRkxBRyA6IFBBUlRJQUxfUklHSFRfRkxBRyk7XG4gIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gUEFSVElBTF9SSUdIVF9GTEFHIDogUEFSVElBTF9GTEFHKTtcblxuICBpZiAoIShiaXRtYXNrICYgQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICBiaXRtYXNrICY9IH4oQklORF9GTEFHIHwgQklORF9LRVlfRkxBRyk7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMoZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KTtcbiAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIFRoZSBiaXRtYXNrIG1heSBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOlxuICogICAgIDEgLSBgXy5iaW5kYFxuICogICAgIDIgLSBgXy5iaW5kS2V5YFxuICogICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICogICAgIDggLSBgXy5jdXJyeWBcbiAqICAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAqICAgIDMyIC0gYF8ucGFydGlhbGBcbiAqICAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICogICAxMjggLSBgXy5yZWFyZ2BcbiAqICAgMjU2IC0gYF8uYXJ5YFxuICogICA1MTIgLSBgXy5mbGlwYFxuICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIEJJTkRfS0VZX0ZMQUc7XG4gIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBiaXRtYXNrICY9IH4oUEFSVElBTF9GTEFHIHwgUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gIGlmIChiaXRtYXNrICYgUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBuZXdEYXRhID0gW1xuICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gIF07XG5cbiAgZnVuYyA9IG5ld0RhdGFbMF07XG4gIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PSBudWxsXG4gICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChDVVJSWV9GTEFHIHwgQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICBiaXRtYXNrICY9IH4oQ1VSUllfRkxBRyB8IENVUlJZX1JJR0hUX0ZMQUcpO1xuICB9XG4gIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IEJJTkRfRkxBRykge1xuICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IENVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKEJJTkRfRkxBRyB8IFBBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICB9XG4gIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICB2YXIgb2JqZWN0ID0gZnVuYztcbiAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICovXG5mdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbn1cblxuLyoqXG4gKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aCxcbiAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAqL1xudmFyIHNldFdyYXBUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24od3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkod3JhcHBlciwgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gKiBpcyBub3Qgc3VmZmljaWVudC5cbiAqXG4gKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gKiAgIHJldHVybiBbYSwgYiwgY107XG4gKiB9O1xuICpcbiAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICpcbiAqIGN1cnJpZWQoMSkoMikoMyk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBjdXJyaWVkKDEsIDIpKDMpO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKlxuICogY3VycmllZCgxLCAyLCAzKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICpcbiAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKi9cbmZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIENVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG5jdXJyeS5wbGFjZWhvbGRlciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGN1cnJ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnl1djJyZ2IgPSB5dXYycmdiO1xuZXhwb3J0cy5yZ2IyeXV2ID0gcmdiMnl1djtcblxuZnVuY3Rpb24geXV2MnJnYih5dXYpIHtcbiAgdmFyIHkgPSB5dXZbMF0sXG4gICAgICB1ID0geXV2WzFdLFxuICAgICAgdiA9IHl1dlsyXTtcbiAgdmFyIHIsIGcsIGI7XG4gIHIgPSB5ICogMSArIHUgKiAwICsgdiAqIDEuMTM5ODM7XG4gIGcgPSB5ICogMSArIHUgKiAtMC4zOTQ2NSArIHYgKiAtMC41ODA2O1xuICBiID0geSAqIDEgKyB1ICogMi4wMjMxMSArIHYgKiAwO1xuICByID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgciksIDEpO1xuICBnID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgZyksIDEpO1xuICBiID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgYiksIDEpO1xuICByZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufVxuXG5mdW5jdGlvbiByZ2IyeXV2KHJnYikge1xuICB2YXIgciA9IHJnYlswXSAvIDI1NSxcbiAgICAgIGcgPSByZ2JbMV0gLyAyNTUsXG4gICAgICBiID0gcmdiWzJdIC8gMjU1O1xuICB2YXIgeSA9IHIgKiAwLjI5OSArIGcgKiAwLjU4NyArIGIgKiAwLjExNDtcbiAgdmFyIHUgPSByICogLTAuMTQ3MTMgKyBnICogLTAuMjg4ODYgKyBiICogMC40MzY7XG4gIHZhciB2ID0gciAqIDAuNjE1ICsgZyAqIC0wLjUxNDk5ICsgYiAqIC0wLjEwMDAxO1xuICByZXR1cm4gW3ksIHUsIHZdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqYjJ4dmNrTnZiblpsY25SbGNuTXVkSE1pWFN3aWJtRnRaWE1pT2xzaWVYVjJNbkpuWWlJc0lubDFkaUlzSW5raUxDSjFJaXdpZGlJc0luSWlMQ0puSWl3aVlpSXNJazFoZEdnaUxDSnRhVzRpTENKdFlYZ2lMQ0p5WjJJeWVYVjJJaXdpY21kaUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenRCUVVWUExGTkJRVk5CTEU5QlFWUXNRMEZCYVVKRExFZEJRV3BDTEVWQlFXOURPMEZCUTNwRExFMUJRVTFETEVOQlFVTXNSMEZCUjBRc1IwRkJSeXhEUVVGRExFTkJRVVFzUTBGQllqdEJRVUZCTEUxQlEwVkZMRU5CUVVNc1IwRkJSMFlzUjBGQlJ5eERRVUZETEVOQlFVUXNRMEZFVkR0QlFVRkJMRTFCUlVWSExFTkJRVU1zUjBGQlIwZ3NSMEZCUnl4RFFVRkRMRU5CUVVRc1EwRkdWRHRCUVVkQkxFMUJRVWxKTEVOQlFVb3NSVUZCVDBNc1EwRkJVQ3hGUVVGVlF5eERRVUZXTzBGQlJVRkdMRVZCUVVGQkxFTkJRVU1zUjBGQlIwZ3NRMEZCUXl4SFFVRkhMRU5CUVVvc1IwRkJVVU1zUTBGQlF5eEhRVUZITEVOQlFWb3NSMEZCWjBKRExFTkJRVU1zUjBGQlJ5eFBRVUY0UWp0QlFVTkJSU3hGUVVGQlFTeERRVUZETEVkQlFVZEtMRU5CUVVNc1IwRkJSeXhEUVVGS0xFZEJRVkZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVdJc1IwRkJkVUpETEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVdoRE8wRkJRMEZITEVWQlFVRkJMRU5CUVVNc1IwRkJSMHdzUTBGQlF5eEhRVUZITEVOQlFVb3NSMEZCVVVNc1EwRkJReXhIUVVGSExFOUJRVm9zUjBGQmMwSkRMRU5CUVVNc1IwRkJSeXhEUVVFNVFqdEJRVVZCUXl4RlFVRkJRU3hEUVVGRExFZEJRVWRITEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVFJDeEpRVUZKTEVOQlFVTkZMRWRCUVV3c1EwRkJVeXhEUVVGVUxFVkJRVmxNTEVOQlFWb3NRMEZCVkN4RlFVRjVRaXhEUVVGNlFpeERRVUZLTzBGQlEwRkRMRVZCUVVGQkxFTkJRVU1zUjBGQlIwVXNTVUZCU1N4RFFVRkRReXhIUVVGTUxFTkJRVk5FTEVsQlFVa3NRMEZCUTBVc1IwRkJUQ3hEUVVGVExFTkJRVlFzUlVGQldVb3NRMEZCV2l4RFFVRlVMRVZCUVhsQ0xFTkJRWHBDTEVOQlFVbzdRVUZEUVVNc1JVRkJRVUVzUTBGQlF5eEhRVUZIUXl4SlFVRkpMRU5CUVVORExFZEJRVXdzUTBGQlUwUXNTVUZCU1N4RFFVRkRSU3hIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaU0N4RFFVRmFMRU5CUVZRc1JVRkJlVUlzUTBGQmVrSXNRMEZCU2p0QlFVVkJMRk5CUVU4c1EwRkJRMFlzUTBGQlF5eEhRVUZITEVkQlFVd3NSVUZCVlVNc1EwRkJReXhIUVVGSExFZEJRV1FzUlVGQmJVSkRMRU5CUVVNc1IwRkJSeXhIUVVGMlFpeERRVUZRTzBGQlEwUTdPMEZCUlUwc1UwRkJVMGtzVDBGQlZDeERRVUZwUWtNc1IwRkJha0lzUlVGQmIwTTdRVUZEZWtNc1RVRkJUVkFzUTBGQlF5eEhRVUZIVHl4SFFVRkhMRU5CUVVNc1EwRkJSQ3hEUVVGSUxFZEJRVk1zUjBGQmJrSTdRVUZCUVN4TlFVTkZUaXhEUVVGRExFZEJRVWROTEVkQlFVY3NRMEZCUXl4RFFVRkVMRU5CUVVnc1IwRkJVeXhIUVVSbU8wRkJRVUVzVFVGRlJVd3NRMEZCUXl4SFFVRkhTeXhIUVVGSExFTkJRVU1zUTBGQlJDeERRVUZJTEVkQlFWTXNSMEZHWmp0QlFVbEJMRTFCUVUxV0xFTkJRVU1zUjBGQlIwY3NRMEZCUXl4SFFVRkhMRXRCUVVvc1IwRkJXVU1zUTBGQlF5eEhRVUZITEV0QlFXaENMRWRCUVhkQ1F5eERRVUZETEVkQlFVY3NTMEZCZEVNN1FVRkRRU3hOUVVGTlNpeERRVUZETEVkQlFVZEZMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVXdzUjBGQlpVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJjRUlzUjBGQk9FSkRMRU5CUVVNc1IwRkJSeXhMUVVFMVF6dEJRVU5CTEUxQlFVMUlMRU5CUVVNc1IwRkJSME1zUTBGQlF5eEhRVUZITEV0QlFVb3NSMEZCV1VNc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQmFrSXNSMEZCTWtKRExFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFURkRPMEZCUlVFc1UwRkJUeXhEUVVGRFRDeERRVUZFTEVWQlFVbERMRU5CUVVvc1JVRkJUME1zUTBGQlVDeERRVUZRTzBGQlEwUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdkSGx3WlNCRGIyeHZjaUE5SUZ0dWRXMWlaWElzSUc1MWJXSmxjaXdnYm5WdFltVnlYVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhsMWRqSnlaMklvZVhWMk9pQkRiMnh2Y2lrNklFTnZiRzl5SUh0Y2JpQWdZMjl1YzNRZ2VTQTlJSGwxZGxzd1hTeGNiaUFnSUNCMUlEMGdlWFYyV3pGZExGeHVJQ0FnSUhZZ1BTQjVkWFpiTWwwN1hHNGdJR3hsZENCeUxDQm5MQ0JpTzF4dVhHNGdJSElnUFNCNUlDb2dNU0FySUhVZ0tpQXdJQ3NnZGlBcUlERXVNVE01T0RNN1hHNGdJR2NnUFNCNUlDb2dNU0FySUhVZ0tpQXRNQzR6T1RRMk5TQXJJSFlnS2lBdE1DNDFPREEyTzF4dUlDQmlJRDBnZVNBcUlERWdLeUIxSUNvZ01pNHdNak14TVNBcklIWWdLaUF3TzF4dVhHNGdJSElnUFNCTllYUm9MbTFwYmloTllYUm9MbTFoZUNnd0xDQnlLU3dnTVNrN1hHNGdJR2NnUFNCTllYUm9MbTFwYmloTllYUm9MbTFoZUNnd0xDQm5LU3dnTVNrN1hHNGdJR0lnUFNCTllYUm9MbTFwYmloTllYUm9MbTFoZUNnd0xDQmlLU3dnTVNrN1hHNWNiaUFnY21WMGRYSnVJRnR5SUNvZ01qVTFMQ0JuSUNvZ01qVTFMQ0JpSUNvZ01qVTFYVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISm5Zako1ZFhZb2NtZGlPaUJEYjJ4dmNpazZJRU52Ykc5eUlIdGNiaUFnWTI5dWMzUWdjaUE5SUhKbllsc3dYU0F2SURJMU5TeGNiaUFnSUNCbklEMGdjbWRpV3pGZElDOGdNalUxTEZ4dUlDQWdJR0lnUFNCeVoySmJNbDBnTHlBeU5UVTdYRzVjYmlBZ1kyOXVjM1FnZVNBOUlISWdLaUF3TGpJNU9TQXJJR2NnS2lBd0xqVTROeUFySUdJZ0tpQXdMakV4TkR0Y2JpQWdZMjl1YzNRZ2RTQTlJSElnS2lBdE1DNHhORGN4TXlBcklHY2dLaUF0TUM0eU9EZzROaUFySUdJZ0tpQXdMalF6Tmp0Y2JpQWdZMjl1YzNRZ2RpQTlJSElnS2lBd0xqWXhOU0FySUdjZ0tpQXRNQzQxTVRRNU9TQXJJR0lnS2lBdE1DNHhNREF3TVR0Y2JseHVJQ0J5WlhSMWNtNGdXM2tzSUhVc0lIWmRPMXh1ZlZ4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZXhwb3J0TmFtZXMgPSB7XG4gIGludmVydEJhc2UxNlRoZW1lOiB0cnVlLFxuICBjcmVhdGVTdHlsaW5nOiB0cnVlLFxuICBnZXRCYXNlMTZUaGVtZTogdHJ1ZSxcbiAgaW52ZXJ0VGhlbWU6IHRydWUsXG4gIEJhc2UxNlRoZW1lOiB0cnVlXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmFzZTE2VGhlbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gYmFzZTE2LkJhc2UxNlRoZW1lO1xuICB9XG59KTtcbmV4cG9ydHMuaW52ZXJ0VGhlbWUgPSBleHBvcnRzLmdldEJhc2UxNlRoZW1lID0gZXhwb3J0cy5jcmVhdGVTdHlsaW5nID0gZXhwb3J0cy5pbnZlcnRCYXNlMTZUaGVtZSA9IHZvaWQgMDtcblxudmFyIGJhc2UxNiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJiYXNlMTZcIikpO1xuXG52YXIgX2NvbG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29sb3JcIikpO1xuXG52YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC5jdXJyeVwiKSk7XG5cbnZhciBfY29sb3JDb252ZXJ0ZXJzID0gcmVxdWlyZShcIi4vY29sb3JDb252ZXJ0ZXJzXCIpO1xuXG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5cbk9iamVjdC5rZXlzKF90eXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3R5cGVzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxudmFyIERFRkFVTFRfQkFTRTE2ID0gYmFzZTE2W1wiZGVmYXVsdFwiXTtcbnZhciBCQVNFMTZfS0VZUyA9IE9iamVjdC5rZXlzKERFRkFVTFRfQkFTRTE2KTsgLy8gd2UgbmVlZCBhIGNvcnJlY3RpbmcgZmFjdG9yLCBzbyB0aGF0IGEgZGFyaywgYnV0IG5vdCBibGFjayBiYWNrZ3JvdW5kIGNvbG9yXG4vLyBjb252ZXJ0cyB0byBicmlnaHQgZW5vdWdoIGludmVyc2VkIGNvbG9yXG5cbnZhciBmbGlwID0gZnVuY3Rpb24gZmxpcCh4KSB7XG4gIHJldHVybiB4IDwgMC4yNSA/IDEgOiB4IDwgMC41ID8gMC45IC0geCA6IDEuMSAtIHg7XG59O1xuXG52YXIgaW52ZXJ0Q29sb3IgPSBmdW5jdGlvbiBpbnZlcnRDb2xvcihoZXhTdHJpbmcpIHtcbiAgdmFyIGNvbG9yID0gKDAsIF9jb2xvcltcImRlZmF1bHRcIl0pKGhleFN0cmluZyk7XG5cbiAgdmFyIF9yZ2IyeXV2ID0gKDAsIF9jb2xvckNvbnZlcnRlcnMucmdiMnl1dikoY29sb3IuYXJyYXkoKSksXG4gICAgICBfcmdiMnl1djIgPSBfc2xpY2VkVG9BcnJheShfcmdiMnl1diwgMyksXG4gICAgICB5ID0gX3JnYjJ5dXYyWzBdLFxuICAgICAgdSA9IF9yZ2IyeXV2MlsxXSxcbiAgICAgIHYgPSBfcmdiMnl1djJbMl07XG5cbiAgdmFyIGZsaXBwZWRZdXYgPSBbZmxpcCh5KSwgdSwgdl07XG4gIHZhciByZ2IgPSAoMCwgX2NvbG9yQ29udmVydGVycy55dXYycmdiKShmbGlwcGVkWXV2KTtcbiAgcmV0dXJuIF9jb2xvcltcImRlZmF1bHRcIl0ucmdiKHJnYikuaGV4KCk7XG59O1xuXG52YXIgbWVyZ2VyID0gZnVuY3Rpb24gbWVyZ2VyKHN0eWxpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcmV2U3R5bGluZykge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6IFtwcmV2U3R5bGluZy5jbGFzc05hbWUsIHN0eWxpbmcuY2xhc3NOYW1lXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpLFxuICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJldlN0eWxpbmcuc3R5bGUgfHwge30pLCBzdHlsaW5nLnN0eWxlIHx8IHt9KVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgbWVyZ2VTdHlsaW5nID0gZnVuY3Rpb24gbWVyZ2VTdHlsaW5nKGN1c3RvbVN0eWxpbmcsIGRlZmF1bHRTdHlsaW5nKSB7XG4gIGlmIChjdXN0b21TdHlsaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZGVmYXVsdFN0eWxpbmc7XG4gIH1cblxuICBpZiAoZGVmYXVsdFN0eWxpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjdXN0b21TdHlsaW5nO1xuICB9XG5cbiAgdmFyIGN1c3RvbVR5cGUgPSBfdHlwZW9mKGN1c3RvbVN0eWxpbmcpO1xuXG4gIHZhciBkZWZhdWx0VHlwZSA9IF90eXBlb2YoZGVmYXVsdFN0eWxpbmcpO1xuXG4gIHN3aXRjaCAoY3VzdG9tVHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBzd2l0Y2ggKGRlZmF1bHRUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmV0dXJuIFtkZWZhdWx0U3R5bGluZywgY3VzdG9tU3R5bGluZ10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcblxuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgIHJldHVybiBtZXJnZXIoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjdXN0b21TdHlsaW5nLFxuICAgICAgICAgICAgc3R5bGU6IGRlZmF1bHRTdHlsaW5nXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGluZykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlcih7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY3VzdG9tU3R5bGluZ1xuICAgICAgICAgICAgfSkoZGVmYXVsdFN0eWxpbmcuYXBwbHkodm9pZCAwLCBbc3R5bGluZ10uY29uY2F0KGFyZ3MpKSk7XG4gICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgc3dpdGNoIChkZWZhdWx0VHlwZSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgIHJldHVybiBtZXJnZXIoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBkZWZhdWx0U3R5bGluZyxcbiAgICAgICAgICAgIHN0eWxlOiBjdXN0b21TdHlsaW5nXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0U3R5bGluZyksIGN1c3RvbVN0eWxpbmcpO1xuXG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0eWxpbmcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtZXJnZXIoe1xuICAgICAgICAgICAgICBzdHlsZTogY3VzdG9tU3R5bGluZ1xuICAgICAgICAgICAgfSkoZGVmYXVsdFN0eWxpbmcuYXBwbHkodm9pZCAwLCBbc3R5bGluZ10uY29uY2F0KGFyZ3MpKSk7XG4gICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICBzd2l0Y2ggKGRlZmF1bHRUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsaW5nKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICAgICAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tU3R5bGluZy5hcHBseSh2b2lkIDAsIFttZXJnZXIoc3R5bGluZykoe1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGRlZmF1bHRTdHlsaW5nXG4gICAgICAgICAgICB9KV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsaW5nKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICAgICAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tU3R5bGluZy5hcHBseSh2b2lkIDAsIFttZXJnZXIoc3R5bGluZykoe1xuICAgICAgICAgICAgICBzdHlsZTogZGVmYXVsdFN0eWxpbmdcbiAgICAgICAgICAgIH0pXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGluZykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgICAgICAgYXJnc1tfa2V5NSAtIDFdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbVN0eWxpbmcuYXBwbHkodm9pZCAwLCBbZGVmYXVsdFN0eWxpbmcuYXBwbHkodm9pZCAwLCBbc3R5bGluZ10uY29uY2F0KGFyZ3MpKV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgICB9O1xuICAgICAgfVxuXG4gIH1cbn07XG5cbnZhciBtZXJnZVN0eWxpbmdzID0gZnVuY3Rpb24gbWVyZ2VTdHlsaW5ncyhjdXN0b21TdHlsaW5ncywgZGVmYXVsdFN0eWxpbmdzKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdFN0eWxpbmdzKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY3VzdG9tU3R5bGluZ3MpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSBrZXlzLnB1c2goa2V5KTtcbiAgfVxuXG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkU3R5bGluZywga2V5KSB7XG4gICAgcmV0dXJuIG1lcmdlZFN0eWxpbmdba2V5XSA9IG1lcmdlU3R5bGluZyhjdXN0b21TdHlsaW5nc1trZXldLCBkZWZhdWx0U3R5bGluZ3Nba2V5XSksIG1lcmdlZFN0eWxpbmc7XG4gIH0sIHt9KTtcbn07XG5cbnZhciBnZXRTdHlsaW5nQnlLZXlzID0gZnVuY3Rpb24gZ2V0U3R5bGluZ0J5S2V5cyhtZXJnZWRTdHlsaW5nLCBrZXlzKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiA+IDIgPyBfbGVuNiAtIDIgOiAwKSwgX2tleTYgPSAyOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5NiAtIDJdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIGlmIChrZXlzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lcmdlZFN0eWxpbmc7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIHtcbiAgICBrZXlzID0gW2tleXNdO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkU3R5bGluZ1trZXldO1xuICB9KS5maWx0ZXIoQm9vbGVhbik7XG4gIHZhciBwcm9wcyA9IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwgcykge1xuICAgIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9iai5jbGFzc05hbWUgPSBbb2JqLmNsYXNzTmFtZSwgc10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICB9IGVsc2UgaWYgKF90eXBlb2YocykgPT09ICdvYmplY3QnKSB7XG4gICAgICBvYmouc3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9iai5zdHlsZSksIHMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9iaiA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqKSwgcy5hcHBseSh2b2lkIDAsIFtvYmpdLmNvbmNhdChhcmdzKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH0sIHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIHN0eWxlOiB7fVxuICB9KTtcblxuICBpZiAoIXByb3BzLmNsYXNzTmFtZSkge1xuICAgIGRlbGV0ZSBwcm9wcy5jbGFzc05hbWU7XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMocHJvcHMuc3R5bGUpLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSBwcm9wcy5zdHlsZTtcbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn07XG5cbnZhciBpbnZlcnRCYXNlMTZUaGVtZSA9IGZ1bmN0aW9uIGludmVydEJhc2UxNlRoZW1lKGJhc2UxNlRoZW1lKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhiYXNlMTZUaGVtZSkucmVkdWNlKGZ1bmN0aW9uICh0LCBrZXkpIHtcbiAgICByZXR1cm4gdFtrZXldID0gL15iYXNlLy50ZXN0KGtleSkgPyBpbnZlcnRDb2xvcihiYXNlMTZUaGVtZVtrZXldKSA6IGtleSA9PT0gJ3NjaGVtZScgPyBiYXNlMTZUaGVtZVtrZXldICsgJzppbnZlcnRlZCcgOiBiYXNlMTZUaGVtZVtrZXldLCB0O1xuICB9LCB7fSk7XG59O1xuXG5leHBvcnRzLmludmVydEJhc2UxNlRoZW1lID0gaW52ZXJ0QmFzZTE2VGhlbWU7XG52YXIgY3JlYXRlU3R5bGluZyA9ICgwLCBfbG9kYXNoW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKGdldFN0eWxpbmdGcm9tQmFzZTE2KSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHRoZW1lT3JTdHlsaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRlZmF1bHRCYXNlID0gb3B0aW9ucy5kZWZhdWx0QmFzZTE2LFxuICAgICAgZGVmYXVsdEJhc2UxNiA9IF9vcHRpb25zJGRlZmF1bHRCYXNlID09PSB2b2lkIDAgPyBERUZBVUxUX0JBU0UxNiA6IF9vcHRpb25zJGRlZmF1bHRCYXNlLFxuICAgICAgX29wdGlvbnMkYmFzZTE2VGhlbWVzID0gb3B0aW9ucy5iYXNlMTZUaGVtZXMsXG4gICAgICBiYXNlMTZUaGVtZXMgPSBfb3B0aW9ucyRiYXNlMTZUaGVtZXMgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRiYXNlMTZUaGVtZXM7XG4gIHZhciBiYXNlMTZUaGVtZSA9IGdldEJhc2UxNlRoZW1lKHRoZW1lT3JTdHlsaW5nLCBiYXNlMTZUaGVtZXMpO1xuXG4gIGlmIChiYXNlMTZUaGVtZSkge1xuICAgIHRoZW1lT3JTdHlsaW5nID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBiYXNlMTZUaGVtZSksIHRoZW1lT3JTdHlsaW5nKTtcbiAgfVxuXG4gIHZhciB0aGVtZSA9IEJBU0UxNl9LRVlTLnJlZHVjZShmdW5jdGlvbiAodCwga2V5KSB7XG4gICAgcmV0dXJuIHRba2V5XSA9IHRoZW1lT3JTdHlsaW5nW2tleV0gfHwgZGVmYXVsdEJhc2UxNltrZXldLCB0O1xuICB9LCB7fSk7XG4gIHZhciBjdXN0b21TdHlsaW5nID0gT2JqZWN0LmtleXModGhlbWVPclN0eWxpbmcpLnJlZHVjZShmdW5jdGlvbiAocywga2V5KSB7XG4gICAgcmV0dXJuIEJBU0UxNl9LRVlTLmluZGV4T2Yoa2V5KSA9PT0gLTEgPyAoc1trZXldID0gdGhlbWVPclN0eWxpbmdba2V5XSwgcykgOiBzO1xuICB9LCB7fSk7XG4gIHZhciBkZWZhdWx0U3R5bGluZyA9IGdldFN0eWxpbmdGcm9tQmFzZTE2KHRoZW1lKTtcbiAgdmFyIG1lcmdlZFN0eWxpbmcgPSBtZXJnZVN0eWxpbmdzKGN1c3RvbVN0eWxpbmcsIGRlZmF1bHRTdHlsaW5nKTtcblxuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcgPiAzID8gX2xlbjcgLSAzIDogMCksIF9rZXk3ID0gMzsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFyZ3NbX2tleTcgLSAzXSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICByZXR1cm4gKDAsIF9sb2Rhc2hbXCJkZWZhdWx0XCJdKShnZXRTdHlsaW5nQnlLZXlzLCAyKS5hcHBseSh2b2lkIDAsIFttZXJnZWRTdHlsaW5nXS5jb25jYXQoYXJncykpO1xufSwgMyk7XG5leHBvcnRzLmNyZWF0ZVN0eWxpbmcgPSBjcmVhdGVTdHlsaW5nO1xuXG52YXIgaXNTdHlsaW5nQ29uZmlnID0gZnVuY3Rpb24gaXNTdHlsaW5nQ29uZmlnKHRoZW1lKSB7XG4gIHJldHVybiAhIXRoZW1lLmV4dGVuZDtcbn07XG5cbnZhciBnZXRCYXNlMTZUaGVtZSA9IGZ1bmN0aW9uIGdldEJhc2UxNlRoZW1lKHRoZW1lLCBiYXNlMTZUaGVtZXMpIHtcbiAgaWYgKHRoZW1lICYmIGlzU3R5bGluZ0NvbmZpZyh0aGVtZSkgJiYgdGhlbWUuZXh0ZW5kKSB7XG4gICAgdGhlbWUgPSB0aGVtZS5leHRlbmQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJykge1xuICAgIHZhciBfdGhlbWUkc3BsaXQgPSB0aGVtZS5zcGxpdCgnOicpLFxuICAgICAgICBfdGhlbWUkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3RoZW1lJHNwbGl0LCAyKSxcbiAgICAgICAgX3RoZW1lTmFtZSA9IF90aGVtZSRzcGxpdDJbMF0sXG4gICAgICAgIG1vZGlmaWVyID0gX3RoZW1lJHNwbGl0MlsxXTtcblxuICAgIGlmIChiYXNlMTZUaGVtZXMpIHtcbiAgICAgIHRoZW1lID0gYmFzZTE2VGhlbWVzW190aGVtZU5hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVtZSA9IGJhc2UxNltfdGhlbWVOYW1lXTtcbiAgICB9XG5cbiAgICBpZiAobW9kaWZpZXIgPT09ICdpbnZlcnRlZCcpIHtcbiAgICAgIHRoZW1lID0gaW52ZXJ0QmFzZTE2VGhlbWUodGhlbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGVtZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhlbWUsICdiYXNlMDAnKSA/IHRoZW1lIDogdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0cy5nZXRCYXNlMTZUaGVtZSA9IGdldEJhc2UxNlRoZW1lO1xuXG52YXIgaW52ZXJ0VGhlbWUgPSBmdW5jdGlvbiBpbnZlcnRUaGVtZSh0aGVtZSkge1xuICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGVtZSwgXCI6aW52ZXJ0ZWRcIik7XG4gIH1cblxuICBpZiAodGhlbWUgJiYgaXNTdHlsaW5nQ29uZmlnKHRoZW1lKSAmJiB0aGVtZS5leHRlbmQpIHtcbiAgICBpZiAodHlwZW9mIHRoZW1lLmV4dGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoZW1lKSwge30sIHtcbiAgICAgICAgZXh0ZW5kOiBcIlwiLmNvbmNhdCh0aGVtZS5leHRlbmQsIFwiOmludmVydGVkXCIpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGVtZSksIHt9LCB7XG4gICAgICBleHRlbmQ6IGludmVydEJhc2UxNlRoZW1lKHRoZW1lLmV4dGVuZClcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGVtZSkge1xuICAgIHJldHVybiBpbnZlcnRCYXNlMTZUaGVtZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59O1xuXG5leHBvcnRzLmludmVydFRoZW1lID0gaW52ZXJ0VGhlbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXeUpFUlVaQlZVeFVYMEpCVTBVeE5pSXNJbUpoYzJVeE5pSXNJa0pCVTBVeE5sOUxSVmxUSWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW1ac2FYQWlMQ0o0SWl3aWFXNTJaWEowUTI5c2IzSWlMQ0pvWlhoVGRISnBibWNpTENKamIyeHZjaUlzSW1GeWNtRjVJaXdpZVNJc0luVWlMQ0oySWl3aVpteHBjSEJsWkZsMWRpSXNJbkpuWWlJc0lrTnZiRzl5SWl3aWFHVjRJaXdpYldWeVoyVnlJaXdpYzNSNWJHbHVaeUlzSW5CeVpYWlRkSGxzYVc1bklpd2lZMnhoYzNOT1lXMWxJaXdpWm1sc2RHVnlJaXdpUW05dmJHVmhiaUlzSW1wdmFXNGlMQ0p6ZEhsc1pTSXNJbTFsY21kbFUzUjViR2x1WnlJc0ltTjFjM1J2YlZOMGVXeHBibWNpTENKa1pXWmhkV3gwVTNSNWJHbHVaeUlzSW5WdVpHVm1hVzVsWkNJc0ltTjFjM1J2YlZSNWNHVWlMQ0prWldaaGRXeDBWSGx3WlNJc0ltRnlaM01pTENKdFpYSm5aVk4wZVd4cGJtZHpJaXdpWTNWemRHOXRVM1I1YkdsdVozTWlMQ0prWldaaGRXeDBVM1I1YkdsdVozTWlMQ0pyWlhraUxDSnBibVJsZUU5bUlpd2ljSFZ6YUNJc0luSmxaSFZqWlNJc0ltMWxjbWRsWkZOMGVXeHBibWNpTENKblpYUlRkSGxzYVc1blFubExaWGx6SWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aWMzUjViR1Z6SWl3aWJXRndJaXdpY0hKdmNITWlMQ0p2WW1vaUxDSnpJaXdpYkdWdVozUm9JaXdpYVc1MlpYSjBRbUZ6WlRFMlZHaGxiV1VpTENKaVlYTmxNVFpVYUdWdFpTSXNJblFpTENKMFpYTjBJaXdpWTNKbFlYUmxVM1I1YkdsdVp5SXNJbWRsZEZOMGVXeHBibWRHY205dFFtRnpaVEUySWl3aWIzQjBhVzl1Y3lJc0luUm9aVzFsVDNKVGRIbHNhVzVuSWl3aVpHVm1ZWFZzZEVKaGMyVXhOaUlzSW1KaGMyVXhObFJvWlcxbGN5SXNJbWRsZEVKaGMyVXhObFJvWlcxbElpd2lkR2hsYldVaUxDSnBjMU4wZVd4cGJtZERiMjVtYVdjaUxDSmxlSFJsYm1RaUxDSnpjR3hwZENJc0luUm9aVzFsVG1GdFpTSXNJbTF2WkdsbWFXVnlJaXdpY0hKdmRHOTBlWEJsSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKallXeHNJaXdpYVc1MlpYSjBWR2hsYldVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQlFVRTdPMEZCUlVFN08wRkJSVUU3TzBGQlEwRTdPMEZCYjFOQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1WSkJMRWxCUVUxQkxHTkJRV01zUjBGQlIwTXNUVUZCVFN4WFFVRTNRanRCUVVWQkxFbEJRVTFETEZkQlFWY3NSMEZCUjBNc1RVRkJUU3hEUVVGRFF5eEpRVUZRTEVOQlFWbEtMR05CUVZvc1EwRkJjRUlzUXl4RFFVVkJPMEZCUTBFN08wRkJRMEVzU1VGQlRVc3NTVUZCU1N4SFFVRkhMRk5CUVZCQkxFbEJRVThzUTBGQlEwTXNRMEZCUkR0QlFVRkJMRk5CUVdkQ1FTeERRVUZETEVkQlFVY3NTVUZCU2l4SFFVRlhMRU5CUVZnc1IwRkJaVUVzUTBGQlF5eEhRVUZITEVkQlFVb3NSMEZCVlN4TlFVRk5RU3hEUVVGb1FpeEhRVUZ2UWl4TlFVRk5RU3hEUVVGNlJEdEJRVUZCTEVOQlFXSTdPMEZCUlVFc1NVRkJUVU1zVjBGQlZ5eEhRVUZITEZOQlFXUkJMRmRCUVdNc1EwRkJRME1zVTBGQlJDeEZRVUYxUWp0QlFVTjZReXhOUVVGTlF5eExRVUZMTEVkQlFVY3NkVUpCUVUxRUxGTkJRVTRzUTBGQlpEczdRVUZFZVVNc2FVSkJSWFpDTERoQ1FVRlJReXhMUVVGTExFTkJRVU5ETEV0QlFVNHNSVUZCVWl4RFFVWjFRanRCUVVGQk8wRkJRVUVzVFVGRmJFTkRMRU5CUm10RE8wRkJRVUVzVFVGRkwwSkRMRU5CUml0Q08wRkJRVUVzVFVGRk5VSkRMRU5CUmpSQ096dEJRVWQ2UXl4TlFVRk5ReXhWUVVGelFpeEhRVUZITEVOQlFVTlVMRWxCUVVrc1EwRkJRMDBzUTBGQlJDeERRVUZNTEVWQlFWVkRMRU5CUVZZc1JVRkJZVU1zUTBGQllpeERRVUV2UWp0QlFVTkJMRTFCUVUxRkxFZEJRVWNzUjBGQlJ5dzRRa0ZCVVVRc1ZVRkJVaXhEUVVGYU8wRkJRMEVzVTBGQlQwVXNhMEpCUVUxRUxFZEJRVTRzUTBGQlZVRXNSMEZCVml4RlFVRmxSU3hIUVVGbUxFVkJRVkE3UVVGRFJDeERRVTVFT3p0QlFWRkJMRWxCUVUxRExFMUJRVTBzUjBGQlJ5eFRRVUZVUVN4TlFVRlRMRU5CUVVORExFOUJRVVFzUlVGQkswSTdRVUZETlVNc1UwRkJUeXhWUVVGRFF5eFhRVUZFTzBGQlFVRXNWMEZCYjBNN1FVRkRla05ETEUxQlFVRkJMRk5CUVZNc1JVRkJSU3hEUVVGRFJDeFhRVUZYTEVOQlFVTkRMRk5CUVdJc1JVRkJkMEpHTEU5QlFVOHNRMEZCUTBVc1UwRkJhRU1zUlVGRFVrTXNUVUZFVVN4RFFVTkVReXhQUVVSRExFVkJSVkpETEVsQlJsRXNRMEZGU0N4SFFVWkhMRU5CUkRoQ08wRkJTWHBEUXl4TlFVRkJRU3hMUVVGTExHdERRVUZSVEN4WFFVRlhMRU5CUVVOTExFdEJRVm9zU1VGQmNVSXNSVUZCTjBJc1IwRkJjME5PTEU5QlFVOHNRMEZCUTAwc1MwRkJVaXhKUVVGcFFpeEZRVUYyUkR0QlFVcHZReXhMUVVGd1F6dEJRVUZCTEVkQlFWQTdRVUZOUkN4RFFWQkVPenRCUVZOQkxFbEJRVTFETEZsQlFWa3NSMEZCUnl4VFFVRm1RU3haUVVGbExFTkJRMjVDUXl4aFFVUnRRaXhGUVVWdVFrTXNZMEZHYlVJc1JVRkhWVHRCUVVNM1FpeE5RVUZKUkN4aFFVRmhMRXRCUVV0RkxGTkJRWFJDTEVWQlFXbERPMEZCUXk5Q0xGZEJRVTlFTEdOQlFWQTdRVUZEUkRzN1FVRkRSQ3hOUVVGSlFTeGpRVUZqTEV0QlFVdERMRk5CUVhaQ0xFVkJRV3RETzBGQlEyaERMRmRCUVU5R0xHRkJRVkE3UVVGRFJEczdRVUZGUkN4TlFVRk5SeXhWUVVGVkxGZEJRVlZJTEdGQlFWWXNRMEZCYUVJN08wRkJRMEVzVFVGQlRVa3NWMEZCVnl4WFFVRlZTQ3hqUVVGV0xFTkJRV3BDT3p0QlFVVkJMRlZCUVZGRkxGVkJRVkk3UVVGRFJTeFRRVUZMTEZGQlFVdzdRVUZEUlN4alFVRlJReXhYUVVGU08wRkJRMFVzWVVGQlN5eFJRVUZNTzBGQlEwVXNhVUpCUVU4c1EwRkJRMGdzWTBGQlJDeEZRVUZwUWtRc1lVRkJha0lzUlVGQlowTk1MRTFCUVdoRExFTkJRWFZEUXl4UFFVRjJReXhGUVVGblJFTXNTVUZCYUVRc1EwRkJjVVFzUjBGQmNrUXNRMEZCVURzN1FVRkRSaXhoUVVGTExGRkJRVXc3UVVGRFJTeHBRa0ZCVDA0c1RVRkJUU3hEUVVGRE8wRkJRMXBITEZsQlFVRkJMRk5CUVZNc1JVRkJSVTBzWVVGRVF6dEJRVVZhUml4WlFVRkJRU3hMUVVGTExFVkJRVVZITzBGQlJrc3NWMEZCUkN4RFFVRmlPenRCUVVsR0xHRkJRVXNzVlVGQlREdEJRVU5GTEdsQ1FVRlBMRlZCUVVOVUxFOUJRVVE3UVVGQlFTdzRRMEZCYzBKaExFbEJRWFJDTzBGQlFYTkNRU3hqUVVGQlFTeEpRVUYwUWp0QlFVRkJPenRCUVVGQkxHMUNRVU5NWkN4TlFVRk5MRU5CUVVNN1FVRkRURWNzWTBGQlFVRXNVMEZCVXl4RlFVRkZUVHRCUVVST0xHRkJRVVFzUTBGQlRpeERRVVZKUXl4alFVRkVMR2RDUVVGNVExUXNUMEZCZWtNc1UwRkJjVVJoTEVsQlFYSkVMRVZCUmtnc1EwRkVTenRCUVVGQkxGZEJRVkE3UVVGVVNqczdRVUZqUVRzN1FVRkRSaXhUUVVGTExGRkJRVXc3UVVGRFJTeGpRVUZSUkN4WFFVRlNPMEZCUTBVc1lVRkJTeXhSUVVGTU8wRkJRMFVzYVVKQlFVOWlMRTFCUVUwc1EwRkJRenRCUVVOYVJ5eFpRVUZCUVN4VFFVRlRMRVZCUVVWUExHTkJSRU03UVVGRldrZ3NXVUZCUVVFc1MwRkJTeXhGUVVGRlJUdEJRVVpMTEZkQlFVUXNRMEZCWWpzN1FVRkpSaXhoUVVGTExGRkJRVXc3UVVGRFJTeHBSRUZEVFVNc1kwRkVUaXhIUVVWTlJDeGhRVVpPT3p0QlFVbEdMR0ZCUVVzc1ZVRkJURHRCUVVORkxHbENRVUZQTEZWQlFVTlNMRTlCUVVRN1FVRkJRU3dyUTBGQmMwSmhMRWxCUVhSQ08wRkJRWE5DUVN4alFVRkJRU3hKUVVGMFFqdEJRVUZCT3p0QlFVRkJMRzFDUVVOTVpDeE5RVUZOTEVOQlFVTTdRVUZEVEU4c1kwRkJRVUVzUzBGQlN5eEZRVUZGUlR0QlFVUkdMR0ZCUVVRc1EwRkJUaXhEUVVWSlF5eGpRVUZFTEdkQ1FVRjVRMVFzVDBGQmVrTXNVMEZCY1VSaExFbEJRWEpFTEVWQlJrZ3NRMEZFU3p0QlFVRkJMRmRCUVZBN1FVRmFTanM3UVVGcFFrRTdPMEZCUTBZc1UwRkJTeXhWUVVGTU8wRkJRMFVzWTBGQlVVUXNWMEZCVWp0QlFVTkZMR0ZCUVVzc1VVRkJURHRCUVVORkxHbENRVUZQTEZWQlFVTmFMRTlCUVVRN1FVRkJRU3dyUTBGQllXRXNTVUZCWWp0QlFVRmhRU3hqUVVGQlFTeEpRVUZpTzBGQlFVRTdPMEZCUVVFc2JVSkJRMHBNTEdGQlFVUXNaMEpCUTBWVUxFMUJRVTBzUTBGQlEwTXNUMEZCUkN4RFFVRk9MRU5CUVdkQ08wRkJRMlJGTEdOQlFVRkJMRk5CUVZNc1JVRkJSVTg3UVVGRVJ5eGhRVUZvUWl4RFFVUkdMRk5CU1V0SkxFbEJTa3dzUlVGRVN6dEJRVUZCTEZkQlFWQTdPMEZCVDBZc1lVRkJTeXhSUVVGTU8wRkJRMFVzYVVKQlFVOHNWVUZCUTJJc1QwRkJSRHRCUVVGQkxDdERRVUZoWVN4SlFVRmlPMEZCUVdGQkxHTkJRVUZCTEVsQlFXSTdRVUZCUVRzN1FVRkJRU3h0UWtGRFNrd3NZVUZCUkN4blFrRkRSVlFzVFVGQlRTeERRVUZEUXl4UFFVRkVMRU5CUVU0c1EwRkJaMEk3UVVGRFpFMHNZMEZCUVVFc1MwRkJTeXhGUVVGRlJ6dEJRVVJQTEdGQlFXaENMRU5CUkVZc1UwRkpTMGtzU1VGS1RDeEZRVVJMTzBGQlFVRXNWMEZCVURzN1FVRlBSaXhoUVVGTExGVkJRVXc3UVVGRFJTeHBRa0ZCVHl4VlFVRkRZaXhQUVVGRU8wRkJRVUVzSzBOQlFXRmhMRWxCUVdJN1FVRkJZVUVzWTBGQlFVRXNTVUZCWWp0QlFVRkJPenRCUVVGQkxHMUNRVU5LVEN4aFFVRkVMR2RDUVVOSFF5eGpRVUZFTEdkQ1FVTkZWQ3hQUVVSR0xGTkJSVXRoTEVsQlJrd3NSVUZFUml4VFFVdExRU3hKUVV4TUxFVkJSRXM3UVVGQlFTeFhRVUZRTzBGQmJFSktPenRCUVhKRFNqdEJRV2xGUkN4RFFTOUZSRHM3UVVGcFJrRXNTVUZCVFVNc1lVRkJZU3hIUVVGSExGTkJRV2hDUVN4aFFVRm5RaXhEUVVOd1FrTXNZMEZFYjBJc1JVRkZjRUpETEdWQlJtOUNMRVZCUjBZN1FVRkRiRUlzVFVGQlRTOUNMRWxCUVVrc1IwRkJSMFFzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZrclFpeGxRVUZhTEVOQlFXSTdPMEZCUTBFc1QwRkJTeXhKUVVGTlF5eEhRVUZZTEVsQlFXdENSaXhqUVVGc1FpeEZRVUZyUXp0QlFVTm9ReXhSUVVGSk9VSXNTVUZCU1N4RFFVRkRhVU1zVDBGQlRDeERRVUZoUkN4SFFVRmlMRTFCUVhOQ0xFTkJRVU1zUTBGQk0wSXNSVUZCT0VKb1F5eEpRVUZKTEVOQlFVTnJReXhKUVVGTUxFTkJRVlZHTEVkQlFWWTdRVUZETDBJN08wRkJSVVFzVTBGQlQyaERMRWxCUVVrc1EwRkJRMjFETEUxQlFVd3NRMEZEVEN4VlFVRkRReXhoUVVGRUxFVkJRV2RDU2l4SFFVRm9RanRCUVVGQkxGZEJRMGRKTEdGQlFXRXNRMEZCUTBvc1IwRkJSQ3hEUVVGaUxFZEJRVFJEVml4WlFVRlpMRU5CUTNaRVVTeGpRVUZqTEVOQlFVTkZMRWRCUVVRc1EwRkVlVU1zUlVGRmRrUkVMR1ZCUVdVc1EwRkJRME1zUjBGQlJDeERRVVozUXl4RFFVRjZSQ3hGUVVsQlNTeGhRVXhHTzBGQlFVRXNSMEZFU3l4RlFWRk1MRVZCVWtzc1EwRkJVRHRCUVZWRUxFTkJia0pFT3p0QlFYRkNRU3hKUVVGTlF5eG5Ra0ZCWjBJc1IwRkJSeXhUUVVGdVFrRXNaMEpCUVcxQ0xFTkJRM1pDUkN4aFFVUjFRaXhGUVVWMlFuQkRMRWxCUm5WQ0xFVkJTVmc3UVVGQlFTeHhRMEZFVkRSQ0xFbEJRMU03UVVGRVZFRXNTVUZCUVVFc1NVRkRVenRCUVVGQk96dEJRVU5hTEUxQlFVazFRaXhKUVVGSkxFdEJRVXNzU1VGQllpeEZRVUZ0UWp0QlFVTnFRaXhYUVVGUmIwTXNZVUZCVWp0QlFVTkVPenRCUVVWRUxFMUJRVWtzUTBGQlEwVXNTMEZCU3l4RFFVRkRReXhQUVVGT0xFTkJRV04yUXl4SlFVRmtMRU5CUVV3c1JVRkJNRUk3UVVGRGVFSkJMRWxCUVVGQkxFbEJRVWtzUjBGQlJ5eERRVUZEUVN4SlFVRkVMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeE5RVUZOZDBNc1RVRkJUU3hIUVVGSGVFTXNTVUZCU1N4RFFVTm9RbmxETEVkQlJGa3NRMEZEVWl4VlFVRkRWQ3hIUVVGRU8wRkJRVUVzVjBGQlUwa3NZVUZCWVN4RFFVRkRTaXhIUVVGRUxFTkJRWFJDTzBGQlFVRXNSMEZFVVN4RlFVVmFaQ3hOUVVaWkxFTkJSVXhETEU5QlJrc3NRMEZCWmp0QlFVbEJMRTFCUVUxMVFpeExRVUZMTEVkQlFVZEdMRTFCUVUwc1EwRkJRMHdzVFVGQlVDeERRVU5hTEZWQlFVTlJMRWRCUVVRc1JVRkJUVU1zUTBGQlRpeEZRVUZaTzBGQlExWXNVVUZCU1N4UFFVRlBRU3hEUVVGUUxFdEJRV0VzVVVGQmFrSXNSVUZCTWtJN1FVRkRla0pFTEUxQlFVRkJMRWRCUVVjc1EwRkJRekZDTEZOQlFVb3NSMEZCWjBJc1EwRkJRekJDTEVkQlFVY3NRMEZCUXpGQ0xGTkJRVXdzUlVGQlowSXlRaXhEUVVGb1FpeEZRVUZ0UWpGQ0xFMUJRVzVDTEVOQlFUQkNReXhQUVVFeFFpeEZRVUZ0UTBNc1NVRkJia01zUTBGQmQwTXNSMEZCZUVNc1EwRkJhRUk3UVVGRFJDeExRVVpFTEUxQlJVOHNTVUZCU1N4UlFVRlBkMElzUTBGQlVDeE5RVUZoTEZGQlFXcENMRVZCUVRKQ08wRkJRMmhEUkN4TlFVRkJRU3hIUVVGSExFTkJRVU4wUWl4TFFVRktMRzFEUVVGcFFuTkNMRWRCUVVjc1EwRkJRM1JDTEV0QlFYSkNMRWRCUVN0Q2RVSXNRMEZCTDBJN1FVRkRSQ3hMUVVaTkxFMUJSVUVzU1VGQlNTeFBRVUZQUVN4RFFVRlFMRXRCUVdFc1ZVRkJha0lzUlVGQk5rSTdRVUZEYkVORUxFMUJRVUZCTEVkQlFVY3NiVU5CUVZGQkxFZEJRVklzUjBGQlowSkRMRU5CUVVNc1RVRkJSQ3hWUVVGRlJDeEhRVUZHTEZOQlFWVm1MRWxCUVZZc1JVRkJhRUlzUTBGQlNEdEJRVU5FT3p0QlFVVkVMRmRCUVU5bExFZEJRVkE3UVVGRFJDeEhRVmhYTEVWQldWbzdRVUZCUlRGQ0xFbEJRVUZCTEZOQlFWTXNSVUZCUlN4RlFVRmlPMEZCUVdsQ1NTeEpRVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkJlRUlzUjBGYVdTeERRVUZrT3p0QlFXVkJMRTFCUVVrc1EwRkJRM0ZDTEV0QlFVc3NRMEZCUTNwQ0xGTkJRVmdzUlVGQmMwSTdRVUZEY0VJc1YwRkJUM2xDTEV0QlFVc3NRMEZCUTNwQ0xGTkJRV0k3UVVGRFJEczdRVUZGUkN4TlFVRkpiRUlzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZrd1F5eExRVUZMTEVOQlFVTnlRaXhMUVVGc1FpeEZRVUY1UW5kQ0xFMUJRWHBDTEV0QlFXOURMRU5CUVhoRExFVkJRVEpETzBGQlEzcERMRmRCUVU5SUxFdEJRVXNzUTBGQlEzSkNMRXRCUVdJN1FVRkRSRHM3UVVGRlJDeFRRVUZQY1VJc1MwRkJVRHRCUVVORUxFTkJla05FT3p0QlFUSkRUeXhKUVVGTlNTeHBRa0ZCYVVJc1IwRkJSeXhUUVVGd1FrRXNhVUpCUVc5Q0xFTkJRVU5ETEZkQlFVUTdRVUZCUVN4VFFVTXZRbWhFTEUxQlFVMHNRMEZCUTBNc1NVRkJVQ3hEUVVGWkswTXNWMEZCV2l4RlFVRjVRbG9zVFVGQmVrSXNRMEZEUlN4VlFVRkRZU3hEUVVGRUxFVkJRVWxvUWl4SFFVRktPMEZCUVVFc1YwRkRSMmRDTEVOQlFVTXNRMEZCUTJoQ0xFZEJRVVFzUTBGQlJDeEhRVUU0UWl4UlFVRlJhVUlzU1VGQlVpeERRVUZoYWtJc1IwRkJZaXhKUVVNelFqZENMRmRCUVZjc1EwRkJRelJETEZkQlFWY3NRMEZCUTJZc1IwRkJSQ3hEUVVGYUxFTkJSR2RDTEVkQlJUTkNRU3hIUVVGSExFdEJRVXNzVVVGQlVpeEhRVU5CWlN4WFFVRlhMRU5CUVVObUxFZEJRVVFzUTBGQldDeEhRVUZ0UWl4WFFVUnVRaXhIUVVWQlpTeFhRVUZYTEVOQlFVTm1MRWRCUVVRc1EwRktaaXhGUVV0QlowSXNRMEZPUmp0QlFVRkJMRWRCUkVZc1JVRlRSU3hGUVZSR0xFTkJSQ3RDTzBGQlFVRXNRMEZCTVVJN096dEJRV0ZCTEVsQlFVMUZMR0ZCUVdFc1IwRkJSeXgzUWtGRE0wSXNWVUZEUlVNc2IwSkJSRVlzUlVGUmMwSTdRVUZCUVN4TlFVNXdRa01zVDBGTmIwSXNkVVZCU0doQ0xFVkJSMmRDTzBGQlFVRXNUVUZHY0VKRExHTkJSVzlDTEhWRlFVWkpMRVZCUlVvN1FVRkJRU3cyUWtGRE5FTkVMRTlCUkRWRExFTkJRMXBGTEdGQlJGazdRVUZCUVN4TlFVTmFRU3hoUVVSWkxIRkRRVU5KTVVRc1kwRkVTanRCUVVGQkxEaENRVU0wUTNkRUxFOUJSRFZETEVOQlEyOUNSeXhaUVVSd1FqdEJRVUZCTEUxQlEyOUNRU3haUVVSd1FpeHpRMEZEYlVNc1NVRkVia003UVVGSGNFSXNUVUZCVFZJc1YwRkJWeXhIUVVGSFV5eGpRVUZqTEVOQlFVTklMR05CUVVRc1JVRkJhVUpGTEZsQlFXcENMRU5CUVd4RE96dEJRVU5CTEUxQlFVbFNMRmRCUVVvc1JVRkJhVUk3UVVGRFprMHNTVUZCUVVFc1kwRkJZeXh0UTBGRFZFNHNWMEZFVXl4SFFVVlNUU3hqUVVaUkxFTkJRV1E3UVVGSlJEczdRVUZGUkN4TlFVRk5TU3hMUVVGTExFZEJRVWN6UkN4WFFVRlhMRU5CUVVOeFF5eE5RVUZhTEVOQlExb3NWVUZCUTJFc1EwRkJSQ3hGUVVGSmFFSXNSMEZCU2p0QlFVRkJMRmRCUTBkblFpeERRVUZETEVOQlFVTm9RaXhIUVVGRUxFTkJRVVFzUjBGRFJYRkNMR05CUVVRc1EwRkJaME55UWl4SFFVRm9ReXhMUVVOQmMwSXNZVUZCWVN4RFFVRkRkRUlzUjBGQlJDeERRVVptTEVWQlIwRm5RaXhEUVVwR08wRkJRVUVzUjBGRVdTeEZRVTlhTEVWQlVGa3NRMEZCWkR0QlFWVkJMRTFCUVUxNlFpeGhRVUZoTEVkQlFVZDRRaXhOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZCV1hGRUxHTkJRVm9zUlVGQk5FSnNRaXhOUVVFMVFpeERRVU53UWl4VlFVRkRVeXhEUVVGRUxFVkJRVWxhTEVkQlFVbzdRVUZCUVN4WFFVTkZiRU1zVjBGQlZ5eERRVUZEYlVNc1QwRkJXaXhEUVVGdlFrUXNSMEZCY0VJc1RVRkJOa0lzUTBGQlF5eERRVUU1UWl4SlFVTk5XU3hEUVVGRExFTkJRVU5hTEVkQlFVUXNRMEZCUkN4SFFVRlZjVUlzWTBGQlJDeERRVUZyUTNKQ0xFZEJRV3hETEVOQlFWWXNSVUZCYlVSWkxFTkJSSGhFTEVsQlJVbEJMRU5CU0U0N1FVRkJRU3hIUVVSdlFpeEZRVXR3UWl4RlFVeHZRaXhEUVVGMFFqdEJRVkZCTEUxQlFVMXdRaXhqUVVGakxFZEJRVWN5UWl4dlFrRkJiMElzUTBGQlEwMHNTMEZCUkN4RFFVRXpRenRCUVVWQkxFMUJRVTF5UWl4aFFVRmhMRWRCUVVkUUxHRkJRV0VzUTBGQlEwNHNZVUZCUkN4RlFVRm5Ra01zWTBGQmFFSXNRMEZCYmtNN08wRkJMMEp2UWl4eFEwRkVha0pKTEVsQlEybENPMEZCUkdwQ1FTeEpRVUZCUVN4SlFVTnBRanRCUVVGQk96dEJRV2xEY0VJc1UwRkJUeXgzUWtGQlRWTXNaMEpCUVU0c1JVRkJkMElzUTBGQmVFSXNhVUpCUVRKQ1JDeGhRVUV6UWl4VFFVRTJRMUlzU1VGQk4wTXNSVUZCVUR0QlFVTkVMRU5CTTBNd1FpeEZRVFJETTBJc1EwRTFRekpDTEVOQlFYUkNPenM3UVVFclExQXNTVUZCVFRoQ0xHVkJRV1VzUjBGQlJ5eFRRVUZzUWtFc1pVRkJhMElzUTBGQlEwUXNTMEZCUkR0QlFVRkJMRk5CUTNSQ0xFTkJRVU1zUTBGQlJVRXNTMEZCUkN4RFFVRjVRa1VzVFVGRVREdEJRVUZCTEVOQlFYaENPenRCUVVkUExFbEJRVTFJTEdOQlFXTXNSMEZCUnl4VFFVRnFRa0VzWTBGQmFVSXNRMEZETlVKRExFdEJSRFJDTEVWQlJUVkNSaXhaUVVZMFFpeEZRVWRCTzBGQlF6VkNMRTFCUVVsRkxFdEJRVXNzU1VGQlNVTXNaVUZCWlN4RFFVRkRSQ3hMUVVGRUxFTkJRWGhDTEVsQlFXMURRU3hMUVVGTExFTkJRVU5GTEUxQlFUZERMRVZCUVhGRU8wRkJRMjVFUml4SlFVRkJRU3hMUVVGTExFZEJRVWRCTEV0QlFVc3NRMEZCUTBVc1RVRkJaRHRCUVVORU96dEJRVVZFTEUxQlFVa3NUMEZCVDBZc1MwRkJVQ3hMUVVGcFFpeFJRVUZ5UWl4RlFVRXJRanRCUVVGQkxIVkNRVU5EUVN4TFFVRkxMRU5CUVVOSExFdEJRVTRzUTBGQldTeEhRVUZhTEVOQlJFUTdRVUZCUVR0QlFVRkJMRkZCUTNSQ1F5eFZRVVJ6UWp0QlFVRkJMRkZCUTFoRExGRkJSRmM3TzBGQlJUZENMRkZCUVVsUUxGbEJRVW9zUlVGQmEwSTdRVUZEYUVKRkxFMUJRVUZCTEV0QlFVc3NSMEZCUjBZc1dVRkJXU3hEUVVGRFRTeFZRVUZFTEVOQlFYQkNPMEZCUTBRc1MwRkdSQ3hOUVVWUE8wRkJRMHhLTEUxQlFVRkJMRXRCUVVzc1IwRkJSelZFTEUxQlFVMHNRMEZCUTJkRkxGVkJRVVFzUTBGQlpEdEJRVU5FT3p0QlFVTkVMRkZCUVVsRExGRkJRVkVzUzBGQlN5eFZRVUZxUWl4RlFVRTJRanRCUVVNelFrd3NUVUZCUVVFc1MwRkJTeXhIUVVGSFdDeHBRa0ZCYVVJc1EwRkJRMWNzUzBGQlJDeERRVUY2UWp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVTBGQlQwRXNTMEZCU3l4SlFVRkpNVVFzVFVGQlRTeERRVUZEWjBVc1UwRkJVQ3hEUVVGcFFrTXNZMEZCYWtJc1EwRkJaME5ETEVsQlFXaERMRU5CUVhGRFVpeExRVUZ5UXl4RlFVRTBReXhSUVVFMVF5eERRVUZVTEVkQlEwWkJMRXRCUkVVc1IwRkZTR2hETEZOQlJrbzdRVUZIUkN4RFFYWkNUVHM3T3p0QlFYbENRU3hKUVVGTmVVTXNWMEZCVnl4SFFVRkhMRk5CUVdSQkxGZEJRV01zUTBGQlExUXNTMEZCUkN4RlFVRnBSRHRCUVVNeFJTeE5RVUZKTEU5QlFVOUJMRXRCUVZBc1MwRkJhVUlzVVVGQmNrSXNSVUZCSzBJN1FVRkROMElzY1VKQlFWVkJMRXRCUVZZN1FVRkRSRHM3UVVGRlJDeE5RVUZKUVN4TFFVRkxMRWxCUVVsRExHVkJRV1VzUTBGQlEwUXNTMEZCUkN4RFFVRjRRaXhKUVVGdFEwRXNTMEZCU3l4RFFVRkRSU3hOUVVFM1F5eEZRVUZ4UkR0QlFVTnVSQ3hSUVVGSkxFOUJRVTlHTEV0QlFVc3NRMEZCUTBVc1RVRkJZaXhMUVVGM1FpeFJRVUUxUWl4RlFVRnpRenRCUVVOd1F5dzJRMEZCV1VZc1MwRkJXanRCUVVGdFFrVXNVVUZCUVVFc1RVRkJUU3haUVVGTFJpeExRVUZMTEVOQlFVTkZMRTFCUVZnN1FVRkJla0k3UVVGRFJEczdRVUZGUkN3eVEwRkRTMFlzUzBGRVREdEJRVVZGUlN4TlFVRkJRU3hOUVVGTkxFVkJRVVZpTEdsQ1FVRnBRaXhEUVVGRFZ5eExRVUZMTEVOQlFVTkZMRTFCUVZBN1FVRkdNMEk3UVVGSlJEczdRVUZGUkN4TlFVRkpSaXhMUVVGS0xFVkJRVmM3UVVGRFZDeFhRVUZQV0N4cFFrRkJhVUlzUTBGQlExY3NTMEZCUkN4RFFVRjRRanRCUVVORU96dEJRVVZFTEZOQlFVOUJMRXRCUVZBN1FVRkRSQ3hEUVhKQ1RTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQXFJR0Z6SUdKaGMyVXhOaUJtY205dElDZGlZWE5sTVRZbk8xeHVhVzF3YjNKMElIc2dRbUZ6WlRFMlZHaGxiV1VnZlNCbWNtOXRJQ2RpWVhObE1UWW5PMXh1YVcxd2IzSjBJRU52Ykc5eUlHWnliMjBnSjJOdmJHOXlKenRjYm1sdGNHOXlkQ0FxSUdGeklFTlRVeUJtY205dElDZGpjM04wZVhCbEp6dGNibWx0Y0c5eWRDQmpkWEp5ZVNCbWNtOXRJQ2RzYjJSaGMyZ3VZM1Z5Y25rbk8xeHVhVzF3YjNKMElIc2dRMjlzYjNJZ1lYTWdRMjlzYjNKVWRYQnNaU3dnZVhWMk1uSm5ZaXdnY21kaU1ubDFkaUI5SUdaeWIyMGdKeTR2WTI5c2IzSkRiMjUyWlhKMFpYSnpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lGTjBlV3hwYm1jc1hHNGdJRk4wZVd4cGJtZERiMjVtYVdjc1hHNGdJRk4wZVd4cGJtZEdkVzVqZEdsdmJpeGNiaUFnVTNSNWJHbHVaMVpoYkhWbExGeHVJQ0JUZEhsc2FXNW5WbUZzZFdWR2RXNWpkR2x2Yml4Y2JpQWdWR2hsYldVc1hHNTlJR1p5YjIwZ0p5NHZkSGx3WlhNbk8xeHVYRzVqYjI1emRDQkVSVVpCVlV4VVgwSkJVMFV4TmlBOUlHSmhjMlV4Tmk1a1pXWmhkV3gwTzF4dVhHNWpiMjV6ZENCQ1FWTkZNVFpmUzBWWlV5QTlJRTlpYW1WamRDNXJaWGx6S0VSRlJrRlZURlJmUWtGVFJURTJLVHRjYmx4dUx5OGdkMlVnYm1WbFpDQmhJR052Y25KbFkzUnBibWNnWm1GamRHOXlMQ0J6YnlCMGFHRjBJR0VnWkdGeWF5d2dZblYwSUc1dmRDQmliR0ZqYXlCaVlXTnJaM0p2ZFc1a0lHTnZiRzl5WEc0dkx5QmpiMjUyWlhKMGN5QjBieUJpY21sbmFIUWdaVzV2ZFdkb0lHbHVkbVZ5YzJWa0lHTnZiRzl5WEc1amIyNXpkQ0JtYkdsd0lEMGdLSGc2SUc1MWJXSmxjaWtnUFQ0Z0tIZ2dQQ0F3TGpJMUlEOGdNU0E2SUhnZ1BDQXdMalVnUHlBd0xqa2dMU0I0SURvZ01TNHhJQzBnZUNrN1hHNWNibU52Ym5OMElHbHVkbVZ5ZEVOdmJHOXlJRDBnS0dobGVGTjBjbWx1WnpvZ2MzUnlhVzVuS1NBOVBpQjdYRzRnSUdOdmJuTjBJR052Ykc5eUlEMGdRMjlzYjNJb2FHVjRVM1J5YVc1bktUdGNiaUFnWTI5dWMzUWdXM2tzSUhVc0lIWmRJRDBnY21kaU1ubDFkaWhqYjJ4dmNpNWhjbkpoZVNncElHRnpJRU52Ykc5eVZIVndiR1VwTzF4dUlDQmpiMjV6ZENCbWJHbHdjR1ZrV1hWMk9pQkRiMnh2Y2xSMWNHeGxJRDBnVzJac2FYQW9lU2tzSUhVc0lIWmRPMXh1SUNCamIyNXpkQ0J5WjJJZ1BTQjVkWFl5Y21kaUtHWnNhWEJ3WldSWmRYWXBPMXh1SUNCeVpYUjFjbTRnUTI5c2IzSXVjbWRpS0hKbllpa3VhR1Y0S0NrN1hHNTlPMXh1WEc1amIyNXpkQ0J0WlhKblpYSWdQU0FvYzNSNWJHbHVaem9nVUdGeWRHbGhiRHhUZEhsc2FXNW5QaWtnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdLSEJ5WlhaVGRIbHNhVzVuT2lCUVlYSjBhV0ZzUEZOMGVXeHBibWMrS1NBOVBpQW9lMXh1SUNBZ0lHTnNZWE56VG1GdFpUb2dXM0J5WlhaVGRIbHNhVzVuTG1Oc1lYTnpUbUZ0WlN3Z2MzUjViR2x1Wnk1amJHRnpjMDVoYldWZFhHNGdJQ0FnSUNBdVptbHNkR1Z5S0VKdmIyeGxZVzRwWEc0Z0lDQWdJQ0F1YW05cGJpZ25JQ2NwTEZ4dUlDQWdJSE4wZVd4bE9pQjdJQzR1TGlod2NtVjJVM1I1YkdsdVp5NXpkSGxzWlNCOGZDQjdmU2tzSUM0dUxpaHpkSGxzYVc1bkxuTjBlV3hsSUh4OElIdDlLU0I5TEZ4dUlDQjlLVHRjYm4wN1hHNWNibU52Ym5OMElHMWxjbWRsVTNSNWJHbHVaeUE5SUNoY2JpQWdZM1Z6ZEc5dFUzUjViR2x1WnpvZ1UzUjViR2x1WjFaaGJIVmxMRnh1SUNCa1pXWmhkV3gwVTNSNWJHbHVaem9nVTNSNWJHbHVaMVpoYkhWbFhHNHBPaUJUZEhsc2FXNW5WbUZzZFdVZ2ZDQjFibVJsWm1sdVpXUWdQVDRnZTF4dUlDQnBaaUFvWTNWemRHOXRVM1I1YkdsdVp5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1JsWm1GMWJIUlRkSGxzYVc1bk8xeHVJQ0I5WEc0Z0lHbG1JQ2hrWldaaGRXeDBVM1I1YkdsdVp5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnY21WMGRYSnVJR04xYzNSdmJWTjBlV3hwYm1jN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCamRYTjBiMjFVZVhCbElEMGdkSGx3Wlc5bUlHTjFjM1J2YlZOMGVXeHBibWM3WEc0Z0lHTnZibk4wSUdSbFptRjFiSFJVZVhCbElEMGdkSGx3Wlc5bUlHUmxabUYxYkhSVGRIbHNhVzVuTzF4dVhHNGdJSE4zYVhSamFDQW9ZM1Z6ZEc5dFZIbHdaU2tnZTF4dUlDQWdJR05oYzJVZ0ozTjBjbWx1WnljNlhHNGdJQ0FnSUNCemQybDBZMmdnS0dSbFptRjFiSFJVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozTjBjbWx1WnljNlhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGdGtaV1poZFd4MFUzUjViR2x1Wnl3Z1kzVnpkRzl0VTNSNWJHbHVaMTB1Wm1sc2RHVnlLRUp2YjJ4bFlXNHBMbXB2YVc0b0p5QW5LVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5iMkpxWldOMEp6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV1Z5WjJWeUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlRvZ1kzVnpkRzl0VTNSNWJHbHVaeUJoY3lCemRISnBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlRvZ1pHVm1ZWFZzZEZOMGVXeHBibWNnWVhNZ1ExTlRMbEJ5YjNCbGNuUnBaWE04YzNSeWFXNW5JSHdnYm5WdFltVnlQaXhjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBblpuVnVZM1JwYjI0bk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9jM1I1YkdsdVp6b2dVM1I1YkdsdVp5d2dMaTR1WVhKbmN6b2dZVzU1VzEwcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYSm5aWElvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U2SUdOMWMzUnZiVk4wZVd4cGJtY2dZWE1nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa29LR1JsWm1GMWJIUlRkSGxzYVc1bklHRnpJRk4wZVd4cGJtZFdZV3gxWlVaMWJtTjBhVzl1S1NoemRIbHNhVzVuTENBdUxpNWhjbWR6S1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkdlltcGxZM1FuT2x4dUlDQWdJQ0FnYzNkcGRHTm9JQ2hrWldaaGRXeDBWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkemRISnBibWNuT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdFpYSm5aWElvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxPaUJrWldaaGRXeDBVM1I1YkdsdVp5QmhjeUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVG9nWTNWemRHOXRVM1I1YkdsdVp5QmhjeUJEVTFNdVVISnZjR1Z5ZEdsbGN6eHpkSEpwYm1jZ2ZDQnVkVzFpWlhJK0xGeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2R2WW1wbFkzUW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVMaTRvWkdWbVlYVnNkRk4wZVd4cGJtY2dZWE1nUTFOVExsQnliM0JsY25ScFpYTThjM1J5YVc1bklId2diblZ0WW1WeVBpa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBdUxpNG9ZM1Z6ZEc5dFUzUjViR2x1WnlCaGN5QkRVMU11VUhKdmNHVnlkR2xsY3p4emRISnBibWNnZkNCdWRXMWlaWEkrS1N4Y2JpQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZG1kVzVqZEdsdmJpYzZYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2h6ZEhsc2FXNW5PaUJUZEhsc2FXNW5MQ0F1TGk1aGNtZHpPaUJoYm5sYlhTa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxjbWRsY2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxPaUJqZFhOMGIyMVRkSGxzYVc1bklHRnpJRU5UVXk1UWNtOXdaWEowYVdWelBITjBjbWx1WnlCOElHNTFiV0psY2o0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Nnb1pHVm1ZWFZzZEZOMGVXeHBibWNnWVhNZ1UzUjViR2x1WjFaaGJIVmxSblZ1WTNScGIyNHBLSE4wZVd4cGJtY3NJQzR1TG1GeVozTXBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdKMloxYm1OMGFXOXVKenBjYmlBZ0lDQWdJSE4zYVhSamFDQW9aR1ZtWVhWc2RGUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYzNSeWFXNW5KenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0hOMGVXeHBibWNzSUM0dUxtRnlaM01wSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWTNWemRHOXRVM1I1YkdsdVp5QmhjeUJUZEhsc2FXNW5WbUZzZFdWR2RXNWpkR2x2Ymlrb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGNtZGxjaWh6ZEhsc2FXNW5LU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsT2lCa1pXWmhkV3gwVTNSNWJHbHVaeUJoY3lCemRISnBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F1TGk1aGNtZHpYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkdlltcGxZM1FuT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2MzUjViR2x1Wnl3Z0xpNHVZWEpuY3lrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNoamRYTjBiMjFUZEhsc2FXNW5JR0Z6SUZOMGVXeHBibWRXWVd4MVpVWjFibU4wYVc5dUtTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnlaMlZ5S0hOMGVXeHBibWNwS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVG9nWkdWbVlYVnNkRk4wZVd4cGJtY2dZWE1nUTFOVExsQnliM0JsY25ScFpYTThjM1J5YVc1bklId2diblZ0WW1WeVBpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDNHVMbUZ5WjNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMloxYm1OMGFXOXVKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0hOMGVXeHBibWNzSUM0dUxtRnlaM01wSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWTNWemRHOXRVM1I1YkdsdVp5QmhjeUJUZEhsc2FXNW5WbUZzZFdWR2RXNWpkR2x2Ymlrb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNoa1pXWmhkV3gwVTNSNWJHbHVaeUJoY3lCVGRIbHNhVzVuVm1Gc2RXVkdkVzVqZEdsdmJpa29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdsdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVMaTVoY21kelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNrZ1lYTWdVM1I1YkdsdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0xpNHVZWEpuYzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dVkyOXVjM1FnYldWeVoyVlRkSGxzYVc1bmN5QTlJQ2hjYmlBZ1kzVnpkRzl0VTNSNWJHbHVaM002SUZOMGVXeHBibWREYjI1bWFXY3NYRzRnSUdSbFptRjFiSFJUZEhsc2FXNW5jem9nVTNSNWJHbHVaME52Ym1acFoxeHVLVG9nVTNSNWJHbHVaME52Ym1acFp5QTlQaUI3WEc0Z0lHTnZibk4wSUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loa1pXWmhkV3gwVTNSNWJHbHVaM01wTzF4dUlDQm1iM0lnS0dOdmJuTjBJR3RsZVNCcGJpQmpkWE4wYjIxVGRIbHNhVzVuY3lrZ2UxeHVJQ0FnSUdsbUlDaHJaWGx6TG1sdVpHVjRUMllvYTJWNUtTQTlQVDBnTFRFcElHdGxlWE11Y0hWemFDaHJaWGtwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUd0bGVYTXVjbVZrZFdObEtGeHVJQ0FnSUNodFpYSm5aV1JUZEhsc2FXNW5MQ0JyWlhrcElEMCtJQ2hjYmlBZ0lDQWdJQ2h0WlhKblpXUlRkSGxzYVc1blcydGxlU0JoY3lCclpYbHZaaUJUZEhsc2FXNW5RMjl1Wm1sblhTQTlJRzFsY21kbFUzUjViR2x1WnloY2JpQWdJQ0FnSUNBZ1kzVnpkRzl0VTNSNWJHbHVaM05iYTJWNVhTQmhjeUJUZEhsc2FXNW5WbUZzZFdVc1hHNGdJQ0FnSUNBZ0lHUmxabUYxYkhSVGRIbHNhVzVuYzF0clpYbGRJR0Z6SUZOMGVXeHBibWRXWVd4MVpWeHVJQ0FnSUNBZ0tTQmhjeUJUZEhsc2FXNW5WbUZzZFdVcExGeHVJQ0FnSUNBZ2JXVnlaMlZrVTNSNWJHbHVaMXh1SUNBZ0lDa3NYRzRnSUNBZ2UzMGdZWE1nVTNSNWJHbHVaME52Ym1acFoxeHVJQ0FwTzF4dWZUdGNibHh1WTI5dWMzUWdaMlYwVTNSNWJHbHVaMEo1UzJWNWN5QTlJQ2hjYmlBZ2JXVnlaMlZrVTNSNWJHbHVaem9nVTNSNWJHbHVaME52Ym1acFp5eGNiaUFnYTJWNWN6b2dLSE4wY21sdVp5QjhJR1poYkhObElId2dkVzVrWldacGJtVmtLU0I4SUNoemRISnBibWNnZkNCbVlXeHpaU0I4SUhWdVpHVm1hVzVsWkNsYlhTeGNiaUFnTGk0dVlYSm5jem9nWVc1NVcxMWNiaWs2SUZOMGVXeHBibWNnUFQ0Z2UxeHVJQ0JwWmlBb2EyVjVjeUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9iV1Z5WjJWa1UzUjViR2x1WnlCaGN5QjFibXR1YjNkdUtTQmhjeUJUZEhsc2FXNW5PMXh1SUNCOVhHNWNiaUFnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0d0bGVYTXBLU0I3WEc0Z0lDQWdhMlY1Y3lBOUlGdHJaWGx6WFR0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUhOMGVXeGxjeUE5SUd0bGVYTmNiaUFnSUNBdWJXRndLQ2hyWlhrcElEMCtJRzFsY21kbFpGTjBlV3hwYm1kYmEyVjVJR0Z6SUhOMGNtbHVaMTBwWEc0Z0lDQWdMbVpwYkhSbGNpaENiMjlzWldGdUtUdGNibHh1SUNCamIyNXpkQ0J3Y205d2N5QTlJSE4wZVd4bGN5NXlaV1IxWTJVb1hHNGdJQ0FnS0c5aWFpd2djeWtnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQnZZbW91WTJ4aGMzTk9ZVzFsSUQwZ1cyOWlhaTVqYkdGemMwNWhiV1VzSUhOZExtWnBiSFJsY2loQ2IyOXNaV0Z1S1M1cWIybHVLQ2NnSnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCeklEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnSUNCdlltb3VjM1I1YkdVZ1BTQjdJQzR1TG05aWFpNXpkSGxzWlN3Z0xpNHVjeUI5TzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnY3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCdlltb2dQU0I3SUM0dUxtOWlhaXdnTGk0dWN5aHZZbW9zSUM0dUxtRnlaM01wSUgwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ2ZTeGNiaUFnSUNCN0lHTnNZWE56VG1GdFpUb2dKeWNzSUhOMGVXeGxPaUI3ZlNCOVhHNGdJQ2s3WEc1Y2JpQWdhV1lnS0NGd2NtOXdjeTVqYkdGemMwNWhiV1VwSUh0Y2JpQWdJQ0JrWld4bGRHVWdjSEp2Y0hNdVkyeGhjM05PWVcxbE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0U5aWFtVmpkQzVyWlhsektIQnliM0J6TG5OMGVXeGxLUzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCa1pXeGxkR1VnY0hKdmNITXVjM1I1YkdVN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NISnZjSE03WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2FXNTJaWEowUW1GelpURTJWR2hsYldVZ1BTQW9ZbUZ6WlRFMlZHaGxiV1U2SUVKaGMyVXhObFJvWlcxbEtUb2dRbUZ6WlRFMlZHaGxiV1VnUFQ1Y2JpQWdUMkpxWldOMExtdGxlWE1vWW1GelpURTJWR2hsYldVcExuSmxaSFZqWlNoY2JpQWdJQ0FvZEN3Z2EyVjVLU0E5UGlBb1hHNGdJQ0FnSUNBb2RGdHJaWGtnWVhNZ2EyVjViMllnUW1GelpURTJWR2hsYldWZElEMGdMMTVpWVhObEx5NTBaWE4wS0d0bGVTbGNiaUFnSUNBZ0lDQWdQeUJwYm5abGNuUkRiMnh2Y2loaVlYTmxNVFpVYUdWdFpWdHJaWGtnWVhNZ2EyVjViMllnUW1GelpURTJWR2hsYldWZEtWeHVJQ0FnSUNBZ0lDQTZJR3RsZVNBOVBUMGdKM05qYUdWdFpTZGNiaUFnSUNBZ0lDQWdQeUJpWVhObE1UWlVhR1Z0WlZ0clpYbGRJQ3NnSnpwcGJuWmxjblJsWkNkY2JpQWdJQ0FnSUNBZ09pQmlZWE5sTVRaVWFHVnRaVnRyWlhrZ1lYTWdhMlY1YjJZZ1FtRnpaVEUyVkdobGJXVmRLU3hjYmlBZ0lDQWdJSFJjYmlBZ0lDQXBMRnh1SUNBZ0lIdDlJR0Z6SUVKaGMyVXhObFJvWlcxbFhHNGdJQ2s3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JqY21WaGRHVlRkSGxzYVc1bklEMGdZM1Z5Y25rb1hHNGdJQ2hjYmlBZ0lDQm5aWFJUZEhsc2FXNW5Sbkp2YlVKaGMyVXhOam9nS0dKaGMyVXhObFJvWlcxbE9pQkNZWE5sTVRaVWFHVnRaU2tnUFQ0Z1UzUjViR2x1WjBOdmJtWnBaeXhjYmlBZ0lDQnZjSFJwYjI1ek9pQjdYRzRnSUNBZ0lDQmtaV1poZFd4MFFtRnpaVEUyUHpvZ1FtRnpaVEUyVkdobGJXVTdYRzRnSUNBZ0lDQmlZWE5sTVRaVWFHVnRaWE0vT2lCN0lGdDBhR1Z0WlU1aGJXVTZJSE4wY21sdVoxMDZJRUpoYzJVeE5sUm9aVzFsSUgwN1hHNGdJQ0FnZlNBOUlIdDlMRnh1SUNBZ0lIUm9aVzFsVDNKVGRIbHNhVzVuT2lCVWFHVnRaU0E5SUh0OUxGeHVJQ0FnSUM0dUxtRnlaM05jYmlBZ0tUb2dVM1I1YkdsdVowWjFibU4wYVc5dUlEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHUmxabUYxYkhSQ1lYTmxNVFlnUFNCRVJVWkJWVXhVWDBKQlUwVXhOaXdnWW1GelpURTJWR2hsYldWeklEMGdiblZzYkNCOUlEMGdiM0IwYVc5dWN6dGNibHh1SUNBZ0lHTnZibk4wSUdKaGMyVXhObFJvWlcxbElEMGdaMlYwUW1GelpURTJWR2hsYldVb2RHaGxiV1ZQY2xOMGVXeHBibWNzSUdKaGMyVXhObFJvWlcxbGN5azdYRzRnSUNBZ2FXWWdLR0poYzJVeE5sUm9aVzFsS1NCN1hHNGdJQ0FnSUNCMGFHVnRaVTl5VTNSNWJHbHVaeUE5SUh0Y2JpQWdJQ0FnSUNBZ0xpNHVZbUZ6WlRFMlZHaGxiV1VzWEc0Z0lDQWdJQ0FnSUM0dUxpaDBhR1Z0WlU5eVUzUjViR2x1WnlCaGN5QkNZWE5sTVRaVWFHVnRaU0I4SUZOMGVXeHBibWREYjI1bWFXY3BMRnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCMGFHVnRaU0E5SUVKQlUwVXhObDlMUlZsVExuSmxaSFZqWlNoY2JpQWdJQ0FnSUNoMExDQnJaWGtwSUQwK0lDaGNiaUFnSUNBZ0lDQWdLSFJiYTJWNUlHRnpJR3RsZVc5bUlFSmhjMlV4TmxSb1pXMWxYU0E5WEc0Z0lDQWdJQ0FnSUNBZ0tIUm9aVzFsVDNKVGRIbHNhVzVuSUdGeklFSmhjMlV4TmxSb1pXMWxLVnRyWlhrZ1lYTWdhMlY1YjJZZ1FtRnpaVEUyVkdobGJXVmRJSHg4WEc0Z0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEVKaGMyVXhObHRyWlhrZ1lYTWdhMlY1YjJZZ1FtRnpaVEUyVkdobGJXVmRLU3hjYmlBZ0lDQWdJQ0FnZEZ4dUlDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUh0OUlHRnpJRUpoYzJVeE5sUm9aVzFsWEc0Z0lDQWdLVHRjYmx4dUlDQWdJR052Ym5OMElHTjFjM1J2YlZOMGVXeHBibWNnUFNCUFltcGxZM1F1YTJWNWN5aDBhR1Z0WlU5eVUzUjViR2x1WnlrdWNtVmtkV05sS0Z4dUlDQWdJQ0FnS0hNc0lHdGxlU2tnUFQ1Y2JpQWdJQ0FnSUNBZ1FrRlRSVEUyWDB0RldWTXVhVzVrWlhoUFppaHJaWGtwSUQwOVBTQXRNVnh1SUNBZ0lDQWdJQ0FnSUQ4Z0tDaHpXMnRsZVYwZ1BTQW9kR2hsYldWUGNsTjBlV3hwYm1jZ1lYTWdVM1I1YkdsdVowTnZibVpwWnlsYmEyVjVYU2tzSUhNcFhHNGdJQ0FnSUNBZ0lDQWdPaUJ6TEZ4dUlDQWdJQ0FnZTMwZ1lYTWdVM1I1YkdsdVowTnZibVpwWjF4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmtaV1poZFd4MFUzUjViR2x1WnlBOUlHZGxkRk4wZVd4cGJtZEdjbTl0UW1GelpURTJLSFJvWlcxbEtUdGNibHh1SUNBZ0lHTnZibk4wSUcxbGNtZGxaRk4wZVd4cGJtY2dQU0J0WlhKblpWTjBlV3hwYm1kektHTjFjM1J2YlZOMGVXeHBibWNzSUdSbFptRjFiSFJUZEhsc2FXNW5LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmpkWEp5ZVNoblpYUlRkSGxzYVc1blFubExaWGx6TENBeUtTaHRaWEpuWldSVGRIbHNhVzVuTENBdUxpNWhjbWR6S1R0Y2JpQWdmU3hjYmlBZ00xeHVLVHRjYmx4dVkyOXVjM1FnYVhOVGRIbHNhVzVuUTI5dVptbG5JRDBnS0hSb1pXMWxPaUJVYUdWdFpTazZJSFJvWlcxbElHbHpJRk4wZVd4cGJtZERiMjVtYVdjZ1BUNWNiaUFnSVNFb2RHaGxiV1VnWVhNZ1UzUjViR2x1WjBOdmJtWnBaeWt1WlhoMFpXNWtPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdaMlYwUW1GelpURTJWR2hsYldVZ1BTQW9YRzRnSUhSb1pXMWxPaUJVYUdWdFpTeGNiaUFnWW1GelpURTJWR2hsYldWelB6b2dleUJiZEdobGJXVk9ZVzFsT2lCemRISnBibWRkT2lCQ1lYTmxNVFpVYUdWdFpTQjlJSHdnYm5Wc2JGeHVLVG9nUW1GelpURTJWR2hsYldVZ2ZDQjFibVJsWm1sdVpXUWdQVDRnZTF4dUlDQnBaaUFvZEdobGJXVWdKaVlnYVhOVGRIbHNhVzVuUTI5dVptbG5LSFJvWlcxbEtTQW1KaUIwYUdWdFpTNWxlSFJsYm1RcElIdGNiaUFnSUNCMGFHVnRaU0E5SUhSb1pXMWxMbVY0ZEdWdVpDQmhjeUJ6ZEhKcGJtY2dmQ0JDWVhObE1UWlVhR1Z0WlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkR2hsYldVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdZMjl1YzNRZ1czUm9aVzFsVG1GdFpTd2diVzlrYVdacFpYSmRJRDBnZEdobGJXVXVjM0JzYVhRb0p6b25LVHRjYmlBZ0lDQnBaaUFvWW1GelpURTJWR2hsYldWektTQjdYRzRnSUNBZ0lDQjBhR1Z0WlNBOUlHSmhjMlV4TmxSb1pXMWxjMXQwYUdWdFpVNWhiV1ZkTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR1Z0WlNBOUlHSmhjMlV4Tmx0MGFHVnRaVTVoYldVZ1lYTWdhMlY1YjJZZ2RIbHdaVzltSUdKaGMyVXhObDA3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h0YjJScFptbGxjaUE5UFQwZ0oybHVkbVZ5ZEdWa0p5a2dlMXh1SUNBZ0lDQWdkR2hsYldVZ1BTQnBiblpsY25SQ1lYTmxNVFpVYUdWdFpTaDBhR1Z0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhSb1pXMWxJQ1ltSUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoMGFHVnRaU3dnSjJKaGMyVXdNQ2NwWEc0Z0lDQWdQeUFvZEdobGJXVWdZWE1nUW1GelpURTJWR2hsYldVcFhHNGdJQ0FnT2lCMWJtUmxabWx1WldRN1hHNTlPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdhVzUyWlhKMFZHaGxiV1VnUFNBb2RHaGxiV1U2SUZSb1pXMWxJSHdnZFc1a1pXWnBibVZrS1RvZ1ZHaGxiV1VnZkNCMWJtUmxabWx1WldRZ1BUNGdlMXh1SUNCcFppQW9kSGx3Wlc5bUlIUm9aVzFsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCZ0pIdDBhR1Z0WlgwNmFXNTJaWEowWldSZ08xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hSb1pXMWxJQ1ltSUdselUzUjViR2x1WjBOdmJtWnBaeWgwYUdWdFpTa2dKaVlnZEdobGJXVXVaWGgwWlc1a0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjBhR1Z0WlM1bGVIUmxibVFnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2V5QXVMaTUwYUdWdFpTd2daWGgwWlc1a09pQmdKSHQwYUdWdFpTNWxlSFJsYm1SOU9tbHVkbVZ5ZEdWa1lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBdUxpNTBhR1Z0WlN4Y2JpQWdJQ0FnSUdWNGRHVnVaRG9nYVc1MlpYSjBRbUZ6WlRFMlZHaGxiV1VvZEdobGJXVXVaWGgwWlc1a0lHRnpJRUpoYzJVeE5sUm9aVzFsS1N4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFJvWlcxbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdsdWRtVnlkRUpoYzJVeE5sUm9aVzFsS0hSb1pXMWxJR0Z6SUVKaGMyVXhObFJvWlcxbEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjBhR1Z0WlR0Y2JuMDdYRzVjYm1WNGNHOXlkQ0I3SUVKaGMyVXhObFJvWlcxbElIMDdYRzVsZUhCdmNuUWdLaUJtY205dElDY3VMM1I1Y0dWekp6dGNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiWFgwPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfSlNPTkFycm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OQXJyb3dcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSXRlbVJhbmdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJdGVtUmFuZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSXRlbVJhbmdlKTtcblxuICBmdW5jdGlvbiBJdGVtUmFuZ2UocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSXRlbVJhbmdlKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXhwYW5kZWQ6ICFfdGhpcy5zdGF0ZS5leHBhbmRlZFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGV4cGFuZGVkOiBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEl0ZW1SYW5nZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc3R5bGluZyA9IF90aGlzJHByb3BzLnN0eWxpbmcsXG4gICAgICAgICAgZnJvbSA9IF90aGlzJHByb3BzLmZyb20sXG4gICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50byxcbiAgICAgICAgICByZW5kZXJDaGlsZE5vZGVzID0gX3RoaXMkcHJvcHMucmVuZGVyQ2hpbGROb2RlcyxcbiAgICAgICAgICBub2RlVHlwZSA9IF90aGlzJHByb3BzLm5vZGVUeXBlO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZXhwYW5kZWQgPyAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHN0eWxpbmcoJ2l0ZW1SYW5nZScsIHRoaXMuc3RhdGUuZXhwYW5kZWQpLCByZW5kZXJDaGlsZE5vZGVzKHRoaXMucHJvcHMsIGZyb20sIHRvKSkgOiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBzdHlsaW5nKCdpdGVtUmFuZ2UnLCB0aGlzLnN0YXRlLmV4cGFuZGVkKSwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSwgLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTkFycm93W1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBub2RlVHlwZTogbm9kZVR5cGUsXG4gICAgICAgIHN0eWxpbmc6IHN0eWxpbmcsXG4gICAgICAgIGV4cGFuZGVkOiBmYWxzZSxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgYXJyb3dTdHlsZTogXCJkb3VibGVcIlxuICAgICAgfSksIFwiXCIuY29uY2F0KGZyb20sIFwiIC4uLiBcIikuY29uY2F0KHRvKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEl0ZW1SYW5nZTtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEl0ZW1SYW5nZTtcblxuX2RlZmluZVByb3BlcnR5KEl0ZW1SYW5nZSwgXCJwcm9wVHlwZXNcIiwge1xuICBzdHlsaW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGZyb206IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlci5pc1JlcXVpcmVkLFxuICB0bzogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHJlbmRlckNoaWxkTm9kZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm9kZVR5cGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5SmRHVnRVbUZ1WjJVdWRITjRJbDBzSW01aGJXVnpJanBiSWtsMFpXMVNZVzVuWlNJc0luQnliM0J6SWl3aWMyVjBVM1JoZEdVaUxDSmxlSEJoYm1SbFpDSXNJbk4wWVhSbElpd2ljM1I1YkdsdVp5SXNJbVp5YjIwaUxDSjBieUlzSW5KbGJtUmxja05vYVd4a1RtOWtaWE1pTENKdWIyUmxWSGx3WlNJc0ltaGhibVJzWlVOc2FXTnJJaXdpVW1WaFkzUWlMQ0pEYjIxd2IyNWxiblFpTENKUWNtOXdWSGx3WlhNaUxDSm1kVzVqSWl3aWFYTlNaWEYxYVhKbFpDSXNJbTUxYldKbGNpSXNJbk4wY21sdVp5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVGQk96dEJRVU5CT3p0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VGbGNVSkJMRk03T3pzN08wRkJVMjVDTEhGQ1FVRlpReXhMUVVGYUxFVkJRVEJDTzBGQlFVRTdPMEZCUVVFN08wRkJRM2hDTERoQ1FVRk5RU3hMUVVGT096dEJRVVIzUWl4clJVRTJRbG9zV1VGQlRUdEJRVU5zUWl4WlFVRkxReXhSUVVGTUxFTkJRV003UVVGQlJVTXNVVUZCUVVFc1VVRkJVU3hGUVVGRkxFTkJRVU1zVFVGQlMwTXNTMEZCVEN4RFFVRlhSRHRCUVVGNFFpeFBRVUZrTzBGQlEwUXNTMEV2UW5sQ096dEJRVVY0UWl4VlFVRkxReXhMUVVGTUxFZEJRV0U3UVVGQlJVUXNUVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJRVm9zUzBGQllqdEJRVVozUWp0QlFVZDZRanM3T3pzMlFrRkZVVHRCUVVGQkxIZENRVU50UkN4TFFVRkxSaXhMUVVSNFJEdEJRVUZCTEZWQlEwTkpMRTlCUkVRc1pVRkRRMEVzVDBGRVJEdEJRVUZCTEZWQlExVkRMRWxCUkZZc1pVRkRWVUVzU1VGRVZqdEJRVUZCTEZWQlEyZENReXhGUVVSb1FpeGxRVU5uUWtFc1JVRkVhRUk3UVVGQlFTeFZRVU52UWtNc1owSkJSSEJDTEdWQlEyOUNRU3huUWtGRWNFSTdRVUZCUVN4VlFVTnpRME1zVVVGRWRFTXNaVUZEYzBOQkxGRkJSSFJETzBGQlIxQXNZVUZCVHl4TFFVRkxUQ3hMUVVGTUxFTkJRVmRFTEZGQlFWZ3NaMEpCUTB3c2RVTkJRVk5GTEU5QlFVOHNRMEZCUXl4WFFVRkVMRVZCUVdNc1MwRkJTMFFzUzBGQlRDeERRVUZYUkN4UlFVRjZRaXhEUVVGb1FpeEZRVU5IU3l4blFrRkJaMElzUTBGQlF5eExRVUZMVUN4TFFVRk9MRVZCUVdGTExFbEJRV0lzUlVGQmJVSkRMRVZCUVc1Q0xFTkJSRzVDTEVOQlJFc3NaMEpCUzB3c2IwUkJRMDFHTEU5QlFVOHNRMEZCUXl4WFFVRkVMRVZCUVdNc1MwRkJTMFFzUzBGQlRDeERRVUZYUkN4UlFVRjZRaXhEUVVSaU8wRkJSVVVzVVVGQlFTeFBRVUZQTEVWQlFVVXNTMEZCUzA4N1FVRkdhRUlzZFVKQlNVVXNaME5CUVVNc2NVSkJRVVE3UVVGRFJTeFJRVUZCTEZGQlFWRXNSVUZCUlVRc1VVRkVXanRCUVVWRkxGRkJRVUVzVDBGQlR5eEZRVUZGU2l4UFFVWllPMEZCUjBVc1VVRkJRU3hSUVVGUkxFVkJRVVVzUzBGSVdqdEJRVWxGTEZGQlFVRXNUMEZCVHl4RlFVRkZMRXRCUVV0TExGZEJTbWhDTzBGQlMwVXNVVUZCUVN4VlFVRlZMRVZCUVVNN1FVRk1ZaXhSUVVwR0xGbEJWMDFLTEVsQldFNHNhMEpCVjJ0Q1F5eEZRVmhzUWl4RlFVeEdPMEZCYlVKRU96czdPMFZCY0VOdlEwa3NhMEpCUVUxRExGTTdPenM3WjBKQlFYaENXaXhUTEdWQlEwRTdRVUZEYWtKTExFVkJRVUZCTEU5QlFVOHNSVUZCUlZFc2MwSkJRVlZETEVsQlFWWXNRMEZCWlVNc1ZVRkVVRHRCUVVWcVFsUXNSVUZCUVVFc1NVRkJTU3hGUVVGRlR5eHpRa0ZCVlVjc1RVRkJWaXhEUVVGcFFrUXNWVUZHVGp0QlFVZHFRbElzUlVGQlFVRXNSVUZCUlN4RlFVRkZUU3h6UWtGQlZVY3NUVUZCVml4RFFVRnBRa1FzVlVGSVNqdEJRVWxxUWxBc1JVRkJRVUVzWjBKQlFXZENMRVZCUVVWTExITkNRVUZWUXl4SlFVRldMRU5CUVdWRExGVkJTbWhDTzBGQlMycENUaXhGUVVGQlFTeFJRVUZSTEVWQlFVVkpMSE5DUVVGVlNTeE5RVUZXTEVOQlFXbENSanRCUVV4V0xFTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JLVTA5T1FYSnliM2NnWm5KdmJTQW5MaTlLVTA5T1FYSnliM2NuTzF4dWFXMXdiM0owSUhzZ1EybHlZM1ZzWVhKUWNtOXdjMUJoYzNObFpGUm9jbTkxWjJoSmRHVnRVbUZ1WjJVZ2ZTQm1jbTl0SUNjdUwzUjVjR1Z6Snp0Y2JseHVhVzUwWlhKbVlXTmxJRkJ5YjNCeklHVjRkR1Z1WkhNZ1EybHlZM1ZzWVhKUWNtOXdjMUJoYzNObFpGUm9jbTkxWjJoSmRHVnRVbUZ1WjJVZ2UxeHVJQ0JrWVhSaE9pQmhibms3WEc0Z0lHNXZaR1ZVZVhCbE9pQnpkSEpwYm1jN1hHNGdJR1p5YjIwNklHNTFiV0psY2p0Y2JpQWdkRzg2SUc1MWJXSmxjanRjYmlBZ2NtVnVaR1Z5UTJocGJHUk9iMlJsY3pvZ0tIQnliM0J6T2lCUWNtOXdjeXdnWm5KdmJUb2diblZ0WW1WeUxDQjBiem9nYm5WdFltVnlLU0E5UGlCU1pXRmpkQzVTWldGamRFNXZaR1U3WEc1OVhHNWNibWx1ZEdWeVptRmpaU0JUZEdGMFpTQjdYRzRnSUdWNGNHRnVaR1ZrT2lCaWIyOXNaV0Z1TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCSmRHVnRVbUZ1WjJVZ1pYaDBaVzVrY3lCU1pXRmpkQzVEYjIxd2IyNWxiblE4VUhKdmNITXNJRk4wWVhSbFBpQjdYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnYzNSNWJHbHVaem9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQm1jbTl0T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TG1selVtVnhkV2x5WldRc1hHNGdJQ0FnZEc4NklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCeVpXNWtaWEpEYUdsc1pFNXZaR1Z6T2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJRzV2WkdWVWVYQmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJQ0FnYzNWd1pYSW9jSEp2Y0hNcE8xeHVJQ0FnSUhSb2FYTXVjM1JoZEdVZ1BTQjdJR1Y0Y0dGdVpHVmtPaUJtWVd4elpTQjlPMXh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2djM1I1YkdsdVp5d2dabkp2YlN3Z2RHOHNJSEpsYm1SbGNrTm9hV3hrVG05a1pYTXNJRzV2WkdWVWVYQmxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1JoZEdVdVpYaHdZVzVrWldRZ1B5QW9YRzRnSUNBZ0lDQThaR2wySUhzdUxpNXpkSGxzYVc1bktDZHBkR1Z0VW1GdVoyVW5MQ0IwYUdsekxuTjBZWFJsTG1WNGNHRnVaR1ZrS1gwK1hHNGdJQ0FnSUNBZ0lIdHlaVzVrWlhKRGFHbHNaRTV2WkdWektIUm9hWE11Y0hKdmNITXNJR1p5YjIwc0lIUnZLWDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUhzdUxpNXpkSGxzYVc1bktDZHBkR1Z0VW1GdVoyVW5MQ0IwYUdsekxuTjBZWFJsTG1WNGNHRnVaR1ZrS1gxY2JpQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN2RHaHBjeTVvWVc1a2JHVkRiR2xqYTMxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ1BFcFRUMDVCY25KdmQxeHVJQ0FnSUNBZ0lDQWdJRzV2WkdWVWVYQmxQWHR1YjJSbFZIbHdaWDFjYmlBZ0lDQWdJQ0FnSUNCemRIbHNhVzVuUFh0emRIbHNhVzVuZlZ4dUlDQWdJQ0FnSUNBZ0lHVjRjR0Z1WkdWa1BYdG1ZV3h6WlgxY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdDBhR2x6TG1oaGJtUnNaVU5zYVdOcmZWeHVJQ0FnSUNBZ0lDQWdJR0Z5Y205M1UzUjViR1U5WENKa2IzVmliR1ZjSWx4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQjdZQ1I3Wm5KdmJYMGdMaTR1SUNSN2RHOTlZSDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQm9ZVzVrYkdWRGJHbGpheUE5SUNncElEMCtJSHRjYmlBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ1pYaHdZVzVrWldRNklDRjBhR2x6TG5OMFlYUmxMbVY0Y0dGdVpHVmtJSDBwTzF4dUlDQjlPMXh1ZlZ4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0pTT05OZXN0ZWROb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OTmVzdGVkTm9kZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG4vLyBSZXR1cm5zIHRoZSBcIm4gSXRlbXNcIiBzdHJpbmcgZm9yIHRoaXMgbm9kZSxcbi8vIGdlbmVyYXRpbmcgYW5kIGNhY2hpbmcgaXQgaWYgaXQgaGFzbid0IGJlZW4gY3JlYXRlZCB5ZXQuXG5mdW5jdGlvbiBjcmVhdGVJdGVtU3RyaW5nKGRhdGEpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KGRhdGEubGVuZ3RoLCBcIiBcIikuY29uY2F0KGRhdGEubGVuZ3RoICE9PSAxID8gJ2l0ZW1zJyA6ICdpdGVtJyk7XG59XG5cbi8vIENvbmZpZ3VyZXMgPEpTT05OZXN0ZWROb2RlPiB0byByZW5kZXIgYW4gQXJyYXlcbnZhciBKU09OQXJyYXlOb2RlID0gZnVuY3Rpb24gSlNPTkFycmF5Tm9kZShfcmVmKSB7XG4gIHZhciBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZGF0YVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05OZXN0ZWROb2RlW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGF0YTogZGF0YSxcbiAgICBub2RlVHlwZTogXCJBcnJheVwiLFxuICAgIG5vZGVUeXBlSW5kaWNhdG9yOiBcIltdXCIsXG4gICAgY3JlYXRlSXRlbVN0cmluZzogY3JlYXRlSXRlbVN0cmluZyxcbiAgICBleHBhbmRhYmxlOiBkYXRhLmxlbmd0aCA+IDBcbiAgfSkpO1xufTtcblxuSlNPTkFycmF5Tm9kZS5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5XG59O1xudmFyIF9kZWZhdWx0ID0gSlNPTkFycmF5Tm9kZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OUtVMDlPUVhKeVlYbE9iMlJsTG5SemVDSmRMQ0p1WVcxbGN5STZXeUpqY21WaGRHVkpkR1Z0VTNSeWFXNW5JaXdpWkdGMFlTSXNJbXhsYm1kMGFDSXNJa3BUVDA1QmNuSmhlVTV2WkdVaUxDSndjbTl3Y3lJc0luQnliM0JVZVhCbGN5SXNJbEJ5YjNCVWVYQmxjeUlzSW1GeWNtRjVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlFVRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3UVVGSFFUdEJRVU5CTzBGQlEwRXNVMEZCVTBFc1owSkJRVlFzUTBGQk1FSkRMRWxCUVRGQ0xFVkJRWEZETzBGQlEyNURMRzFDUVVGWFFTeEpRVUZFTEVOQlFXOUNReXhOUVVFNVFpeGpRVU5IUkN4SlFVRkVMRU5CUVc5Q1F5eE5RVUZ3UWl4TFFVRXJRaXhEUVVFdlFpeEhRVUZ0UXl4UFFVRnVReXhIUVVFMlF5eE5RVVF2UXp0QlFVZEVPenRCUVU5RU8wRkJRMEVzU1VGQlRVTXNZVUZCTmtNc1IwRkJSeXhUUVVGb1JFRXNZVUZCWjBRN1FVRkJRU3hOUVVGSFJpeEpRVUZJTEZGQlFVZEJMRWxCUVVnN1FVRkJRU3hOUVVGWlJ5eExRVUZhT3p0QlFVRkJMSE5DUVVOd1JDeG5RMEZCUXl3d1FrRkJSQ3hsUVVOTlFTeExRVVJPTzBGQlJVVXNTVUZCUVN4SlFVRkpMRVZCUVVWSUxFbEJSbEk3UVVGSFJTeEpRVUZCTEZGQlFWRXNSVUZCUXl4UFFVaFlPMEZCU1VVc1NVRkJRU3hwUWtGQmFVSXNSVUZCUXl4SlFVcHdRanRCUVV0RkxFbEJRVUVzWjBKQlFXZENMRVZCUVVWRUxHZENRVXh3UWp0QlFVMUZMRWxCUVVFc1ZVRkJWU3hGUVVGRlF5eEpRVUZKTEVOQlFVTkRMRTFCUVV3c1IwRkJZenRCUVU0MVFpeExRVVJ2UkR0QlFVRkJMRU5CUVhSRU96dEJRVmRCUXl4aFFVRmhMRU5CUVVORkxGTkJRV1FzUjBGQk1FSTdRVUZEZUVKS0xFVkJRVUZCTEVsQlFVa3NSVUZCUlVzc2MwSkJRVlZETzBGQlJGRXNRMEZCTVVJN1pVRkpaVW9zWVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElFcFRUMDVPWlhOMFpXUk9iMlJsSUdaeWIyMGdKeTR2U2xOUFRrNWxjM1JsWkU1dlpHVW5PMXh1YVcxd2IzSjBJSHNnUTJseVkzVnNZWEpRY205d2MxQmhjM05sWkZSb2NtOTFaMmhLVTA5T1RtOWtaU0I5SUdaeWIyMGdKeTR2ZEhsd1pYTW5PMXh1WEc0dkx5QlNaWFIxY201eklIUm9aU0JjSW00Z1NYUmxiWE5jSWlCemRISnBibWNnWm05eUlIUm9hWE1nYm05a1pTeGNiaTh2SUdkbGJtVnlZWFJwYm1jZ1lXNWtJR05oWTJocGJtY2dhWFFnYVdZZ2FYUWdhR0Z6YmlkMElHSmxaVzRnWTNKbFlYUmxaQ0I1WlhRdVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWSmRHVnRVM1J5YVc1bktHUmhkR0U2SUdGdWVTa2dlMXh1SUNCeVpYUjFjbTRnWUNSN0tHUmhkR0VnWVhNZ2RXNXJibTkzYmx0ZEtTNXNaVzVuZEdoOUlDUjdYRzRnSUNBZ0tHUmhkR0VnWVhNZ2RXNXJibTkzYmx0ZEtTNXNaVzVuZEdnZ0lUMDlJREVnUHlBbmFYUmxiWE1uSURvZ0oybDBaVzBuWEc0Z0lIMWdPMXh1ZlZ4dVhHNXBiblJsY21aaFkyVWdVSEp2Y0hNZ1pYaDBaVzVrY3lCRGFYSmpkV3hoY2xCeWIzQnpVR0Z6YzJWa1ZHaHliM1ZuYUVwVFQwNU9iMlJsSUh0Y2JpQWdaR0YwWVRvZ1lXNTVPMXh1SUNCdWIyUmxWSGx3WlRvZ2MzUnlhVzVuTzF4dWZWeHVYRzR2THlCRGIyNW1hV2QxY21WeklEeEtVMDlPVG1WemRHVmtUbTlrWlQ0Z2RHOGdjbVZ1WkdWeUlHRnVJRUZ5Y21GNVhHNWpiMjV6ZENCS1UwOU9RWEp5WVhsT2IyUmxPaUJTWldGamRDNUdkVzVqZEdsdmJrTnZiWEJ2Ym1WdWREeFFjbTl3Y3o0Z1BTQW9leUJrWVhSaExDQXVMaTV3Y205d2N5QjlLU0E5UGlBb1hHNGdJRHhLVTA5T1RtVnpkR1ZrVG05a1pWeHVJQ0FnSUhzdUxpNXdjbTl3YzMxY2JpQWdJQ0JrWVhSaFBYdGtZWFJoZlZ4dUlDQWdJRzV2WkdWVWVYQmxQVndpUVhKeVlYbGNJbHh1SUNBZ0lHNXZaR1ZVZVhCbFNXNWthV05oZEc5eVBWd2lXMTFjSWx4dUlDQWdJR055WldGMFpVbDBaVzFUZEhKcGJtYzllMk55WldGMFpVbDBaVzFUZEhKcGJtZDlYRzRnSUNBZ1pYaHdZVzVrWVdKc1pUMTdaR0YwWVM1c1pXNW5kR2dnUGlBd2ZWeHVJQ0F2UGx4dUtUdGNibHh1U2xOUFRrRnljbUY1VG05a1pTNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHUmhkR0U2SUZCeWIzQlVlWEJsY3k1aGNuSmhlU3hjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFcFRUMDVCY25KaGVVNXZaR1U3WEc0aVhYMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIEpTT05BcnJvdyA9IGZ1bmN0aW9uIEpTT05BcnJvdyhfcmVmKSB7XG4gIHZhciBzdHlsaW5nID0gX3JlZi5zdHlsaW5nLFxuICAgICAgYXJyb3dTdHlsZSA9IF9yZWYuYXJyb3dTdHlsZSxcbiAgICAgIGV4cGFuZGVkID0gX3JlZi5leHBhbmRlZCxcbiAgICAgIG5vZGVUeXBlID0gX3JlZi5ub2RlVHlwZSxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2s7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBzdHlsaW5nKCdhcnJvd0NvbnRhaW5lcicsIGFycm93U3R5bGUpLCB7XG4gICAgb25DbGljazogb25DbGlja1xuICB9KSwgLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCBzdHlsaW5nKFsnYXJyb3cnLCAnYXJyb3dTaWduJ10sIG5vZGVUeXBlLCBleHBhbmRlZCwgYXJyb3dTdHlsZSksIFwiXFx1MjVCNlwiLCBhcnJvd1N0eWxlID09PSAnZG91YmxlJyAmJiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHN0eWxpbmcoWydhcnJvd1NpZ24nLCAnYXJyb3dTaWduSW5uZXInXSksIFwiXFx1MjVCNlwiKSkpO1xufTtcblxuSlNPTkFycm93LnByb3BUeXBlcyA9IHtcbiAgc3R5bGluZzogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBhcnJvd1N0eWxlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbJ3NpbmdsZScsICdkb3VibGUnXSksXG4gIGV4cGFuZGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLmlzUmVxdWlyZWQsXG4gIG5vZGVUeXBlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25DbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkXG59O1xuSlNPTkFycm93LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXJyb3dTdHlsZTogJ3NpbmdsZSdcbn07XG52YXIgX2RlZmF1bHQgPSBKU09OQXJyb3c7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlLVTA5T1FYSnliM2N1ZEhONElsMHNJbTVoYldWeklqcGJJa3BUVDA1QmNuSnZkeUlzSW5OMGVXeHBibWNpTENKaGNuSnZkMU4wZVd4bElpd2laWGh3WVc1a1pXUWlMQ0p1YjJSbFZIbHdaU0lzSW05dVEyeHBZMnNpTENKd2NtOXdWSGx3WlhNaUxDSlFjbTl3Vkhsd1pYTWlMQ0ptZFc1aklpd2lhWE5TWlhGMWFYSmxaQ0lzSW05dVpVOW1JaXdpWW05dmJDSXNJbk4wY21sdVp5SXNJbVJsWm1GMWJIUlFjbTl3Y3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3pzN1FVRlhRU3hKUVVGTlFTeFRRVUY1UXl4SFFVRkhMRk5CUVRWRFFTeFRRVUUwUXp0QlFVRkJMRTFCUTJoRVF5eFBRVVJuUkN4UlFVTm9SRUVzVDBGRVowUTdRVUZCUVN4TlFVVm9SRU1zVlVGR1owUXNVVUZGYUVSQkxGVkJSbWRFTzBGQlFVRXNUVUZIYUVSRExGRkJTR2RFTEZGQlIyaEVRU3hSUVVoblJEdEJRVUZCTEUxQlNXaEVReXhSUVVwblJDeFJRVWxvUkVFc1VVRktaMFE3UVVGQlFTeE5RVXRvUkVNc1QwRk1aMFFzVVVGTGFFUkJMRTlCVEdkRU8wRkJRVUVzYzBKQlQyaEVMRzlFUVVGVFNpeFBRVUZQTEVOQlFVTXNaMEpCUVVRc1JVRkJiVUpETEZWQlFXNUNMRU5CUVdoQ08wRkJRV2RFTEVsQlFVRXNUMEZCVHl4RlFVRkZSenRCUVVGNlJDeHRRa0ZEUlN4MVEwRkJVMG9zVDBGQlR5eERRVUZETEVOQlFVTXNUMEZCUkN4RlFVRlZMRmRCUVZZc1EwRkJSQ3hGUVVGNVFrY3NVVUZCZWtJc1JVRkJiVU5FTEZGQlFXNURMRVZCUVRaRFJDeFZRVUUzUXl4RFFVRm9RaXhGUVVOSExGRkJSRWdzUlVGRlIwRXNWVUZCVlN4TFFVRkxMRkZCUVdZc2FVSkJRME1zZFVOQlFWTkVMRTlCUVU4c1EwRkJReXhEUVVGRExGZEJRVVFzUlVGQll5eG5Ra0ZCWkN4RFFVRkVMRU5CUVdoQ0xFVkJRVzlFTEZGQlFYQkVMRU5CU0Vvc1EwRkVSaXhEUVZCblJEdEJRVUZCTEVOQlFXeEVPenRCUVdsQ1FVUXNVMEZCVXl4RFFVRkRUU3hUUVVGV0xFZEJRWE5DTzBGQlEzQkNUQ3hGUVVGQlFTeFBRVUZQTEVWQlFVVk5MSE5DUVVGVlF5eEpRVUZXTEVOQlFXVkRMRlZCUkVvN1FVRkZjRUpRTEVWQlFVRkJMRlZCUVZVc1JVRkJSVXNzYzBKQlFWVkhMRXRCUVZZc1EwRkJaMElzUTBGQlF5eFJRVUZFTEVWQlFWY3NVVUZCV0N4RFFVRm9RaXhEUVVaUk8wRkJSM0JDVUN4RlFVRkJRU3hSUVVGUkxFVkJRVVZKTEhOQ1FVRlZTU3hKUVVGV0xFTkJRV1ZHTEZWQlNFdzdRVUZKY0VKTUxFVkJRVUZCTEZGQlFWRXNSVUZCUlVjc2MwSkJRVlZMTEUxQlFWWXNRMEZCYVVKSUxGVkJTbEE3UVVGTGNFSktMRVZCUVVGQkxFOUJRVThzUlVGQlJVVXNjMEpCUVZWRExFbEJRVllzUTBGQlpVTTdRVUZNU2l4RFFVRjBRanRCUVZGQlZDeFRRVUZUTEVOQlFVTmhMRmxCUVZZc1IwRkJlVUk3UVVGRGRrSllMRVZCUVVGQkxGVkJRVlVzUlVGQlJUdEJRVVJYTEVOQlFYcENPMlZCU1dWR0xGTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3SUZOMGVXeHBibWRHZFc1amRHbHZiaUI5SUdaeWIyMGdKM0psWVdOMExXSmhjMlV4TmkxemRIbHNhVzVuSnp0Y2JseHVhVzUwWlhKbVlXTmxJRkJ5YjNCeklIdGNiaUFnYzNSNWJHbHVaem9nVTNSNWJHbHVaMFoxYm1OMGFXOXVPMXh1SUNCaGNuSnZkMU4wZVd4bFB6b2dKM05wYm1kc1pTY2dmQ0FuWkc5MVlteGxKenRjYmlBZ1pYaHdZVzVrWldRNklHSnZiMnhsWVc0N1hHNGdJRzV2WkdWVWVYQmxPaUJ6ZEhKcGJtYzdYRzRnSUc5dVEyeHBZMnM2SUZKbFlXTjBMazF2ZFhObFJYWmxiblJJWVc1a2JHVnlQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBqdGNibjFjYmx4dVkyOXVjM1FnU2xOUFRrRnljbTkzT2lCU1pXRmpkQzVHZFc1amRHbHZia052YlhCdmJtVnVkRHhRY205d2N6NGdQU0FvZTF4dUlDQnpkSGxzYVc1bkxGeHVJQ0JoY25KdmQxTjBlV3hsTEZ4dUlDQmxlSEJoYm1SbFpDeGNiaUFnYm05a1pWUjVjR1VzWEc0Z0lHOXVRMnhwWTJzc1hHNTlLU0E5UGlBb1hHNGdJRHhrYVhZZ2V5NHVMbk4wZVd4cGJtY29KMkZ5Y205M1EyOXVkR0ZwYm1WeUp5d2dZWEp5YjNkVGRIbHNaU2w5SUc5dVEyeHBZMnM5ZTI5dVEyeHBZMnQ5UGx4dUlDQWdJRHhrYVhZZ2V5NHVMbk4wZVd4cGJtY29XeWRoY25KdmR5Y3NJQ2RoY25KdmQxTnBaMjRuWFN3Z2JtOWtaVlI1Y0dVc0lHVjRjR0Z1WkdWa0xDQmhjbkp2ZDFOMGVXeGxLWDArWEc0Z0lDQWdJQ0I3SjF4Y2RUSTFRalluZlZ4dUlDQWdJQ0FnZTJGeWNtOTNVM1I1YkdVZ1BUMDlJQ2RrYjNWaWJHVW5JQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BHUnBkaUI3TGk0dWMzUjViR2x1WnloYkoyRnljbTkzVTJsbmJpY3NJQ2RoY25KdmQxTnBaMjVKYm01bGNpZGRLWDArZXlkY1hIVXlOVUkySjMwOEwyUnBkajVjYmlBZ0lDQWdJQ2w5WEc0Z0lDQWdQQzlrYVhZK1hHNGdJRHd2WkdsMlBseHVLVHRjYmx4dVNsTlBUa0Z5Y205M0xuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2MzUjViR2x1WnpvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdZWEp5YjNkVGRIbHNaVG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnNuYzJsdVoyeGxKeXdnSjJSdmRXSnNaU2RkS1N4Y2JpQWdaWGh3WVc1a1pXUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xtbHpVbVZ4ZFdseVpXUXNYRzRnSUc1dlpHVlVlWEJsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJRzl1UTJ4cFkyczZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzU5TzF4dVhHNUtVMDlPUVhKeWIzY3VaR1ZtWVhWc2RGQnliM0J6SUQwZ2UxeHVJQ0JoY25KdmQxTjBlV3hsT2lBbmMybHVaMnhsSnl4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRXBUVDA1QmNuSnZkenRjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX0pTT05OZXN0ZWROb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OTmVzdGVkTm9kZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG4vLyBSZXR1cm5zIHRoZSBcIm4gSXRlbXNcIiBzdHJpbmcgZm9yIHRoaXMgbm9kZSxcbi8vIGdlbmVyYXRpbmcgYW5kIGNhY2hpbmcgaXQgaWYgaXQgaGFzbid0IGJlZW4gY3JlYXRlZCB5ZXQuXG5mdW5jdGlvbiBjcmVhdGVJdGVtU3RyaW5nKGRhdGEsIGxpbWl0KSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBoYXNNb3JlID0gZmFsc2U7XG5cbiAgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKGRhdGEuc2l6ZSkpIHtcbiAgICBjb3VudCA9IGRhdGEuc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YSksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmIChsaW1pdCAmJiBjb3VudCArIDEgPiBsaW1pdCkge1xuICAgICAgICAgIGhhc01vcmUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KGhhc01vcmUgPyAnPicgOiAnJykuY29uY2F0KGNvdW50LCBcIiBcIikuY29uY2F0KGNvdW50ICE9PSAxID8gJ2VudHJpZXMnIDogJ2VudHJ5Jyk7XG59XG5cbi8vIENvbmZpZ3VyZXMgPEpTT05OZXN0ZWROb2RlPiB0byByZW5kZXIgYW4gaXRlcmFibGVcbnZhciBKU09OSXRlcmFibGVOb2RlID0gZnVuY3Rpb24gSlNPTkl0ZXJhYmxlTm9kZShfcmVmKSB7XG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBfcmVmKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTk5lc3RlZE5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBub2RlVHlwZTogXCJJdGVyYWJsZVwiLFxuICAgIG5vZGVUeXBlSW5kaWNhdG9yOiBcIigpXCIsXG4gICAgY3JlYXRlSXRlbVN0cmluZzogY3JlYXRlSXRlbVN0cmluZ1xuICB9KSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBKU09OSXRlcmFibGVOb2RlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5S1UwOU9TWFJsY21GaWJHVk9iMlJsTG5SemVDSmRMQ0p1WVcxbGN5STZXeUpqY21WaGRHVkpkR1Z0VTNSeWFXNW5JaXdpWkdGMFlTSXNJbXhwYldsMElpd2lZMjkxYm5RaUxDSm9ZWE5OYjNKbElpd2lUblZ0WW1WeUlpd2lhWE5UWVdabFNXNTBaV2RsY2lJc0luTnBlbVVpTENKbGJuUnllU0lzSWtwVFQwNUpkR1Z5WVdKc1pVNXZaR1VpTENKd2NtOXdjeUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0QlFVRkJPenRCUVVOQk96czdPenM3T3pzN096czdRVUZIUVR0QlFVTkJPMEZCUTBFc1UwRkJVMEVzWjBKQlFWUXNRMEZCTUVKRExFbEJRVEZDTEVWQlFYRkRReXhMUVVGeVF5eEZRVUZ2UkR0QlFVTnNSQ3hOUVVGSlF5eExRVUZMTEVkQlFVY3NRMEZCV2p0QlFVTkJMRTFCUVVsRExFOUJRVThzUjBGQlJ5eExRVUZrT3p0QlFVTkJMRTFCUVVsRExFMUJRVTBzUTBGQlEwTXNZVUZCVUN4RFFVRnhRa3dzU1VGQlNTeERRVUZEVFN4SlFVRXhRaXhEUVVGS0xFVkJRWEZETzBGQlEyNURTaXhKUVVGQlFTeExRVUZMTEVkQlFVZEdMRWxCUVVrc1EwRkJRMDBzU1VGQllqdEJRVU5FTEVkQlJrUXNUVUZGVHp0QlFVTk1PMEZCUkVzc0swTkJSV1ZPTEVsQlJtWTdRVUZCUVRzN1FVRkJRVHRCUVVWTUxEQkVRVUV3UWp0QlFVRkJMRmxCUVdaUExFdEJRV1U3TzBGQlEzaENMRmxCUVVsT0xFdEJRVXNzU1VGQlNVTXNTMEZCU3l4SFFVRkhMRU5CUVZJc1IwRkJXVVFzUzBGQmVrSXNSVUZCWjBNN1FVRkRPVUpGTEZWQlFVRkJMRTlCUVU4c1IwRkJSeXhKUVVGV08wRkJRMEU3UVVGRFJEczdRVUZEUkVRc1VVRkJRVUVzUzBGQlN5eEpRVUZKTEVOQlFWUTdRVUZEUkR0QlFWSkpPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGVFRqczdRVUZEUkN4dFFrRkJWVU1zVDBGQlR5eEhRVUZITEVkQlFVZ3NSMEZCVXl4RlFVRXhRaXhUUVVFclFrUXNTMEZCTDBJc1kwRkJkME5CTEV0QlFVc3NTMEZCU3l4RFFVRldMRWRCUVdNc1UwRkJaQ3hIUVVFd1FpeFBRVUZzUlR0QlFVTkVPenRCUVU5RU8wRkJRMEVzU1VGQlRVMHNaMEpCUVdkRUxFZEJRVWNzVTBGQmJrUkJMR2RDUVVGdFJDeFBRVUZyUWp0QlFVRkJMRTFCUVZwRExFdEJRVms3TzBGQlEzcEZMSE5DUVVORkxHZERRVUZETERCQ1FVRkVMR1ZCUTAxQkxFdEJSRTQ3UVVGRlJTeEpRVUZCTEZGQlFWRXNSVUZCUXl4VlFVWllPMEZCUjBVc1NVRkJRU3hwUWtGQmFVSXNSVUZCUXl4SlFVaHdRanRCUVVsRkxFbEJRVUVzWjBKQlFXZENMRVZCUVVWV08wRkJTbkJDTEV0QlJFWTdRVUZSUkN4RFFWUkVPenRsUVZkbFV5eG5RaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnU2xOUFRrNWxjM1JsWkU1dlpHVWdabkp2YlNBbkxpOUtVMDlPVG1WemRHVmtUbTlrWlNjN1hHNXBiWEJ2Y25RZ2V5QkRhWEpqZFd4aGNsQnliM0J6VUdGemMyVmtWR2h5YjNWbmFFcFRUMDVPYjJSbElIMGdabkp2YlNBbkxpOTBlWEJsY3ljN1hHNWNiaTh2SUZKbGRIVnlibk1nZEdobElGd2liaUJKZEdWdGMxd2lJSE4wY21sdVp5Qm1iM0lnZEdocGN5QnViMlJsTEZ4dUx5OGdaMlZ1WlhKaGRHbHVaeUJoYm1RZ1kyRmphR2x1WnlCcGRDQnBaaUJwZENCb1lYTnVKM1FnWW1WbGJpQmpjbVZoZEdWa0lIbGxkQzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVWwwWlcxVGRISnBibWNvWkdGMFlUb2dZVzU1TENCc2FXMXBkRG9nYm5WdFltVnlLU0I3WEc0Z0lHeGxkQ0JqYjNWdWRDQTlJREE3WEc0Z0lHeGxkQ0JvWVhOTmIzSmxJRDBnWm1Gc2MyVTdYRzRnSUdsbUlDaE9kVzFpWlhJdWFYTlRZV1psU1c1MFpXZGxjaWhrWVhSaExuTnBlbVVwS1NCN1hHNGdJQ0FnWTI5MWJuUWdQU0JrWVhSaExuTnBlbVU3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQmxiblJ5ZVNCdlppQmtZWFJoS1NCN1hHNGdJQ0FnSUNCcFppQW9iR2x0YVhRZ0ppWWdZMjkxYm5RZ0t5QXhJRDRnYkdsdGFYUXBJSHRjYmlBZ0lDQWdJQ0FnYUdGelRXOXlaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOTFiblFnS3owZ01UdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdBa2UyaGhjMDF2Y21VZ1B5QW5QaWNnT2lBbkozMGtlMk52ZFc1MGZTQWtlMk52ZFc1MElDRTlQU0F4SUQ4Z0oyVnVkSEpwWlhNbklEb2dKMlZ1ZEhKNUozMWdPMXh1ZlZ4dVhHNXBiblJsY21aaFkyVWdVSEp2Y0hNZ1pYaDBaVzVrY3lCRGFYSmpkV3hoY2xCeWIzQnpVR0Z6YzJWa1ZHaHliM1ZuYUVwVFQwNU9iMlJsSUh0Y2JpQWdaR0YwWVRvZ1lXNTVPMXh1SUNCdWIyUmxWSGx3WlRvZ2MzUnlhVzVuTzF4dWZWeHVYRzR2THlCRGIyNW1hV2QxY21WeklEeEtVMDlPVG1WemRHVmtUbTlrWlQ0Z2RHOGdjbVZ1WkdWeUlHRnVJR2wwWlhKaFlteGxYRzVqYjI1emRDQktVMDlPU1hSbGNtRmliR1ZPYjJSbE9pQlNaV0ZqZEM1R2RXNWpkR2x2YmtOdmJYQnZibVZ1ZER4UWNtOXdjejRnUFNBb2V5QXVMaTV3Y205d2N5QjlLU0E5UGlCN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFcFRUMDVPWlhOMFpXUk9iMlJsWEc0Z0lDQWdJQ0I3TGk0dWNISnZjSE45WEc0Z0lDQWdJQ0J1YjJSbFZIbHdaVDFjSWtsMFpYSmhZbXhsWENKY2JpQWdJQ0FnSUc1dlpHVlVlWEJsU1c1a2FXTmhkRzl5UFZ3aUtDbGNJbHh1SUNBZ0lDQWdZM0psWVhSbFNYUmxiVk4wY21sdVp6MTdZM0psWVhSbFNYUmxiVk4wY21sdVozMWNiaUFnSUNBdlBseHVJQ0FwTzF4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdTbE5QVGtsMFpYSmhZbXhsVG05a1pUdGNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfSlNPTkFycm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OQXJyb3dcIikpO1xuXG52YXIgX2dldENvbGxlY3Rpb25FbnRyaWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRDb2xsZWN0aW9uRW50cmllc1wiKSk7XG5cbnZhciBfSlNPTk5vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0pTT05Ob2RlXCIpKTtcblxudmFyIF9JdGVtUmFuZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0l0ZW1SYW5nZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIGlzUmFuZ2UocmFuZ2VPckVudHJ5KSB7XG4gIHJldHVybiByYW5nZU9yRW50cnkudG8gIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2hpbGROb2Rlcyhwcm9wcywgZnJvbSwgdG8pIHtcbiAgdmFyIG5vZGVUeXBlID0gcHJvcHMubm9kZVR5cGUsXG4gICAgICBkYXRhID0gcHJvcHMuZGF0YSxcbiAgICAgIGNvbGxlY3Rpb25MaW1pdCA9IHByb3BzLmNvbGxlY3Rpb25MaW1pdCxcbiAgICAgIGNpcmN1bGFyQ2FjaGUgPSBwcm9wcy5jaXJjdWxhckNhY2hlLFxuICAgICAga2V5UGF0aCA9IHByb3BzLmtleVBhdGgsXG4gICAgICBwb3N0cHJvY2Vzc1ZhbHVlID0gcHJvcHMucG9zdHByb2Nlc3NWYWx1ZSxcbiAgICAgIHNvcnRPYmplY3RLZXlzID0gcHJvcHMuc29ydE9iamVjdEtleXM7XG4gIHZhciBjaGlsZE5vZGVzID0gW107XG4gICgwLCBfZ2V0Q29sbGVjdGlvbkVudHJpZXNbXCJkZWZhdWx0XCJdKShub2RlVHlwZSwgZGF0YSwgc29ydE9iamVjdEtleXMsIGNvbGxlY3Rpb25MaW1pdCwgZnJvbSwgdG8pLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgaWYgKGlzUmFuZ2UoZW50cnkpKSB7XG4gICAgICBjaGlsZE5vZGVzLnB1c2goIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0l0ZW1SYW5nZVtcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBrZXk6IFwiSXRlbVJhbmdlLS1cIi5jb25jYXQoZW50cnkuZnJvbSwgXCItXCIpLmNvbmNhdChlbnRyeS50byksXG4gICAgICAgIGZyb206IGVudHJ5LmZyb20sXG4gICAgICAgIHRvOiBlbnRyeS50byxcbiAgICAgICAgcmVuZGVyQ2hpbGROb2RlczogcmVuZGVyQ2hpbGROb2Rlc1xuICAgICAgfSkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleSA9IGVudHJ5LmtleSxcbiAgICAgICAgICB2YWx1ZSA9IGVudHJ5LnZhbHVlO1xuICAgICAgdmFyIGlzQ2lyY3VsYXIgPSBjaXJjdWxhckNhY2hlLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICAgIGNoaWxkTm9kZXMucHVzaCggLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTk5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgcG9zdHByb2Nlc3NWYWx1ZTogcG9zdHByb2Nlc3NWYWx1ZSxcbiAgICAgICAgY29sbGVjdGlvbkxpbWl0OiBjb2xsZWN0aW9uTGltaXRcbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIk5vZGUtLVwiLmNvbmNhdChrZXkpLFxuICAgICAgICBrZXlQYXRoOiBba2V5XS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGtleVBhdGgpKSxcbiAgICAgICAgdmFsdWU6IHBvc3Rwcm9jZXNzVmFsdWUodmFsdWUpLFxuICAgICAgICBjaXJjdWxhckNhY2hlOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNpcmN1bGFyQ2FjaGUpLCBbdmFsdWVdKSxcbiAgICAgICAgaXNDaXJjdWxhcjogaXNDaXJjdWxhcixcbiAgICAgICAgaGlkZVJvb3Q6IGZhbHNlXG4gICAgICB9KSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZE5vZGVzO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZUZyb21Qcm9wcyhwcm9wcykge1xuICAvLyBjYWxjdWxhdGUgaW5kaXZpZHVhbCBub2RlIGV4cGFuc2lvbiBpZiBuZWNlc3NhcnlcbiAgdmFyIGV4cGFuZGVkID0gcHJvcHMuc2hvdWxkRXhwYW5kTm9kZSAmJiAhcHJvcHMuaXNDaXJjdWxhciA/IHByb3BzLnNob3VsZEV4cGFuZE5vZGUocHJvcHMua2V5UGF0aCwgcHJvcHMuZGF0YSwgcHJvcHMubGV2ZWwpIDogZmFsc2U7XG4gIHJldHVybiB7XG4gICAgZXhwYW5kZWQ6IGV4cGFuZGVkXG4gIH07XG59XG5cbnZhciBKU09OTmVzdGVkTm9kZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSlNPTk5lc3RlZE5vZGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSlNPTk5lc3RlZE5vZGUpO1xuXG4gIGZ1bmN0aW9uIEpTT05OZXN0ZWROb2RlKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTT05OZXN0ZWROb2RlKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5leHBhbmRhYmxlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBleHBhbmRlZDogIV90aGlzLnN0YXRlLmV4cGFuZGVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMuc3RhdGUgPSBnZXRTdGF0ZUZyb21Qcm9wcyhwcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEpTT05OZXN0ZWROb2RlLCBbe1xuICAgIGtleTogXCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBuZXh0U3RhdGUgPSBnZXRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpO1xuXG4gICAgICBpZiAoZ2V0U3RhdGVGcm9tUHJvcHModGhpcy5wcm9wcykuZXhwYW5kZWQgIT09IG5leHRTdGF0ZS5leHBhbmRlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gISFPYmplY3Qua2V5cyhuZXh0UHJvcHMpLmZpbmQoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ICE9PSAnY2lyY3VsYXJDYWNoZScgJiYgKGtleSA9PT0gJ2tleVBhdGgnID8gbmV4dFByb3BzW2tleV0uam9pbignLycpICE9PSBfdGhpczIucHJvcHNba2V5XS5qb2luKCcvJykgOiBuZXh0UHJvcHNba2V5XSAhPT0gX3RoaXMyLnByb3BzW2tleV0pO1xuICAgICAgfSkgfHwgbmV4dFN0YXRlLmV4cGFuZGVkICE9PSB0aGlzLnN0YXRlLmV4cGFuZGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBnZXRJdGVtU3RyaW5nID0gX3RoaXMkcHJvcHMuZ2V0SXRlbVN0cmluZyxcbiAgICAgICAgICBub2RlVHlwZUluZGljYXRvciA9IF90aGlzJHByb3BzLm5vZGVUeXBlSW5kaWNhdG9yLFxuICAgICAgICAgIG5vZGVUeXBlID0gX3RoaXMkcHJvcHMubm9kZVR5cGUsXG4gICAgICAgICAgZGF0YSA9IF90aGlzJHByb3BzLmRhdGEsXG4gICAgICAgICAgaGlkZVJvb3QgPSBfdGhpcyRwcm9wcy5oaWRlUm9vdCxcbiAgICAgICAgICBjcmVhdGVJdGVtU3RyaW5nID0gX3RoaXMkcHJvcHMuY3JlYXRlSXRlbVN0cmluZyxcbiAgICAgICAgICBzdHlsaW5nID0gX3RoaXMkcHJvcHMuc3R5bGluZyxcbiAgICAgICAgICBjb2xsZWN0aW9uTGltaXQgPSBfdGhpcyRwcm9wcy5jb2xsZWN0aW9uTGltaXQsXG4gICAgICAgICAga2V5UGF0aCA9IF90aGlzJHByb3BzLmtleVBhdGgsXG4gICAgICAgICAgbGFiZWxSZW5kZXJlciA9IF90aGlzJHByb3BzLmxhYmVsUmVuZGVyZXIsXG4gICAgICAgICAgZXhwYW5kYWJsZSA9IF90aGlzJHByb3BzLmV4cGFuZGFibGU7XG4gICAgICB2YXIgZXhwYW5kZWQgPSB0aGlzLnN0YXRlLmV4cGFuZGVkO1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSBleHBhbmRlZCB8fCBoaWRlUm9vdCAmJiB0aGlzLnByb3BzLmxldmVsID09PSAwID8gcmVuZGVyQ2hpbGROb2Rlcyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMucHJvcHMpLCB7fSwge1xuICAgICAgICBsZXZlbDogdGhpcy5wcm9wcy5sZXZlbCArIDFcbiAgICAgIH0pKSA6IG51bGw7XG5cbiAgICAgIHZhciBpdGVtVHlwZSA9IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHN0eWxpbmcoJ25lc3RlZE5vZGVJdGVtVHlwZScsIGV4cGFuZGVkKSwgbm9kZVR5cGVJbmRpY2F0b3IpO1xuXG4gICAgICB2YXIgcmVuZGVyZWRJdGVtU3RyaW5nID0gZ2V0SXRlbVN0cmluZyhub2RlVHlwZSwgZGF0YSwgaXRlbVR5cGUsIGNyZWF0ZUl0ZW1TdHJpbmcoZGF0YSwgY29sbGVjdGlvbkxpbWl0KSwga2V5UGF0aCk7XG4gICAgICB2YXIgc3R5bGluZ0FyZ3MgPSBba2V5UGF0aCwgbm9kZVR5cGUsIGV4cGFuZGVkLCBleHBhbmRhYmxlXTtcbiAgICAgIHJldHVybiBoaWRlUm9vdCA/IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBzdHlsaW5nLmFwcGx5KHZvaWQgMCwgWydyb290Tm9kZSddLmNvbmNhdChzdHlsaW5nQXJncykpLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidWxcIiwgc3R5bGluZy5hcHBseSh2b2lkIDAsIFsncm9vdE5vZGVDaGlsZHJlbiddLmNvbmNhdChzdHlsaW5nQXJncykpLCByZW5kZXJlZENoaWxkcmVuKSkgOiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwibGlcIiwgc3R5bGluZy5hcHBseSh2b2lkIDAsIFsnbmVzdGVkTm9kZSddLmNvbmNhdChzdHlsaW5nQXJncykpLCBleHBhbmRhYmxlICYmIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05BcnJvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgc3R5bGluZzogc3R5bGluZyxcbiAgICAgICAgbm9kZVR5cGU6IG5vZGVUeXBlLFxuICAgICAgICBleHBhbmRlZDogZXhwYW5kZWQsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgX2V4dGVuZHMoe30sIHN0eWxpbmcuYXBwbHkodm9pZCAwLCBbWydsYWJlbCcsICduZXN0ZWROb2RlTGFiZWwnXV0uY29uY2F0KHN0eWxpbmdBcmdzKSksIHtcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSksIGxhYmVsUmVuZGVyZXIuYXBwbHkodm9pZCAwLCBzdHlsaW5nQXJncykpLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7fSwgc3R5bGluZy5hcHBseSh2b2lkIDAsIFsnbmVzdGVkTm9kZUl0ZW1TdHJpbmcnXS5jb25jYXQoc3R5bGluZ0FyZ3MpKSwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSwgcmVuZGVyZWRJdGVtU3RyaW5nKSwgLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInVsXCIsIHN0eWxpbmcuYXBwbHkodm9pZCAwLCBbJ25lc3RlZE5vZGVDaGlsZHJlbiddLmNvbmNhdChzdHlsaW5nQXJncykpLCByZW5kZXJlZENoaWxkcmVuKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEpTT05OZXN0ZWROb2RlO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gSlNPTk5lc3RlZE5vZGU7XG5cbl9kZWZpbmVQcm9wZXJ0eShKU09OTmVzdGVkTm9kZSwgXCJwcm9wVHlwZXNcIiwge1xuICBnZXRJdGVtU3RyaW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vZGVUeXBlSW5kaWNhdG9yOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hbnksXG4gIG5vZGVUeXBlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgZGF0YTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYW55LFxuICBoaWRlUm9vdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbC5pc1JlcXVpcmVkLFxuICBjcmVhdGVJdGVtU3RyaW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHN0eWxpbmc6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY29sbGVjdGlvbkxpbWl0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGtleVBhdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5T2YoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcl0pKS5pc1JlcXVpcmVkLFxuICBsYWJlbFJlbmRlcmVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHNob3VsZEV4cGFuZE5vZGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGxldmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIuaXNSZXF1aXJlZCxcbiAgc29ydE9iamVjdEtleXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbF0pLFxuICBpc0NpcmN1bGFyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBleHBhbmRhYmxlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sXG59KTtcblxuX2RlZmluZVByb3BlcnR5KEpTT05OZXN0ZWROb2RlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGRhdGE6IFtdLFxuICBjaXJjdWxhckNhY2hlOiBbXSxcbiAgbGV2ZWw6IDAsXG4gIGV4cGFuZGFibGU6IHRydWVcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlLVTA5T1RtVnpkR1ZrVG05a1pTNTBjM2dpWFN3aWJtRnRaWE1pT2xzaWFYTlNZVzVuWlNJc0luSmhibWRsVDNKRmJuUnllU0lzSW5Sdklpd2lkVzVrWldacGJtVmtJaXdpY21WdVpHVnlRMmhwYkdST2IyUmxjeUlzSW5CeWIzQnpJaXdpWm5KdmJTSXNJbTV2WkdWVWVYQmxJaXdpWkdGMFlTSXNJbU52Ykd4bFkzUnBiMjVNYVcxcGRDSXNJbU5wY21OMWJHRnlRMkZqYUdVaUxDSnJaWGxRWVhSb0lpd2ljRzl6ZEhCeWIyTmxjM05XWVd4MVpTSXNJbk52Y25SUFltcGxZM1JMWlhseklpd2lZMmhwYkdST2IyUmxjeUlzSW1admNrVmhZMmdpTENKbGJuUnllU0lzSW5CMWMyZ2lMQ0pyWlhraUxDSjJZV3gxWlNJc0ltbHpRMmx5WTNWc1lYSWlMQ0pwYm1SbGVFOW1JaXdpWjJWMFUzUmhkR1ZHY205dFVISnZjSE1pTENKbGVIQmhibVJsWkNJc0luTm9iM1ZzWkVWNGNHRnVaRTV2WkdVaUxDSnNaWFpsYkNJc0lrcFRUMDVPWlhOMFpXUk9iMlJsSWl3aVpYaHdZVzVrWVdKc1pTSXNJbk5sZEZOMFlYUmxJaXdpYzNSaGRHVWlMQ0p1WlhoMFVISnZjSE1pTENKdVpYaDBVM1JoZEdVaUxDSlBZbXBsWTNRaUxDSnJaWGx6SWl3aVptbHVaQ0lzSW1wdmFXNGlMQ0puWlhSSmRHVnRVM1J5YVc1bklpd2libTlrWlZSNWNHVkpibVJwWTJGMGIzSWlMQ0pvYVdSbFVtOXZkQ0lzSW1OeVpXRjBaVWwwWlcxVGRISnBibWNpTENKemRIbHNhVzVuSWl3aWJHRmlaV3hTWlc1a1pYSmxjaUlzSW5KbGJtUmxjbVZrUTJocGJHUnlaVzRpTENKcGRHVnRWSGx3WlNJc0luSmxibVJsY21Wa1NYUmxiVk4wY21sdVp5SXNJbk4wZVd4cGJtZEJjbWR6SWl3aWFHRnVaR3hsUTJ4cFkyc2lMQ0pTWldGamRDSXNJa052YlhCdmJtVnVkQ0lzSWxCeWIzQlVlWEJsY3lJc0ltWjFibU1pTENKcGMxSmxjWFZwY21Wa0lpd2lZVzU1SWl3aWMzUnlhVzVuSWl3aVltOXZiQ0lzSW01MWJXSmxjaUlzSW1GeWNtRjVUMllpTENKdmJtVlBabFI1Y0dVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZCUVRzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVEJDUVN4VFFVRlRRU3hQUVVGVUxFTkJRV2xDUXl4WlFVRnFRaXhGUVVGeFJUdEJRVU51UlN4VFFVRlJRU3haUVVGRUxFTkJRWGRDUXl4RlFVRjRRaXhMUVVFclFrTXNVMEZCZEVNN1FVRkRSRHM3UVVGRlJDeFRRVUZUUXl4blFrRkJWQ3hEUVVORlF5eExRVVJHTEVWQlJVVkRMRWxCUmtZc1JVRkhSVW9zUlVGSVJpeEZRVWxGTzBGQlFVRXNUVUZGUlVzc1VVRkdSaXhIUVZOSlJpeExRVlJLTEVOQlJVVkZMRkZCUmtZN1FVRkJRU3hOUVVkRlF5eEpRVWhHTEVkQlUwbElMRXRCVkVvc1EwRkhSVWNzU1VGSVJqdEJRVUZCTEUxQlNVVkRMR1ZCU2tZc1IwRlRTVW9zUzBGVVNpeERRVWxGU1N4bFFVcEdPMEZCUVVFc1RVRkxSVU1zWVVGTVJpeEhRVk5KVEN4TFFWUktMRU5CUzBWTExHRkJURVk3UVVGQlFTeE5RVTFGUXl4UFFVNUdMRWRCVTBsT0xFdEJWRW9zUTBGTlJVMHNUMEZPUmp0QlFVRkJMRTFCVDBWRExHZENRVkJHTEVkQlUwbFFMRXRCVkVvc1EwRlBSVThzWjBKQlVFWTdRVUZCUVN4TlFWRkZReXhqUVZKR0xFZEJVMGxTTEV0QlZFb3NRMEZSUlZFc1kwRlNSanRCUVZWQkxFMUJRVTFETEZWQlFUWkNMRWRCUVVjc1JVRkJkRU03UVVGRlFTeDNRMEZEUlZBc1VVRkVSaXhGUVVWRlF5eEpRVVpHTEVWQlIwVkxMR05CU0VZc1JVRkpSVW9zWlVGS1JpeEZRVXRGU0N4SlFVeEdMRVZCVFVWS0xFVkJUa1lzUlVGUFJXRXNUMEZRUml4RFFVOVZMRlZCUVVORExFdEJRVVFzUlVGQlZ6dEJRVU51UWl4UlFVRkphRUlzVDBGQlR5eERRVUZEWjBJc1MwRkJSQ3hEUVVGWUxFVkJRVzlDTzBGQlEyeENSaXhOUVVGQlFTeFZRVUZWTEVOQlFVTkhMRWxCUVZnc1pVRkRSU3huUTBGQlF5eHhRa0ZCUkN4bFFVTk5XaXhMUVVST08wRkJSVVVzVVVGQlFTeEhRVUZITEhWQ1FVRm5RbGNzUzBGQlN5eERRVUZEVml4SlFVRjBRaXhqUVVFNFFsVXNTMEZCU3l4RFFVRkRaQ3hGUVVGd1F5eERRVVpNTzBGQlIwVXNVVUZCUVN4SlFVRkpMRVZCUVVWakxFdEJRVXNzUTBGQlExWXNTVUZJWkR0QlFVbEZMRkZCUVVFc1JVRkJSU3hGUVVGRlZTeExRVUZMTEVOQlFVTmtMRVZCU2xvN1FVRkxSU3hSUVVGQkxHZENRVUZuUWl4RlFVRkZSVHRCUVV4d1FpeFRRVVJHTzBGQlUwUXNTMEZXUkN4TlFWVlBPMEZCUVVFc1ZVRkRSMk1zUjBGRVNDeEhRVU5yUWtZc1MwRkViRUlzUTBGRFIwVXNSMEZFU0R0QlFVRkJMRlZCUTFGRExFdEJSRklzUjBGRGEwSklMRXRCUkd4Q0xFTkJRMUZITEV0QlJGSTdRVUZGVEN4VlFVRk5ReXhWUVVGVkxFZEJRVWRXTEdGQlFXRXNRMEZCUTFjc1QwRkJaQ3hEUVVGelFrWXNTMEZCZEVJc1RVRkJhVU1zUTBGQlF5eERRVUZ5UkR0QlFVVkJUQ3hOUVVGQlFTeFZRVUZWTEVOQlFVTkhMRWxCUVZnc1pVRkRSU3huUTBGQlF5eHZRa0ZCUkN4bFFVTk5XaXhMUVVST0xFVkJSVTA3UVVGQlJVOHNVVUZCUVVFc1owSkJRV2RDTEVWQlFXaENRU3huUWtGQlJqdEJRVUZ2UWtnc1VVRkJRVUVzWlVGQlpTeEZRVUZtUVR0QlFVRndRaXhQUVVaT08wRkJSMFVzVVVGQlFTeEhRVUZITEd0Q1FVRlhVeXhIUVVGWUxFTkJTRXc3UVVGSlJTeFJRVUZCTEU5QlFVOHNSMEZCUjBFc1IwRkJTQ3cwUWtGQlYxQXNUMEZCV0N4RlFVcFVPMEZCUzBVc1VVRkJRU3hMUVVGTExFVkJRVVZETEdkQ1FVRm5RaXhEUVVGRFR5eExRVUZFTEVOQlRIcENPMEZCVFVVc1VVRkJRU3hoUVVGaExDdENRVUZOVkN4aFFVRk9MRWxCUVhGQ1V5eExRVUZ5UWl4RlFVNW1PMEZCVDBVc1VVRkJRU3hWUVVGVkxFVkJRVVZETEZWQlVHUTdRVUZSUlN4UlFVRkJMRkZCUVZFc1JVRkJSVHRCUVZKYUxGTkJSRVk3UVVGWlJEdEJRVU5HTEVkQmJrTkVPMEZCY1VOQkxGTkJRVTlPTEZWQlFWQTdRVUZEUkRzN1FVRmpSQ3hUUVVGVFVTeHBRa0ZCVkN4RFFVRXlRbXBDTEV0QlFUTkNMRVZCUVhsRE8wRkJRM1pETzBGQlEwRXNUVUZCVFd0Q0xGRkJRVkVzUjBGRFdteENMRXRCUVVzc1EwRkJRMjFDTEdkQ1FVRk9MRWxCUVRCQ0xFTkJRVU51UWl4TFFVRkxMRU5CUVVObExGVkJRV3BETEVkQlEwbG1MRXRCUVVzc1EwRkJRMjFDTEdkQ1FVRk9MRU5CUVhWQ2JrSXNTMEZCU3l4RFFVRkRUU3hQUVVFM1FpeEZRVUZ6UTA0c1MwRkJTeXhEUVVGRFJ5eEpRVUUxUXl4RlFVRnJSRWdzUzBGQlN5eERRVUZEYjBJc1MwRkJlRVFzUTBGRVNpeEhRVVZKTEV0QlNFNDdRVUZKUVN4VFFVRlBPMEZCUTB4R0xFbEJRVUZCTEZGQlFWRXNSVUZCVWtFN1FVRkVTeXhIUVVGUU8wRkJSMFE3TzBsQlJXOUNSeXhqT3pzN096dEJRVFJDYmtJc01FSkJRVmx5UWl4TFFVRmFMRVZCUVRCQ08wRkJRVUU3TzBGQlFVRTdPMEZCUTNoQ0xEaENRVUZOUVN4TFFVRk9PenRCUVVSM1FpeHJSVUUyUmxvc1dVRkJUVHRCUVVOc1FpeFZRVUZKTEUxQlFVdEJMRXRCUVV3c1EwRkJWM05DTEZWQlFXWXNSVUZCTWtJN1FVRkRla0lzWTBGQlMwTXNVVUZCVEN4RFFVRmpPMEZCUVVWTUxGVkJRVUZCTEZGQlFWRXNSVUZCUlN4RFFVRkRMRTFCUVV0TkxFdEJRVXdzUTBGQlYwNDdRVUZCZUVJc1UwRkJaRHRCUVVORU8wRkJRMFlzUzBGcVIzbENPenRCUVVWNFFpeFZRVUZMVFN4TFFVRk1MRWRCUVdGUUxHbENRVUZwUWl4RFFVRkRha0lzUzBGQlJDeERRVUU1UWp0QlFVWjNRanRCUVVkNlFqczdPenR4UkVGRlowTjVRaXhUTEVWQlFXdENPMEZCUTJwRUxGVkJRVTFETEZOQlFWTXNSMEZCUjFRc2FVSkJRV2xDTEVOQlFVTlJMRk5CUVVRc1EwRkJia003TzBGQlEwRXNWVUZCU1ZJc2FVSkJRV2xDTEVOQlFVTXNTMEZCUzJwQ0xFdEJRVTRzUTBGQmFrSXNRMEZCT0VKclFpeFJRVUU1UWl4TFFVRXlRMUVzVTBGQlV5eERRVUZEVWl4UlFVRjZSQ3hGUVVGdFJUdEJRVU5xUlN4aFFVRkxTeXhSUVVGTUxFTkJRV05ITEZOQlFXUTdRVUZEUkR0QlFVTkdPenM3TUVOQlJYRkNSQ3hUTEVWQlFXdENReXhUTEVWQlFXdENPMEZCUVVFN08wRkJRM2hFTEdGQlEwVXNRMEZCUXl4RFFVRkRReXhOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZCV1Vnc1UwRkJXaXhGUVVGMVFra3NTVUZCZGtJc1EwRkRRU3hWUVVGRGFFSXNSMEZCUkR0QlFVRkJMR1ZCUTBWQkxFZEJRVWNzUzBGQlN5eGxRVUZTTEV0QlEwTkJMRWRCUVVjc1MwRkJTeXhUUVVGU0xFZEJRMGRaTEZOQlFWTXNRMEZCUTFvc1IwRkJSQ3hEUVVGVUxFTkJRV1ZwUWl4SlFVRm1MRU5CUVc5Q0xFZEJRWEJDTEUxQlFUWkNMRTFCUVVrc1EwRkJRemxDTEV0QlFVd3NRMEZCVjJFc1IwRkJXQ3hGUVVGblFtbENMRWxCUVdoQ0xFTkJRWEZDTEVkQlFYSkNMRU5CUkdoRExFZEJSVWRNTEZOQlFWTXNRMEZCUTFvc1IwRkJSQ3hEUVVGVUxFdEJRV3RETEUxQlFVa3NRMEZCUTJJc1MwRkJUQ3hEUVVGWFlTeEhRVUZZTEVOQlNIUkRMRU5CUkVZN1FVRkJRU3hQUVVSQkxFTkJRVVlzU1VGTlMyRXNVMEZCVXl4RFFVRkRVaXhSUVVGV0xFdEJRWFZDTEV0QlFVdE5MRXRCUVV3c1EwRkJWMDRzVVVGUWVrTTdRVUZUUkRzN096WkNRVVZSTzBGQlFVRXNkMEpCWVVnc1MwRkJTMnhDTEV0QllrWTdRVUZCUVN4VlFVVk1LMElzWVVGR1N5eGxRVVZNUVN4aFFVWkxPMEZCUVVFc1ZVRkhURU1zYVVKQlNFc3NaVUZIVEVFc2FVSkJTRXM3UVVGQlFTeFZRVWxNT1VJc1VVRktTeXhsUVVsTVFTeFJRVXBMTzBGQlFVRXNWVUZMVEVNc1NVRk1TeXhsUVV0TVFTeEpRVXhMTzBGQlFVRXNWVUZOVERoQ0xGRkJUa3NzWlVGTlRFRXNVVUZPU3p0QlFVRkJMRlZCVDB4RExHZENRVkJMTEdWQlQweEJMR2RDUVZCTE8wRkJRVUVzVlVGUlRFTXNUMEZTU3l4bFFWRk1RU3hQUVZKTE8wRkJRVUVzVlVGVFRDOUNMR1ZCVkVzc1pVRlRURUVzWlVGVVN6dEJRVUZCTEZWQlZVeEZMRTlCVmtzc1pVRlZURUVzVDBGV1N6dEJRVUZCTEZWQlYwdzRRaXhoUVZoTExHVkJWMHhCTEdGQldFczdRVUZCUVN4VlFWbE1aQ3hWUVZwTExHVkJXVXhCTEZWQldrczdRVUZCUVN4VlFXTkRTaXhSUVdSRUxFZEJZMk1zUzBGQlMwMHNTMEZrYmtJc1EwRmpRMDRzVVVGa1JEdEJRV1ZRTEZWQlFVMXRRaXhuUWtGQlowSXNSMEZEY0VKdVFpeFJRVUZSTEVsQlFVdGxMRkZCUVZFc1NVRkJTU3hMUVVGTGFrTXNTMEZCVEN4RFFVRlhiMElzUzBGQldDeExRVUZ4UWl4RFFVRTVReXhIUVVOSmNrSXNaMEpCUVdkQ0xHbERRVUZOTEV0QlFVdERMRXRCUVZnN1FVRkJhMEp2UWl4UlFVRkJRU3hMUVVGTExFVkJRVVVzUzBGQlMzQkNMRXRCUVV3c1EwRkJWMjlDTEV0QlFWZ3NSMEZCYlVJN1FVRkJOVU1zVTBGRWNFSXNSMEZGU1N4SlFVaE9PenRCUVV0QkxGVkJRVTFyUWl4UlFVRlJMR2RDUVVOYUxIZERRVUZWU0N4UFFVRlBMRU5CUVVNc2IwSkJRVVFzUlVGQmRVSnFRaXhSUVVGMlFpeERRVUZxUWl4RlFVTkhZeXhwUWtGRVNDeERRVVJHT3p0QlFVdEJMRlZCUVUxUExHdENRVUZyUWl4SFFVRkhVaXhoUVVGaExFTkJRM1JETjBJc1VVRkVjME1zUlVGRmRFTkRMRWxCUm5ORExFVkJSM1JEYlVNc1VVRkljME1zUlVGSmRFTktMR2RDUVVGblFpeERRVUZETDBJc1NVRkJSQ3hGUVVGUFF5eGxRVUZRTEVOQlNuTkNMRVZCUzNSRFJTeFBRVXh6UXl4RFFVRjRRenRCUVU5QkxGVkJRVTFyUXl4WFFVRlhMRWRCUVVjc1EwRkJRMnhETEU5QlFVUXNSVUZCVlVvc1VVRkJWaXhGUVVGdlFtZENMRkZCUVhCQ0xFVkJRVGhDU1N4VlFVRTVRaXhEUVVGd1FqdEJRVVZCTEdGQlFVOVhMRkZCUVZFc1owSkJRMklzYzBOQlFWRkZMRTlCUVU4c1RVRkJVQ3hWUVVGUkxGVkJRVklzVTBGQmRVSkxMRmRCUVhaQ0xFVkJRVklzWlVGRFJTeHpRMEZCVVV3c1QwRkJUeXhOUVVGUUxGVkJRVkVzYTBKQlFWSXNVMEZCSzBKTExGZEJRUzlDTEVWQlFWSXNSVUZEUjBnc1owSkJSRWdzUTBGRVJpeERRVVJoTEdkQ1FVOWlMSE5EUVVGUlJpeFBRVUZQTEUxQlFWQXNWVUZCVVN4WlFVRlNMRk5CUVhsQ1N5eFhRVUY2UWl4RlFVRlNMRVZCUTBkc1FpeFZRVUZWTEdsQ1FVTlVMR2REUVVGRExIRkNRVUZFTzBGQlEwVXNVVUZCUVN4UFFVRlBMRVZCUVVWaExFOUJSRmc3UVVGRlJTeFJRVUZCTEZGQlFWRXNSVUZCUldwRExGRkJSbG83UVVGSFJTeFJRVUZCTEZGQlFWRXNSVUZCUldkQ0xGRkJTRm83UVVGSlJTeFJRVUZCTEU5QlFVOHNSVUZCUlN4TFFVRkxkVUk3UVVGS2FFSXNVVUZHU2l4bFFWTkZMSE5FUVVOTlRpeFBRVUZQTEUxQlFWQXNWVUZCVVN4RFFVRkRMRTlCUVVRc1JVRkJWU3hwUWtGQlZpeERRVUZTTEZOQlFYbERTeXhYUVVGNlF5eEZRVVJPTzBGQlJVVXNVVUZCUVN4UFFVRlBMRVZCUVVVc1MwRkJTME03UVVGR2FFSXNWVUZKUjB3c1lVRkJZU3hOUVVGaUxGTkJRV2xDU1N4WFFVRnFRaXhEUVVwSUxFTkJWRVlzWlVGbFJTeHhSRUZEVFV3c1QwRkJUeXhOUVVGUUxGVkJRVkVzYzBKQlFWSXNVMEZCYlVOTExGZEJRVzVETEVWQlJFNDdRVUZGUlN4UlFVRkJMRTlCUVU4c1JVRkJSU3hMUVVGTFF6dEJRVVpvUWl4VlFVbEhSaXhyUWtGS1NDeERRV1pHTEdWQmNVSkZMSE5EUVVGUlNpeFBRVUZQTEUxQlFWQXNWVUZCVVN4dlFrRkJVaXhUUVVGcFEwc3NWMEZCYWtNc1JVRkJVaXhGUVVOSFNDeG5Ra0ZFU0N4RFFYSkNSaXhEUVZCR08wRkJhVU5FT3pzN08wVkJka2g1UTBzc2EwSkJRVTFETEZNN096czdaMEpCUVRkQ2RFSXNZeXhsUVVOQk8wRkJRMnBDVlN4RlFVRkJRU3hoUVVGaExFVkJRVVZoTEhOQ1FVRlZReXhKUVVGV0xFTkJRV1ZETEZWQlJHSTdRVUZGYWtKa0xFVkJRVUZCTEdsQ1FVRnBRaXhGUVVGRldTeHpRa0ZCVlVjc1IwRkdXanRCUVVkcVFqZERMRVZCUVVGQkxGRkJRVkVzUlVGQlJUQkRMSE5DUVVGVlNTeE5RVUZXTEVOQlFXbENSaXhWUVVoV08wRkJTV3BDTTBNc1JVRkJRVUVzU1VGQlNTeEZRVUZGZVVNc2MwSkJRVlZITEVkQlNrTTdRVUZMYWtKa0xFVkJRVUZCTEZGQlFWRXNSVUZCUlZjc2MwSkJRVlZMTEVsQlFWWXNRMEZCWlVnc1ZVRk1VanRCUVUxcVFsb3NSVUZCUVVFc1owSkJRV2RDTEVWQlFVVlZMSE5DUVVGVlF5eEpRVUZXTEVOQlFXVkRMRlZCVG1oQ08wRkJUMnBDV0N4RlFVRkJRU3hQUVVGUExFVkJRVVZUTEhOQ1FVRlZReXhKUVVGV0xFTkJRV1ZETEZWQlVGQTdRVUZSYWtJeFF5eEZRVUZCUVN4bFFVRmxMRVZCUVVWM1F5eHpRa0ZCVlUwc1RVRlNWanRCUVZOcVFqVkRMRVZCUVVGQkxFOUJRVThzUlVGQlJYTkRMSE5DUVVGVlR5eFBRVUZXTEVOQlExQlFMSE5DUVVGVlVTeFRRVUZXTEVOQlFXOUNMRU5CUVVOU0xITkNRVUZWU1N4TlFVRllMRVZCUVcxQ1NpeHpRa0ZCVlUwc1RVRkJOMElzUTBGQmNFSXNRMEZFVHl4RlFVVlFTaXhWUVZobE8wRkJXV3BDVml4RlFVRkJRU3hoUVVGaExFVkJRVVZSTEhOQ1FVRlZReXhKUVVGV0xFTkJRV1ZETEZWQldtSTdRVUZoYWtJelFpeEZRVUZCUVN4blFrRkJaMElzUlVGQlJYbENMSE5DUVVGVlF5eEpRV0pZTzBGQlkycENla0lzUlVGQlFVRXNTMEZCU3l4RlFVRkZkMElzYzBKQlFWVk5MRTFCUVZZc1EwRkJhVUpLTEZWQlpGQTdRVUZsYWtKMFF5eEZRVUZCUVN4alFVRmpMRVZCUVVWdlF5eHpRa0ZCVlZFc1UwRkJWaXhEUVVGdlFpeERRVUZEVWl4elFrRkJWVU1zU1VGQldDeEZRVUZwUWtRc2MwSkJRVlZMTEVsQlFUTkNMRU5CUVhCQ0xFTkJaa003UVVGblFtcENiRU1zUlVGQlFVRXNWVUZCVlN4RlFVRkZOa0lzYzBKQlFWVkxMRWxCYUVKTU8wRkJhVUpxUWpOQ0xFVkJRVUZCTEZWQlFWVXNSVUZCUlhOQ0xITkNRVUZWU3p0QlFXcENUQ3hET3p0blFrRkVRVFZDTEdNc2EwSkJjVUpITzBGQlEzQkNiRUlzUlVGQlFVRXNTVUZCU1N4RlFVRkZMRVZCUkdNN1FVRkZjRUpGTEVWQlFVRkJMR0ZCUVdFc1JVRkJSU3hGUVVaTE8wRkJSM0JDWlN4RlFVRkJRU3hMUVVGTExFVkJRVVVzUTBGSVlUdEJRVWx3UWtVc1JVRkJRVUVzVlVGQlZTeEZRVUZGTzBGQlNsRXNReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUVwVFQwNUJjbkp2ZHlCbWNtOXRJQ2N1TDBwVFQwNUJjbkp2ZHljN1hHNXBiWEJ2Y25RZ1oyVjBRMjlzYkdWamRHbHZia1Z1ZEhKcFpYTWdabkp2YlNBbkxpOW5aWFJEYjJ4c1pXTjBhVzl1Ulc1MGNtbGxjeWM3WEc1cGJYQnZjblFnU2xOUFRrNXZaR1VnWm5KdmJTQW5MaTlLVTA5T1RtOWtaU2M3WEc1cGJYQnZjblFnU1hSbGJWSmhibWRsSUdaeWIyMGdKeTR2U1hSbGJWSmhibWRsSnp0Y2JtbHRjRzl5ZENCN1hHNGdJRU5wY21OMWJHRnlVSEp2Y0hOUVlYTnpaV1JVYUhKdmRXZG9TbE5QVGs1bGMzUmxaRTV2WkdVc1hHNGdJRU5wY21OMWJHRnlVSEp2Y0hOUVlYTnpaV1JVYUhKdmRXZG9VbVZ1WkdWeVEyaHBiR1JPYjJSbGN5eGNibjBnWm5KdmJTQW5MaTkwZVhCbGN5YzdYRzVjYmk4cUtseHVJQ29nVW1WdVpHVnljeUJ1WlhOMFpXUWdkbUZzZFdWeklDaGxaeTRnYjJKcVpXTjBjeXdnWVhKeVlYbHpMQ0JzYVhOMGN5d2daWFJqTGlsY2JpQXFMMXh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUZKbGJtUmxja05vYVd4a1RtOWtaWE5RY205d2MxeHVJQ0JsZUhSbGJtUnpJRU5wY21OMWJHRnlVSEp2Y0hOUVlYTnpaV1JVYUhKdmRXZG9VbVZ1WkdWeVEyaHBiR1JPYjJSbGN5QjdYRzRnSUdSaGRHRTZJR0Z1ZVR0Y2JpQWdibTlrWlZSNWNHVTZJSE4wY21sdVp6dGNibjFjYmx4dWFXNTBaWEptWVdObElGSmhibWRsSUh0Y2JpQWdabkp2YlRvZ2JuVnRZbVZ5TzF4dUlDQjBiem9nYm5WdFltVnlPMXh1ZlZ4dVhHNXBiblJsY21aaFkyVWdSVzUwY25rZ2UxeHVJQ0JyWlhrNklITjBjbWx1WnlCOElHNTFiV0psY2p0Y2JpQWdkbUZzZFdVNklHRnVlVHRjYm4xY2JseHVablZ1WTNScGIyNGdhWE5TWVc1blpTaHlZVzVuWlU5eVJXNTBjbms2SUZKaGJtZGxJSHdnUlc1MGNua3BPaUJ5WVc1blpVOXlSVzUwY25rZ2FYTWdVbUZ1WjJVZ2UxeHVJQ0J5WlhSMWNtNGdLSEpoYm1kbFQzSkZiblJ5ZVNCaGN5QlNZVzVuWlNrdWRHOGdJVDA5SUhWdVpHVm1hVzVsWkR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WdVpHVnlRMmhwYkdST2IyUmxjeWhjYmlBZ2NISnZjSE02SUZKbGJtUmxja05vYVd4a1RtOWtaWE5RY205d2N5eGNiaUFnWm5KdmJUODZJRzUxYldKbGNpeGNiaUFnZEc4L09pQnVkVzFpWlhKY2Jpa2dlMXh1SUNCamIyNXpkQ0I3WEc0Z0lDQWdibTlrWlZSNWNHVXNYRzRnSUNBZ1pHRjBZU3hjYmlBZ0lDQmpiMnhzWldOMGFXOXVUR2x0YVhRc1hHNGdJQ0FnWTJseVkzVnNZWEpEWVdOb1pTeGNiaUFnSUNCclpYbFFZWFJvTEZ4dUlDQWdJSEJ2YzNSd2NtOWpaWE56Vm1Gc2RXVXNYRzRnSUNBZ2MyOXlkRTlpYW1WamRFdGxlWE1zWEc0Z0lIMGdQU0J3Y205d2N6dGNiaUFnWTI5dWMzUWdZMmhwYkdST2IyUmxjem9nVW1WaFkzUXVVbVZoWTNST2IyUmxXMTBnUFNCYlhUdGNibHh1SUNCblpYUkRiMnhzWldOMGFXOXVSVzUwY21sbGN5aGNiaUFnSUNCdWIyUmxWSGx3WlN4Y2JpQWdJQ0JrWVhSaExGeHVJQ0FnSUhOdmNuUlBZbXBsWTNSTFpYbHpMRnh1SUNBZ0lHTnZiR3hsWTNScGIyNU1hVzFwZEN4Y2JpQWdJQ0JtY205dExGeHVJQ0FnSUhSdlhHNGdJQ2t1Wm05eVJXRmphQ2dvWlc1MGNua3BJRDArSUh0Y2JpQWdJQ0JwWmlBb2FYTlNZVzVuWlNobGJuUnllU2twSUh0Y2JpQWdJQ0FnSUdOb2FXeGtUbTlrWlhNdWNIVnphQ2hjYmlBZ0lDQWdJQ0FnUEVsMFpXMVNZVzVuWlZ4dUlDQWdJQ0FnSUNBZ0lIc3VMaTV3Y205d2MzMWNiaUFnSUNBZ0lDQWdJQ0JyWlhrOWUyQkpkR1Z0VW1GdVoyVXRMU1I3Wlc1MGNua3Vabkp2YlgwdEpIdGxiblJ5ZVM1MGIzMWdmVnh1SUNBZ0lDQWdJQ0FnSUdaeWIyMDllMlZ1ZEhKNUxtWnliMjE5WEc0Z0lDQWdJQ0FnSUNBZ2RHODllMlZ1ZEhKNUxuUnZmVnh1SUNBZ0lDQWdJQ0FnSUhKbGJtUmxja05vYVd4a1RtOWtaWE05ZTNKbGJtUmxja05vYVd4a1RtOWtaWE45WEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjdJR3RsZVN3Z2RtRnNkV1VnZlNBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnWTI5dWMzUWdhWE5EYVhKamRXeGhjaUE5SUdOcGNtTjFiR0Z5UTJGamFHVXVhVzVrWlhoUFppaDJZV3gxWlNrZ0lUMDlJQzB4TzF4dVhHNGdJQ0FnSUNCamFHbHNaRTV2WkdWekxuQjFjMmdvWEc0Z0lDQWdJQ0FnSUR4S1UwOU9UbTlrWlZ4dUlDQWdJQ0FnSUNBZ0lIc3VMaTV3Y205d2MzMWNiaUFnSUNBZ0lDQWdJQ0I3TGk0dWV5QndiM04wY0hKdlkyVnpjMVpoYkhWbExDQmpiMnhzWldOMGFXOXVUR2x0YVhRZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0JyWlhrOWUyQk9iMlJsTFMwa2UydGxlWDFnZlZ4dUlDQWdJQ0FnSUNBZ0lHdGxlVkJoZEdnOWUxdHJaWGtzSUM0dUxtdGxlVkJoZEdoZGZWeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdHdiM04wY0hKdlkyVnpjMVpoYkhWbEtIWmhiSFZsS1gxY2JpQWdJQ0FnSUNBZ0lDQmphWEpqZFd4aGNrTmhZMmhsUFh0YkxpNHVZMmx5WTNWc1lYSkRZV05vWlN3Z2RtRnNkV1ZkZlZ4dUlDQWdJQ0FnSUNBZ0lHbHpRMmx5WTNWc1lYSTllMmx6UTJseVkzVnNZWEo5WEc0Z0lDQWdJQ0FnSUNBZ2FHbGtaVkp2YjNROWUyWmhiSE5sZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJSEpsZEhWeWJpQmphR2xzWkU1dlpHVnpPMXh1ZlZ4dVhHNXBiblJsY21aaFkyVWdVSEp2Y0hNZ1pYaDBaVzVrY3lCRGFYSmpkV3hoY2xCeWIzQnpVR0Z6YzJWa1ZHaHliM1ZuYUVwVFQwNU9aWE4wWldST2IyUmxJSHRjYmlBZ1pHRjBZVG9nWVc1NU8xeHVJQ0J1YjJSbFZIbHdaVG9nYzNSeWFXNW5PMXh1SUNCdWIyUmxWSGx3WlVsdVpHbGpZWFJ2Y2pvZ2MzUnlhVzVuTzF4dUlDQmpjbVZoZEdWSmRHVnRVM1J5YVc1bk9pQW9aR0YwWVRvZ1lXNTVMQ0JqYjJ4c1pXTjBhVzl1VEdsdGFYUTZJRzUxYldKbGNpa2dQVDRnYzNSeWFXNW5PMXh1SUNCbGVIQmhibVJoWW14bE9pQmliMjlzWldGdU8xeHVmVnh1WEc1cGJuUmxjbVpoWTJVZ1UzUmhkR1VnZTF4dUlDQmxlSEJoYm1SbFpEb2dZbTl2YkdWaGJqdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBVM1JoZEdWR2NtOXRVSEp2Y0hNb2NISnZjSE02SUZCeWIzQnpLU0I3WEc0Z0lDOHZJR05oYkdOMWJHRjBaU0JwYm1ScGRtbGtkV0ZzSUc1dlpHVWdaWGh3WVc1emFXOXVJR2xtSUc1bFkyVnpjMkZ5ZVZ4dUlDQmpiMjV6ZENCbGVIQmhibVJsWkNBOVhHNGdJQ0FnY0hKdmNITXVjMmh2ZFd4a1JYaHdZVzVrVG05a1pTQW1KaUFoY0hKdmNITXVhWE5EYVhKamRXeGhjbHh1SUNBZ0lDQWdQeUJ3Y205d2N5NXphRzkxYkdSRmVIQmhibVJPYjJSbEtIQnliM0J6TG10bGVWQmhkR2dzSUhCeWIzQnpMbVJoZEdFc0lIQnliM0J6TG14bGRtVnNLVnh1SUNBZ0lDQWdPaUJtWVd4elpUdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQmxlSEJoYm1SbFpDeGNiaUFnZlR0Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1NsTlBUazVsYzNSbFpFNXZaR1VnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUThVSEp2Y0hNc0lGTjBZWFJsUGlCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdaMlYwU1hSbGJWTjBjbWx1WnpvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J1YjJSbFZIbHdaVWx1WkdsallYUnZjam9nVUhKdmNGUjVjR1Z6TG1GdWVTeGNiaUFnSUNCdWIyUmxWSGx3WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdSaGRHRTZJRkJ5YjNCVWVYQmxjeTVoYm5rc1hHNGdJQ0FnYUdsa1pWSnZiM1E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdZM0psWVhSbFNYUmxiVk4wY21sdVp6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCemRIbHNhVzVuT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJR052Ykd4bFkzUnBiMjVNYVcxcGREb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNCclpYbFFZWFJvT2lCUWNtOXdWSGx3WlhNdVlYSnlZWGxQWmloY2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NXpkSEpwYm1jc0lGQnliM0JVZVhCbGN5NXVkVzFpWlhKZEtWeHVJQ0FnSUNrdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCc1lXSmxiRkpsYm1SbGNtVnlPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lITm9iM1ZzWkVWNGNHRnVaRTV2WkdVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJR3hsZG1Wc09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2MyOXlkRTlpYW1WamRFdGxlWE02SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NW1kVzVqTENCUWNtOXdWSGx3WlhNdVltOXZiRjBwTEZ4dUlDQWdJR2x6UTJseVkzVnNZWEk2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHVjRjR0Z1WkdGaWJHVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0I5TzF4dVhHNGdJSE4wWVhScFl5QmtaV1poZFd4MFVISnZjSE1nUFNCN1hHNGdJQ0FnWkdGMFlUb2dXMTBzWEc0Z0lDQWdZMmx5WTNWc1lYSkRZV05vWlRvZ1cxMHNYRzRnSUNBZ2JHVjJaV3c2SURBc1hHNGdJQ0FnWlhod1lXNWtZV0pzWlRvZ2RISjFaU3hjYmlBZ2ZUdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdjbTl3Y3pvZ1VISnZjSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaHdjbTl3Y3lrN1hHNGdJQ0FnZEdocGN5NXpkR0YwWlNBOUlHZGxkRk4wWVhSbFJuSnZiVkJ5YjNCektIQnliM0J6S1R0Y2JpQWdmVnh1WEc0Z0lGVk9VMEZHUlY5amIyMXdiMjVsYm5SWGFXeHNVbVZqWldsMlpWQnliM0J6S0c1bGVIUlFjbTl3Y3pvZ1VISnZjSE1wSUh0Y2JpQWdJQ0JqYjI1emRDQnVaWGgwVTNSaGRHVWdQU0JuWlhSVGRHRjBaVVp5YjIxUWNtOXdjeWh1WlhoMFVISnZjSE1wTzF4dUlDQWdJR2xtSUNoblpYUlRkR0YwWlVaeWIyMVFjbTl3Y3loMGFHbHpMbkJ5YjNCektTNWxlSEJoYm1SbFpDQWhQVDBnYm1WNGRGTjBZWFJsTG1WNGNHRnVaR1ZrS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLRzVsZUhSVGRHRjBaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbEtHNWxlSFJRY205d2N6b2dVSEp2Y0hNc0lHNWxlSFJUZEdGMFpUb2dVM1JoZEdVcElIdGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSVNGUFltcGxZM1F1YTJWNWN5aHVaWGgwVUhKdmNITXBMbVpwYm1Rb1hHNGdJQ0FnSUNBZ0lDaHJaWGtwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdhMlY1SUNFOVBTQW5ZMmx5WTNWc1lYSkRZV05vWlNjZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FvYTJWNUlEMDlQU0FuYTJWNVVHRjBhQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdibVY0ZEZCeWIzQnpXMnRsZVYwdWFtOXBiaWduTHljcElDRTlQU0IwYUdsekxuQnliM0J6VzJ0bGVWMHVhbTlwYmlnbkx5Y3BYRzRnSUNBZ0lDQWdJQ0FnSUNBNklHNWxlSFJRY205d2MxdHJaWGtnWVhNZ2EyVjViMllnVUhKdmNITmRJQ0U5UFNCMGFHbHpMbkJ5YjNCelcydGxlU0JoY3lCclpYbHZaaUJRY205d2MxMHBYRzRnSUNBZ0lDQXBJSHg4SUc1bGVIUlRkR0YwWlM1bGVIQmhibVJsWkNBaFBUMGdkR2hwY3k1emRHRjBaUzVsZUhCaGJtUmxaRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ1oyVjBTWFJsYlZOMGNtbHVaeXhjYmlBZ0lDQWdJRzV2WkdWVWVYQmxTVzVrYVdOaGRHOXlMRnh1SUNBZ0lDQWdibTlrWlZSNWNHVXNYRzRnSUNBZ0lDQmtZWFJoTEZ4dUlDQWdJQ0FnYUdsa1pWSnZiM1FzWEc0Z0lDQWdJQ0JqY21WaGRHVkpkR1Z0VTNSeWFXNW5MRnh1SUNBZ0lDQWdjM1I1YkdsdVp5eGNiaUFnSUNBZ0lHTnZiR3hsWTNScGIyNU1hVzFwZEN4Y2JpQWdJQ0FnSUd0bGVWQmhkR2dzWEc0Z0lDQWdJQ0JzWVdKbGJGSmxibVJsY21WeUxGeHVJQ0FnSUNBZ1pYaHdZVzVrWVdKc1pTeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lHVjRjR0Z1WkdWa0lIMGdQU0IwYUdsekxuTjBZWFJsTzF4dUlDQWdJR052Ym5OMElISmxibVJsY21Wa1EyaHBiR1J5Wlc0Z1BWeHVJQ0FnSUNBZ1pYaHdZVzVrWldRZ2ZId2dLR2hwWkdWU2IyOTBJQ1ltSUhSb2FYTXVjSEp2Y0hNdWJHVjJaV3dnUFQwOUlEQXBYRzRnSUNBZ0lDQWdJRDhnY21WdVpHVnlRMmhwYkdST2IyUmxjeWg3SUM0dUxuUm9hWE11Y0hKdmNITXNJR3hsZG1Wc09pQjBhR2x6TG5CeWIzQnpMbXhsZG1Wc0lDc2dNU0I5S1Z4dUlDQWdJQ0FnSUNBNklHNTFiR3c3WEc1Y2JpQWdJQ0JqYjI1emRDQnBkR1Z0Vkhsd1pTQTlJQ2hjYmlBZ0lDQWdJRHh6Y0dGdUlIc3VMaTV6ZEhsc2FXNW5LQ2R1WlhOMFpXUk9iMlJsU1hSbGJWUjVjR1VuTENCbGVIQmhibVJsWkNsOVBseHVJQ0FnSUNBZ0lDQjdibTlrWlZSNWNHVkpibVJwWTJGMGIzSjlYRzRnSUNBZ0lDQThMM053WVc0K1hHNGdJQ0FnS1R0Y2JpQWdJQ0JqYjI1emRDQnlaVzVrWlhKbFpFbDBaVzFUZEhKcGJtY2dQU0JuWlhSSmRHVnRVM1J5YVc1bktGeHVJQ0FnSUNBZ2JtOWtaVlI1Y0dVc1hHNGdJQ0FnSUNCa1lYUmhMRnh1SUNBZ0lDQWdhWFJsYlZSNWNHVXNYRzRnSUNBZ0lDQmpjbVZoZEdWSmRHVnRVM1J5YVc1bktHUmhkR0VzSUdOdmJHeGxZM1JwYjI1TWFXMXBkQ2tzWEc0Z0lDQWdJQ0JyWlhsUVlYUm9YRzRnSUNBZ0tUdGNiaUFnSUNCamIyNXpkQ0J6ZEhsc2FXNW5RWEpuY3lBOUlGdHJaWGxRWVhSb0xDQnViMlJsVkhsd1pTd2daWGh3WVc1a1pXUXNJR1Y0Y0dGdVpHRmliR1ZkSUdGeklHTnZibk4wTzF4dVhHNGdJQ0FnY21WMGRYSnVJR2hwWkdWU2IyOTBJRDhnS0Z4dUlDQWdJQ0FnUEd4cElIc3VMaTV6ZEhsc2FXNW5LQ2R5YjI5MFRtOWtaU2NzSUM0dUxuTjBlV3hwYm1kQmNtZHpLWDArWEc0Z0lDQWdJQ0FnSUR4MWJDQjdMaTR1YzNSNWJHbHVaeWduY205dmRFNXZaR1ZEYUdsc1pISmxiaWNzSUM0dUxuTjBlV3hwYm1kQmNtZHpLWDArWEc0Z0lDQWdJQ0FnSUNBZ2UzSmxibVJsY21Wa1EyaHBiR1J5Wlc1OVhHNGdJQ0FnSUNBZ0lEd3ZkV3crWEc0Z0lDQWdJQ0E4TDJ4cFBseHVJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQThiR2tnZXk0dUxuTjBlV3hwYm1jb0oyNWxjM1JsWkU1dlpHVW5MQ0F1TGk1emRIbHNhVzVuUVhKbmN5bDlQbHh1SUNBZ0lDQWdJQ0I3Wlhod1lXNWtZV0pzWlNBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnUEVwVFQwNUJjbkp2ZDF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdsdVp6MTdjM1I1YkdsdVozMWNiaUFnSUNBZ0lDQWdJQ0FnSUc1dlpHVlVlWEJsUFh0dWIyUmxWSGx3WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0dGdVpHVmtQWHRsZUhCaGJtUmxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUzUm9hWE11YUdGdVpHeGxRMnhwWTJ0OVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ1BHeGhZbVZzWEc0Z0lDQWdJQ0FnSUNBZ2V5NHVMbk4wZVd4cGJtY29XeWRzWVdKbGJDY3NJQ2R1WlhOMFpXUk9iMlJsVEdGaVpXd25YU3dnTGk0dWMzUjViR2x1WjBGeVozTXBmVnh1SUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTNSb2FYTXVhR0Z1Wkd4bFEyeHBZMnQ5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdiR0ZpWld4U1pXNWtaWEpsY2lndUxpNXpkSGxzYVc1blFYSm5jeWw5WEc0Z0lDQWdJQ0FnSUR3dmJHRmlaV3crWEc0Z0lDQWdJQ0FnSUR4emNHRnVYRzRnSUNBZ0lDQWdJQ0FnZXk0dUxuTjBlV3hwYm1jb0oyNWxjM1JsWkU1dlpHVkpkR1Z0VTNSeWFXNW5KeXdnTGk0dWMzUjViR2x1WjBGeVozTXBmVnh1SUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTNSb2FYTXVhR0Z1Wkd4bFEyeHBZMnQ5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdjbVZ1WkdWeVpXUkpkR1Z0VTNSeWFXNW5mVnh1SUNBZ0lDQWdJQ0E4TDNOd1lXNCtYRzRnSUNBZ0lDQWdJRHgxYkNCN0xpNHVjM1I1YkdsdVp5Z25ibVZ6ZEdWa1RtOWtaVU5vYVd4a2NtVnVKeXdnTGk0dWMzUjViR2x1WjBGeVozTXBmVDVjYmlBZ0lDQWdJQ0FnSUNCN2NtVnVaR1Z5WldSRGFHbHNaSEpsYm4xY2JpQWdJQ0FnSUNBZ1BDOTFiRDVjYmlBZ0lDQWdJRHd2YkdrK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHaGhibVJzWlVOc2FXTnJJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG1WNGNHRnVaR0ZpYkdVcElIdGNiaUFnSUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCbGVIQmhibVJsWkRvZ0lYUm9hWE11YzNSaGRHVXVaWGh3WVc1a1pXUWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVmVnh1SWwxOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfb2JqVHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2JqVHlwZVwiKSk7XG5cbnZhciBfSlNPTk9iamVjdE5vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0pTT05PYmplY3ROb2RlXCIpKTtcblxudmFyIF9KU09OQXJyYXlOb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OQXJyYXlOb2RlXCIpKTtcblxudmFyIF9KU09OSXRlcmFibGVOb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OSXRlcmFibGVOb2RlXCIpKTtcblxudmFyIF9KU09OVmFsdWVOb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OVmFsdWVOb2RlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgSlNPTk5vZGUgPSBmdW5jdGlvbiBKU09OTm9kZShfcmVmKSB7XG4gIHZhciBnZXRJdGVtU3RyaW5nID0gX3JlZi5nZXRJdGVtU3RyaW5nLFxuICAgICAga2V5UGF0aCA9IF9yZWYua2V5UGF0aCxcbiAgICAgIGxhYmVsUmVuZGVyZXIgPSBfcmVmLmxhYmVsUmVuZGVyZXIsXG4gICAgICBzdHlsaW5nID0gX3JlZi5zdHlsaW5nLFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgdmFsdWVSZW5kZXJlciA9IF9yZWYudmFsdWVSZW5kZXJlcixcbiAgICAgIGlzQ3VzdG9tTm9kZSA9IF9yZWYuaXNDdXN0b21Ob2RlLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJnZXRJdGVtU3RyaW5nXCIsIFwia2V5UGF0aFwiLCBcImxhYmVsUmVuZGVyZXJcIiwgXCJzdHlsaW5nXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZVJlbmRlcmVyXCIsIFwiaXNDdXN0b21Ob2RlXCJdKTtcblxuICB2YXIgbm9kZVR5cGUgPSBpc0N1c3RvbU5vZGUodmFsdWUpID8gJ0N1c3RvbScgOiAoMCwgX29ialR5cGVbXCJkZWZhdWx0XCJdKSh2YWx1ZSk7XG4gIHZhciBzaW1wbGVOb2RlUHJvcHMgPSB7XG4gICAgZ2V0SXRlbVN0cmluZzogZ2V0SXRlbVN0cmluZyxcbiAgICBrZXk6IGtleVBhdGhbMF0sXG4gICAga2V5UGF0aDoga2V5UGF0aCxcbiAgICBsYWJlbFJlbmRlcmVyOiBsYWJlbFJlbmRlcmVyLFxuICAgIG5vZGVUeXBlOiBub2RlVHlwZSxcbiAgICBzdHlsaW5nOiBzdHlsaW5nLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB2YWx1ZVJlbmRlcmVyOiB2YWx1ZVJlbmRlcmVyXG4gIH07XG5cbiAgdmFyIG5lc3RlZE5vZGVQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByZXN0KSwgc2ltcGxlTm9kZVByb3BzKSwge30sIHtcbiAgICBkYXRhOiB2YWx1ZSxcbiAgICBpc0N1c3RvbU5vZGU6IGlzQ3VzdG9tTm9kZVxuICB9KTtcblxuICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICBjYXNlICdFcnJvcic6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTk9iamVjdE5vZGVbXCJkZWZhdWx0XCJdLCBuZXN0ZWROb2RlUHJvcHMpO1xuXG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05BcnJheU5vZGVbXCJkZWZhdWx0XCJdLCBuZXN0ZWROb2RlUHJvcHMpO1xuXG4gICAgY2FzZSAnSXRlcmFibGUnOlxuICAgIGNhc2UgJ01hcCc6XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9KU09OSXRlcmFibGVOb2RlW1wiZGVmYXVsdFwiXSwgbmVzdGVkTm9kZVByb3BzKTtcblxuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTlZhbHVlTm9kZVtcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCBzaW1wbGVOb2RlUHJvcHMsIHtcbiAgICAgICAgdmFsdWVHZXR0ZXI6IGZ1bmN0aW9uIHZhbHVlR2V0dGVyKHJhdykge1xuICAgICAgICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQocmF3LCBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTlZhbHVlTm9kZVtcImRlZmF1bHRcIl0sIHNpbXBsZU5vZGVQcm9wcyk7XG5cbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9KU09OVmFsdWVOb2RlW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIHNpbXBsZU5vZGVQcm9wcywge1xuICAgICAgICB2YWx1ZUdldHRlcjogZnVuY3Rpb24gdmFsdWVHZXR0ZXIocmF3KSB7XG4gICAgICAgICAgcmV0dXJuIHJhdyA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05WYWx1ZU5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgc2ltcGxlTm9kZVByb3BzLCB7XG4gICAgICAgIHZhbHVlR2V0dGVyOiBmdW5jdGlvbiB2YWx1ZUdldHRlcihyYXcpIHtcbiAgICAgICAgICByZXR1cm4gcmF3LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgIGNhc2UgJ051bGwnOlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05WYWx1ZU5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgc2ltcGxlTm9kZVByb3BzLCB7XG4gICAgICAgIHZhbHVlR2V0dGVyOiBmdW5jdGlvbiB2YWx1ZUdldHRlcigpIHtcbiAgICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgICAgICB9XG4gICAgICB9KSk7XG5cbiAgICBjYXNlICdVbmRlZmluZWQnOlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05WYWx1ZU5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgc2ltcGxlTm9kZVByb3BzLCB7XG4gICAgICAgIHZhbHVlR2V0dGVyOiBmdW5jdGlvbiB2YWx1ZUdldHRlcigpIHtcbiAgICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgIGNhc2UgJ0Z1bmN0aW9uJzpcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05WYWx1ZU5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgc2ltcGxlTm9kZVByb3BzLCB7XG4gICAgICAgIHZhbHVlR2V0dGVyOiBmdW5jdGlvbiB2YWx1ZUdldHRlcihyYXcpIHtcbiAgICAgICAgICByZXR1cm4gcmF3LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgIGNhc2UgJ0N1c3RvbSc6XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTlZhbHVlTm9kZVtcImRlZmF1bHRcIl0sIHNpbXBsZU5vZGVQcm9wcyk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05WYWx1ZU5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgc2ltcGxlTm9kZVByb3BzLCB7XG4gICAgICAgIHZhbHVlR2V0dGVyOiBmdW5jdGlvbiB2YWx1ZUdldHRlcigpIHtcbiAgICAgICAgICByZXR1cm4gXCI8XCIuY29uY2F0KG5vZGVUeXBlLCBcIj5cIik7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgfVxufTtcblxuSlNPTk5vZGUucHJvcFR5cGVzID0ge1xuICBnZXRJdGVtU3RyaW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGtleVBhdGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5T2YoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcl0pLmlzUmVxdWlyZWQpLmlzUmVxdWlyZWQsXG4gIGxhYmVsUmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc3R5bGluZzogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYW55LFxuICB2YWx1ZVJlbmRlcmVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzQ3VzdG9tTm9kZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkXG59O1xudmFyIF9kZWZhdWx0ID0gSlNPTk5vZGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlLVTA5T1RtOWtaUzUwYzNnaVhTd2libUZ0WlhNaU9sc2lTbE5QVGs1dlpHVWlMQ0puWlhSSmRHVnRVM1J5YVc1bklpd2lhMlY1VUdGMGFDSXNJbXhoWW1Wc1VtVnVaR1Z5WlhJaUxDSnpkSGxzYVc1bklpd2lkbUZzZFdVaUxDSjJZV3gxWlZKbGJtUmxjbVZ5SWl3aWFYTkRkWE4wYjIxT2IyUmxJaXdpY21WemRDSXNJbTV2WkdWVWVYQmxJaXdpYzJsdGNHeGxUbTlrWlZCeWIzQnpJaXdpYTJWNUlpd2libVZ6ZEdWa1RtOWtaVkJ5YjNCeklpd2laR0YwWVNJc0luSmhkeUlzSW5SdlNWTlBVM1J5YVc1bklpd2lkRzlUZEhKcGJtY2lMQ0p3Y205d1ZIbHdaWE1pTENKUWNtOXdWSGx3WlhNaUxDSm1kVzVqSWl3aWFYTlNaWEYxYVhKbFpDSXNJbUZ5Y21GNVQyWWlMQ0p2Ym1WUFpsUjVjR1VpTENKemRISnBibWNpTENKdWRXMWlaWElpTENKaGJua2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096czdPenM3T3p0QlFWTkJMRWxCUVUxQkxGRkJRWGRETEVkQlFVY3NVMEZCTTBOQkxGRkJRVEpETEU5QlV6TkRPMEZCUVVFc1RVRlNTa01zWVVGUlNTeFJRVkpLUVN4aFFWRkpPMEZCUVVFc1RVRlFTa01zVDBGUFNTeFJRVkJLUVN4UFFVOUpPMEZCUVVFc1RVRk9Ta01zWVVGTlNTeFJRVTVLUVN4aFFVMUpPMEZCUVVFc1RVRk1Ta01zVDBGTFNTeFJRVXhLUVN4UFFVdEpPMEZCUVVFc1RVRktTa01zUzBGSlNTeFJRVXBLUVN4TFFVbEpPMEZCUVVFc1RVRklTa01zWVVGSFNTeFJRVWhLUVN4aFFVZEpPMEZCUVVFc1RVRkdTa01zV1VGRlNTeFJRVVpLUVN4WlFVVkpPMEZCUVVFc1RVRkVSRU1zU1VGRFF6czdRVUZEU2l4TlFVRk5ReXhSUVVGUkxFZEJRVWRHTEZsQlFWa3NRMEZCUTBZc1MwRkJSQ3hEUVVGYUxFZEJRWE5DTEZGQlFYUkNMRWRCUVdsRExIbENRVUZSUVN4TFFVRlNMRU5CUVd4RU8wRkJSVUVzVFVGQlRVc3NaVUZCWlN4SFFVRkhPMEZCUTNSQ1ZDeEpRVUZCUVN4aFFVRmhMRVZCUVdKQkxHRkJSSE5DTzBGQlJYUkNWU3hKUVVGQlFTeEhRVUZITEVWQlFVVlVMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJSbFU3UVVGSGRFSkJMRWxCUVVGQkxFOUJRVThzUlVGQlVFRXNUMEZJYzBJN1FVRkpkRUpETEVsQlFVRkJMR0ZCUVdFc1JVRkJZa0VzWVVGS2MwSTdRVUZMZEVKTkxFbEJRVUZCTEZGQlFWRXNSVUZCVWtFc1VVRk1jMEk3UVVGTmRFSk1MRWxCUVVGQkxFOUJRVThzUlVGQlVFRXNUMEZPYzBJN1FVRlBkRUpETEVsQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBGUWMwSTdRVUZSZEVKRExFbEJRVUZCTEdGQlFXRXNSVUZCWWtFN1FVRlNjMElzUjBGQmVFSTdPMEZCVjBFc1RVRkJUVTBzWlVGQlpTeHBSRUZEYUVKS0xFbEJSR2RDTEVkQlJXaENSU3hsUVVablFqdEJRVWR1UWtjc1NVRkJRVUVzU1VGQlNTeEZRVUZGVWl4TFFVaGhPMEZCU1c1Q1JTeEpRVUZCUVN4WlFVRlpMRVZCUVZwQk8wRkJTbTFDTEVsQlFYSkNPenRCUVU5QkxGVkJRVkZGTEZGQlFWSTdRVUZEUlN4VFFVRkxMRkZCUVV3N1FVRkRRU3hUUVVGTExFOUJRVXc3UVVGRFFTeFRRVUZMTEZOQlFVdzdRVUZEUVN4VFFVRkxMRk5CUVV3N1FVRkRSU3d3UWtGQlR5eG5RMEZCUXl3d1FrRkJSQ3hGUVVGdlFrY3NaVUZCY0VJc1EwRkJVRHM3UVVGRFJpeFRRVUZMTEU5QlFVdzdRVUZEUlN3d1FrRkJUeXhuUTBGQlF5eDVRa0ZCUkN4RlFVRnRRa0VzWlVGQmJrSXNRMEZCVURzN1FVRkRSaXhUUVVGTExGVkJRVXc3UVVGRFFTeFRRVUZMTEV0QlFVdzdRVUZEUVN4VFFVRkxMRXRCUVV3N1FVRkRSU3d3UWtGQlR5eG5RMEZCUXl3MFFrRkJSQ3hGUVVGelFrRXNaVUZCZEVJc1EwRkJVRHM3UVVGRFJpeFRRVUZMTEZGQlFVdzdRVUZEUlN3d1FrRkRSU3huUTBGQlF5eDVRa0ZCUkN4bFFVTk5SaXhsUVVST08wRkJSVVVzVVVGQlFTeFhRVUZYTEVWQlFVVXNjVUpCUVVOSkxFZEJRVVE3UVVGQlFTdzJRa0ZCY1VKQkxFZEJRWEpDTzBGQlFVRTdRVUZHWml4VFFVUkdPenRCUVUxR0xGTkJRVXNzVVVGQlREdEJRVU5GTERCQ1FVRlBMR2REUVVGRExIbENRVUZFTEVWQlFXMUNTaXhsUVVGdVFpeERRVUZRT3p0QlFVTkdMRk5CUVVzc1UwRkJURHRCUVVORkxEQkNRVU5GTEdkRFFVRkRMSGxDUVVGRUxHVkJRMDFCTEdWQlJFNDdRVUZGUlN4UlFVRkJMRmRCUVZjc1JVRkJSU3h4UWtGQlEwa3NSMEZCUkR0QlFVRkJMR2xDUVVGVlFTeEhRVUZITEVkQlFVY3NUVUZCU0N4SFFVRlpMRTlCUVhwQ08wRkJRVUU3UVVGR1ppeFRRVVJHT3p0QlFVMUdMRk5CUVVzc1RVRkJURHRCUVVORkxEQkNRVU5GTEdkRFFVRkRMSGxDUVVGRUxHVkJRMDFLTEdWQlJFNDdRVUZGUlN4UlFVRkJMRmRCUVZjc1JVRkJSU3h4UWtGQlEwa3NSMEZCUkR0QlFVRkJMR2xDUVVGVFFTeEhRVUZITEVOQlFVTkRMRmRCUVVvc1JVRkJWRHRCUVVGQk8wRkJSbVlzVTBGRVJqczdRVUZOUml4VFFVRkxMRTFCUVV3N1FVRkRSU3d3UWtGQlR5eG5RMEZCUXl4NVFrRkJSQ3hsUVVGdFFrd3NaVUZCYmtJN1FVRkJiME1zVVVGQlFTeFhRVUZYTEVWQlFVVTdRVUZCUVN4cFFrRkJUU3hOUVVGT08wRkJRVUU3UVVGQmFrUXNVMEZCVURzN1FVRkRSaXhUUVVGTExGZEJRVXc3UVVGRFJTd3dRa0ZEUlN4blEwRkJReXg1UWtGQlJDeGxRVUZ0UWtFc1pVRkJia0k3UVVGQmIwTXNVVUZCUVN4WFFVRlhMRVZCUVVVN1FVRkJRU3hwUWtGQlRTeFhRVUZPTzBGQlFVRTdRVUZCYWtRc1UwRkVSanM3UVVGSFJpeFRRVUZMTEZWQlFVdzdRVUZEUVN4VFFVRkxMRkZCUVV3N1FVRkRSU3d3UWtGRFJTeG5RMEZCUXl4NVFrRkJSQ3hsUVVOTlFTeGxRVVJPTzBGQlJVVXNVVUZCUVN4WFFVRlhMRVZCUVVVc2NVSkJRVU5KTEVkQlFVUTdRVUZCUVN4cFFrRkJVMEVzUjBGQlJ5eERRVUZEUlN4UlFVRktMRVZCUVZRN1FVRkJRVHRCUVVabUxGTkJSRVk3TzBGQlRVWXNVMEZCU3l4UlFVRk1PMEZCUTBVc01FSkJRVThzWjBOQlFVTXNlVUpCUVVRc1JVRkJiVUpPTEdWQlFXNUNMRU5CUVZBN08wRkJRMFk3UVVGRFJTd3dRa0ZEUlN4blEwRkJReXg1UWtGQlJDeGxRVU5OUVN4bFFVUk9PMEZCUlVVc1VVRkJRU3hYUVVGWExFVkJRVVU3UVVGQlFTdzBRa0ZCVlVRc1VVRkJWanRCUVVGQk8wRkJSbVlzVTBGRVJqdEJRWEJFU2p0QlFUSkVSQ3hEUVhwR1JEczdRVUV5UmtGVUxGRkJRVkVzUTBGQlEybENMRk5CUVZRc1IwRkJjVUk3UVVGRGJrSm9RaXhGUVVGQlFTeGhRVUZoTEVWQlFVVnBRaXh6UWtGQlZVTXNTVUZCVml4RFFVRmxReXhWUVVSWU8wRkJSVzVDYkVJc1JVRkJRVUVzVDBGQlR5eEZRVUZGWjBJc2MwSkJRVlZITEU5QlFWWXNRMEZEVUVnc2MwSkJRVlZKTEZOQlFWWXNRMEZCYjBJc1EwRkJRMG9zYzBKQlFWVkxMRTFCUVZnc1JVRkJiVUpNTEhOQ1FVRlZUU3hOUVVFM1FpeERRVUZ3UWl4RlFVRXdSRW9zVlVGRWJrUXNSVUZGVUVFc1ZVRkthVUk3UVVGTGJrSnFRaXhGUVVGQlFTeGhRVUZoTEVWQlFVVmxMSE5DUVVGVlF5eEpRVUZXTEVOQlFXVkRMRlZCVEZnN1FVRk5ia0pvUWl4RlFVRkJRU3hQUVVGUExFVkJRVVZqTEhOQ1FVRlZReXhKUVVGV0xFTkJRV1ZETEZWQlRrdzdRVUZQYmtKbUxFVkJRVUZCTEV0QlFVc3NSVUZCUldFc2MwSkJRVlZQTEVkQlVFVTdRVUZSYmtKdVFpeEZRVUZCUVN4aFFVRmhMRVZCUVVWWkxITkNRVUZWUXl4SlFVRldMRU5CUVdWRExGVkJVbGc3UVVGVGJrSmlMRVZCUVVGQkxGbEJRVmtzUlVGQlJWY3NjMEpCUVZWRExFbEJRVllzUTBGQlpVTTdRVUZVVml4RFFVRnlRanRsUVZsbGNFSXNVU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUc5aWFsUjVjR1VnWm5KdmJTQW5MaTl2WW1wVWVYQmxKenRjYm1sdGNHOXlkQ0JLVTA5T1QySnFaV04wVG05a1pTQm1jbTl0SUNjdUwwcFRUMDVQWW1wbFkzUk9iMlJsSnp0Y2JtbHRjRzl5ZENCS1UwOU9RWEp5WVhsT2IyUmxJR1p5YjIwZ0p5NHZTbE5QVGtGeWNtRjVUbTlrWlNjN1hHNXBiWEJ2Y25RZ1NsTlBUa2wwWlhKaFlteGxUbTlrWlNCbWNtOXRJQ2N1TDBwVFQwNUpkR1Z5WVdKc1pVNXZaR1VuTzF4dWFXMXdiM0owSUVwVFQwNVdZV3gxWlU1dlpHVWdabkp2YlNBbkxpOUtVMDlPVm1Gc2RXVk9iMlJsSnp0Y2JtbHRjRzl5ZENCN0lFTnBjbU4xYkdGeVVISnZjSE5RWVhOelpXUlVhSEp2ZFdkb1NsTlBUazV2WkdVZ2ZTQm1jbTl0SUNjdUwzUjVjR1Z6Snp0Y2JseHVhVzUwWlhKbVlXTmxJRkJ5YjNCeklHVjRkR1Z1WkhNZ1EybHlZM1ZzWVhKUWNtOXdjMUJoYzNObFpGUm9jbTkxWjJoS1UwOU9UbTlrWlNCN1hHNGdJR3RsZVZCaGRHZzZJQ2h6ZEhKcGJtY2dmQ0J1ZFcxaVpYSXBXMTA3WEc0Z0lIWmhiSFZsT2lCaGJuazdYRzRnSUdselEzVnpkRzl0VG05a1pUb2dLSFpoYkhWbE9pQmhibmtwSUQwK0lHSnZiMnhsWVc0N1hHNTlYRzVjYm1OdmJuTjBJRXBUVDA1T2IyUmxPaUJTWldGamRDNUdkVzVqZEdsdmJrTnZiWEJ2Ym1WdWREeFFjbTl3Y3o0Z1BTQW9lMXh1SUNCblpYUkpkR1Z0VTNSeWFXNW5MRnh1SUNCclpYbFFZWFJvTEZ4dUlDQnNZV0psYkZKbGJtUmxjbVZ5TEZ4dUlDQnpkSGxzYVc1bkxGeHVJQ0IyWVd4MVpTeGNiaUFnZG1Gc2RXVlNaVzVrWlhKbGNpeGNiaUFnYVhORGRYTjBiMjFPYjJSbExGeHVJQ0F1TGk1eVpYTjBYRzU5S1NBOVBpQjdYRzRnSUdOdmJuTjBJRzV2WkdWVWVYQmxJRDBnYVhORGRYTjBiMjFPYjJSbEtIWmhiSFZsS1NBL0lDZERkWE4wYjIwbklEb2diMkpxVkhsd1pTaDJZV3gxWlNrN1hHNWNiaUFnWTI5dWMzUWdjMmx0Y0d4bFRtOWtaVkJ5YjNCeklEMGdlMXh1SUNBZ0lHZGxkRWwwWlcxVGRISnBibWNzWEc0Z0lDQWdhMlY1T2lCclpYbFFZWFJvV3pCZExGeHVJQ0FnSUd0bGVWQmhkR2dzWEc0Z0lDQWdiR0ZpWld4U1pXNWtaWEpsY2l4Y2JpQWdJQ0J1YjJSbFZIbHdaU3hjYmlBZ0lDQnpkSGxzYVc1bkxGeHVJQ0FnSUhaaGJIVmxMRnh1SUNBZ0lIWmhiSFZsVW1WdVpHVnlaWElzWEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnYm1WemRHVmtUbTlrWlZCeWIzQnpJRDBnZTF4dUlDQWdJQzR1TG5KbGMzUXNYRzRnSUNBZ0xpNHVjMmx0Y0d4bFRtOWtaVkJ5YjNCekxGeHVJQ0FnSUdSaGRHRTZJSFpoYkhWbExGeHVJQ0FnSUdselEzVnpkRzl0VG05a1pTeGNiaUFnZlR0Y2JseHVJQ0J6ZDJsMFkyZ2dLRzV2WkdWVWVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNBblQySnFaV04wSnpwY2JpQWdJQ0JqWVhObElDZEZjbkp2Y2ljNlhHNGdJQ0FnWTJGelpTQW5WMlZoYTAxaGNDYzZYRzRnSUNBZ1kyRnpaU0FuVjJWaGExTmxkQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdQRXBUVDA1UFltcGxZM1JPYjJSbElIc3VMaTV1WlhOMFpXUk9iMlJsVUhKdmNITjlJQzgrTzF4dUlDQWdJR05oYzJVZ0owRnljbUY1SnpwY2JpQWdJQ0FnSUhKbGRIVnliaUE4U2xOUFRrRnljbUY1VG05a1pTQjdMaTR1Ym1WemRHVmtUbTlrWlZCeWIzQnpmU0F2UGp0Y2JpQWdJQ0JqWVhObElDZEpkR1Z5WVdKc1pTYzZYRzRnSUNBZ1kyRnpaU0FuVFdGd0p6cGNiaUFnSUNCallYTmxJQ2RUWlhRbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUR4S1UwOU9TWFJsY21GaWJHVk9iMlJsSUhzdUxpNXVaWE4wWldST2IyUmxVSEp2Y0hOOUlDOCtPMXh1SUNBZ0lHTmhjMlVnSjFOMGNtbHVaeWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4U2xOUFRsWmhiSFZsVG05a1pWeHVJQ0FnSUNBZ0lDQWdJSHN1TGk1emFXMXdiR1ZPYjJSbFVISnZjSE45WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1ZIWlhSMFpYSTlleWh5WVhjNklITjBjbWx1WnlrZ1BUNGdZRndpSkh0eVlYZDlYQ0pnZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tUdGNiaUFnSUNCallYTmxJQ2RPZFcxaVpYSW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlEeEtVMDlPVm1Gc2RXVk9iMlJsSUhzdUxpNXphVzF3YkdWT2IyUmxVSEp2Y0hOOUlDOCtPMXh1SUNBZ0lHTmhjMlVnSjBKdmIyeGxZVzRuT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0FnUEVwVFQwNVdZV3gxWlU1dlpHVmNiaUFnSUNBZ0lDQWdJQ0I3TGk0dWMybHRjR3hsVG05a1pWQnliM0J6ZlZ4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsUjJWMGRHVnlQWHNvY21GM0tTQTlQaUFvY21GM0lEOGdKM1J5ZFdVbklEb2dKMlpoYkhObEp5bDlYRzRnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJR05oYzJVZ0owUmhkR1VuT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0FnUEVwVFQwNVdZV3gxWlU1dlpHVmNiaUFnSUNBZ0lDQWdJQ0I3TGk0dWMybHRjR3hsVG05a1pWQnliM0J6ZlZ4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsUjJWMGRHVnlQWHNvY21GM0tTQTlQaUJ5WVhjdWRHOUpVMDlUZEhKcGJtY29LWDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnWTJGelpTQW5UblZzYkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUEVwVFQwNVdZV3gxWlU1dlpHVWdleTR1TG5OcGJYQnNaVTV2WkdWUWNtOXdjMzBnZG1Gc2RXVkhaWFIwWlhJOWV5Z3BJRDArSUNkdWRXeHNKMzBnTHo0N1hHNGdJQ0FnWTJGelpTQW5WVzVrWldacGJtVmtKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJRHhLVTA5T1ZtRnNkV1ZPYjJSbElIc3VMaTV6YVcxd2JHVk9iMlJsVUhKdmNITjlJSFpoYkhWbFIyVjBkR1Z5UFhzb0tTQTlQaUFuZFc1a1pXWnBibVZrSjMwZ0x6NWNiaUFnSUNBZ0lDazdYRzRnSUNBZ1kyRnpaU0FuUm5WdVkzUnBiMjRuT2x4dUlDQWdJR05oYzJVZ0oxTjViV0p2YkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBOFNsTlBUbFpoYkhWbFRtOWtaVnh1SUNBZ0lDQWdJQ0FnSUhzdUxpNXphVzF3YkdWT2IyUmxVSEp2Y0hOOVhHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdWSFpYUjBaWEk5ZXloeVlYY3BJRDArSUhKaGR5NTBiMU4wY21sdVp5Z3BmVnh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0JqWVhObElDZERkWE4wYjIwbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUR4S1UwOU9WbUZzZFdWT2IyUmxJSHN1TGk1emFXMXdiR1ZPYjJSbFVISnZjSE45SUM4K08xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4U2xOUFRsWmhiSFZsVG05a1pWeHVJQ0FnSUNBZ0lDQWdJSHN1TGk1emFXMXdiR1ZPYjJSbFVISnZjSE45WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1ZIWlhSMFpYSTlleWdwSUQwK0lHQThKSHR1YjJSbFZIbHdaWDArWUgxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDazdYRzRnSUgxY2JuMDdYRzVjYmtwVFQwNU9iMlJsTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnWjJWMFNYUmxiVk4wY21sdVp6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnYTJWNVVHRjBhRG9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvWEc0Z0lDQWdVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXdnVUhKdmNGUjVjR1Z6TG01MWJXSmxjbDBwTG1selVtVnhkV2x5WldSY2JpQWdLUzVwYzFKbGNYVnBjbVZrTEZ4dUlDQnNZV0psYkZKbGJtUmxjbVZ5T2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQnpkSGxzYVc1bk9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0IyWVd4MVpUb2dVSEp2Y0ZSNWNHVnpMbUZ1ZVN4Y2JpQWdkbUZzZFdWU1pXNWtaWEpsY2pvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdhWE5EZFhOMGIyMU9iMlJsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdTbE5QVGs1dlpHVTdYRzRpWFgwPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfSlNPTk5lc3RlZE5vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0pTT05OZXN0ZWROb2RlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8vIFJldHVybnMgdGhlIFwibiBJdGVtc1wiIHN0cmluZyBmb3IgdGhpcyBub2RlLFxuLy8gZ2VuZXJhdGluZyBhbmQgY2FjaGluZyBpdCBpZiBpdCBoYXNuJ3QgYmVlbiBjcmVhdGVkIHlldC5cbmZ1bmN0aW9uIGNyZWF0ZUl0ZW1TdHJpbmcoZGF0YSkge1xuICB2YXIgbGVuID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YSkubGVuZ3RoO1xuICByZXR1cm4gXCJcIi5jb25jYXQobGVuLCBcIiBcIikuY29uY2F0KGxlbiAhPT0gMSA/ICdrZXlzJyA6ICdrZXknKTtcbn1cblxuLy8gQ29uZmlndXJlcyA8SlNPTk5lc3RlZE5vZGU+IHRvIHJlbmRlciBhbiBPYmplY3RcbnZhciBKU09OT2JqZWN0Tm9kZSA9IGZ1bmN0aW9uIEpTT05PYmplY3ROb2RlKF9yZWYpIHtcbiAgdmFyIGRhdGEgPSBfcmVmLmRhdGEsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJkYXRhXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfSlNPTk5lc3RlZE5vZGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkYXRhOiBkYXRhLFxuICAgIG5vZGVUeXBlOiBcIk9iamVjdFwiLFxuICAgIG5vZGVUeXBlSW5kaWNhdG9yOiBwcm9wcy5ub2RlVHlwZSA9PT0gJ0Vycm9yJyA/ICdFcnJvcigpJyA6ICd7fScsXG4gICAgY3JlYXRlSXRlbVN0cmluZzogY3JlYXRlSXRlbVN0cmluZyxcbiAgICBleHBhbmRhYmxlOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkYXRhKS5sZW5ndGggPiAwXG4gIH0pKTtcbn07XG5cbkpTT05PYmplY3ROb2RlLnByb3BUeXBlcyA9IHtcbiAgZGF0YTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBub2RlVHlwZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWRcbn07XG52YXIgX2RlZmF1bHQgPSBKU09OT2JqZWN0Tm9kZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OUtVMDlPVDJKcVpXTjBUbTlrWlM1MGMzZ2lYU3dpYm1GdFpYTWlPbHNpWTNKbFlYUmxTWFJsYlZOMGNtbHVaeUlzSW1SaGRHRWlMQ0pzWlc0aUxDSlBZbXBsWTNRaUxDSm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpJaXdpYkdWdVozUm9JaXdpU2xOUFRrOWlhbVZqZEU1dlpHVWlMQ0p3Y205d2N5SXNJbTV2WkdWVWVYQmxJaXdpY0hKdmNGUjVjR1Z6SWl3aVVISnZjRlI1Y0dWeklpd2liMkpxWldOMElpd2ljM1J5YVc1bklpd2lhWE5TWlhGMWFYSmxaQ0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0QlFVRkJPenRCUVVOQk96dEJRVU5CT3pzN096czdPenM3TzBGQlIwRTdRVUZEUVR0QlFVTkJMRk5CUVZOQkxHZENRVUZVTEVOQlFUQkNReXhKUVVFeFFpeEZRVUZ4UXp0QlFVTnVReXhOUVVGTlF5eEhRVUZITEVkQlFVZERMRTFCUVUwc1EwRkJRME1zYlVKQlFWQXNRMEZCTWtKSUxFbEJRVE5DTEVWQlFXbERTU3hOUVVFM1F6dEJRVU5CTEcxQ1FVRlZTQ3hIUVVGV0xHTkJRV2xDUVN4SFFVRkhMRXRCUVVzc1EwRkJVaXhIUVVGWkxFMUJRVm9zUjBGQmNVSXNTMEZCZEVNN1FVRkRSRHM3UVVGUFJEdEJRVU5CTEVsQlFVMUpMR05CUVRoRExFZEJRVWNzVTBGQmFrUkJMR05CUVdsRU8wRkJRVUVzVFVGQlIwd3NTVUZCU0N4UlFVRkhRU3hKUVVGSU8wRkJRVUVzVFVGQldVMHNTMEZCV2pzN1FVRkJRU3h6UWtGRGNrUXNaME5CUVVNc01FSkJRVVFzWlVGRFRVRXNTMEZFVGp0QlFVVkZMRWxCUVVFc1NVRkJTU3hGUVVGRlRpeEpRVVpTTzBGQlIwVXNTVUZCUVN4UlFVRlJMRVZCUVVNc1VVRklXRHRCUVVsRkxFbEJRVUVzYVVKQlFXbENMRVZCUVVWTkxFdEJRVXNzUTBGQlEwTXNVVUZCVGl4TFFVRnRRaXhQUVVGdVFpeEhRVUUyUWl4VFFVRTNRaXhIUVVGNVF5eEpRVW81UkR0QlFVdEZMRWxCUVVFc1owSkJRV2RDTEVWQlFVVlNMR2RDUVV4d1FqdEJRVTFGTEVsQlFVRXNWVUZCVlN4RlFVRkZSeXhOUVVGTkxFTkJRVU5ETEcxQ1FVRlFMRU5CUVRKQ1NDeEpRVUV6UWl4RlFVRnBRMGtzVFVGQmFrTXNSMEZCTUVNN1FVRk9lRVFzUzBGRWNVUTdRVUZCUVN4RFFVRjJSRHM3UVVGWFFVTXNZMEZCWXl4RFFVRkRSeXhUUVVGbUxFZEJRVEpDTzBGQlEzcENVaXhGUVVGQlFTeEpRVUZKTEVWQlFVVlRMSE5DUVVGVlF5eE5RVVJUTzBGQlJYcENTQ3hGUVVGQlFTeFJRVUZSTEVWQlFVVkZMSE5DUVVGVlJTeE5RVUZXTEVOQlFXbENRenRCUVVaR0xFTkJRVE5DTzJWQlMyVlFMR01pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCS1UwOU9UbVZ6ZEdWa1RtOWtaU0JtY205dElDY3VMMHBUVDA1T1pYTjBaV1JPYjJSbEp6dGNibWx0Y0c5eWRDQjdJRU5wY21OMWJHRnlVSEp2Y0hOUVlYTnpaV1JVYUhKdmRXZG9TbE5QVGs1dlpHVWdmU0JtY205dElDY3VMM1I1Y0dWekp6dGNibHh1THk4Z1VtVjBkWEp1Y3lCMGFHVWdYQ0p1SUVsMFpXMXpYQ0lnYzNSeWFXNW5JR1p2Y2lCMGFHbHpJRzV2WkdVc1hHNHZMeUJuWlc1bGNtRjBhVzVuSUdGdVpDQmpZV05vYVc1bklHbDBJR2xtSUdsMElHaGhjMjRuZENCaVpXVnVJR055WldGMFpXUWdlV1YwTGx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsU1hSbGJWTjBjbWx1Wnloa1lYUmhPaUJoYm5rcElIdGNiaUFnWTI5dWMzUWdiR1Z1SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb1pHRjBZU2t1YkdWdVozUm9PMXh1SUNCeVpYUjFjbTRnWUNSN2JHVnVmU0FrZTJ4bGJpQWhQVDBnTVNBL0lDZHJaWGx6SnlBNklDZHJaWGtuZldBN1hHNTlYRzVjYm1sdWRHVnlabUZqWlNCUWNtOXdjeUJsZUhSbGJtUnpJRU5wY21OMWJHRnlVSEp2Y0hOUVlYTnpaV1JVYUhKdmRXZG9TbE5QVGs1dlpHVWdlMXh1SUNCa1lYUmhPaUJoYm5rN1hHNGdJRzV2WkdWVWVYQmxPaUJ6ZEhKcGJtYzdYRzU5WEc1Y2JpOHZJRU52Ym1acFozVnlaWE1nUEVwVFQwNU9aWE4wWldST2IyUmxQaUIwYnlCeVpXNWtaWElnWVc0Z1QySnFaV04wWEc1amIyNXpkQ0JLVTA5T1QySnFaV04wVG05a1pUb2dVbVZoWTNRdVJuVnVZM1JwYjI1RGIyMXdiMjVsYm5ROFVISnZjSE0rSUQwZ0tIc2daR0YwWVN3Z0xpNHVjSEp2Y0hNZ2ZTa2dQVDRnS0Z4dUlDQThTbE5QVGs1bGMzUmxaRTV2WkdWY2JpQWdJQ0I3TGk0dWNISnZjSE45WEc0Z0lDQWdaR0YwWVQxN1pHRjBZWDFjYmlBZ0lDQnViMlJsVkhsd1pUMWNJazlpYW1WamRGd2lYRzRnSUNBZ2JtOWtaVlI1Y0dWSmJtUnBZMkYwYjNJOWUzQnliM0J6TG01dlpHVlVlWEJsSUQwOVBTQW5SWEp5YjNJbklEOGdKMFZ5Y205eUtDa25JRG9nSjN0OUozMWNiaUFnSUNCamNtVmhkR1ZKZEdWdFUzUnlhVzVuUFh0amNtVmhkR1ZKZEdWdFUzUnlhVzVuZlZ4dUlDQWdJR1Y0Y0dGdVpHRmliR1U5ZTA5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0dSaGRHRXBMbXhsYm1kMGFDQStJREI5WEc0Z0lDOCtYRzRwTzF4dVhHNUtVMDlPVDJKcVpXTjBUbTlrWlM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdSaGRHRTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXNYRzRnSUc1dlpHVlVlWEJsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JLVTA5T1QySnFaV04wVG05a1pUdGNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbnZhciBKU09OVmFsdWVOb2RlID0gZnVuY3Rpb24gSlNPTlZhbHVlTm9kZShfcmVmKSB7XG4gIHZhciBub2RlVHlwZSA9IF9yZWYubm9kZVR5cGUsXG4gICAgICBzdHlsaW5nID0gX3JlZi5zdHlsaW5nLFxuICAgICAgbGFiZWxSZW5kZXJlciA9IF9yZWYubGFiZWxSZW5kZXJlcixcbiAgICAgIGtleVBhdGggPSBfcmVmLmtleVBhdGgsXG4gICAgICB2YWx1ZVJlbmRlcmVyID0gX3JlZi52YWx1ZVJlbmRlcmVyLFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgX3JlZiR2YWx1ZUdldHRlciA9IF9yZWYudmFsdWVHZXR0ZXIsXG4gICAgICB2YWx1ZUdldHRlciA9IF9yZWYkdmFsdWVHZXR0ZXIgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSA6IF9yZWYkdmFsdWVHZXR0ZXI7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwibGlcIiwgc3R5bGluZygndmFsdWUnLCBub2RlVHlwZSwga2V5UGF0aCksIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCBzdHlsaW5nKFsnbGFiZWwnLCAndmFsdWVMYWJlbCddLCBub2RlVHlwZSwga2V5UGF0aCksIGxhYmVsUmVuZGVyZXIoa2V5UGF0aCwgbm9kZVR5cGUsIGZhbHNlLCBmYWxzZSkpLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBzdHlsaW5nKCd2YWx1ZVRleHQnLCBub2RlVHlwZSwga2V5UGF0aCksIHZhbHVlUmVuZGVyZXIuYXBwbHkodm9pZCAwLCBbdmFsdWVHZXR0ZXIodmFsdWUpLCB2YWx1ZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShrZXlQYXRoKSkpKSk7XG59O1xuXG5KU09OVmFsdWVOb2RlLnByb3BUeXBlcyA9IHtcbiAgbm9kZVR5cGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkLFxuICBzdHlsaW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGxhYmVsUmVuZGVyZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAga2V5UGF0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYXJyYXlPZihfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyXSkuaXNSZXF1aXJlZCkuaXNSZXF1aXJlZCxcbiAgdmFsdWVSZW5kZXJlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYW55LFxuICB2YWx1ZUdldHRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuY1xufTtcbnZhciBfZGVmYXVsdCA9IEpTT05WYWx1ZU5vZGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlLVTA5T1ZtRnNkV1ZPYjJSbExuUnplQ0pkTENKdVlXMWxjeUk2V3lKS1UwOU9WbUZzZFdWT2IyUmxJaXdpYm05a1pWUjVjR1VpTENKemRIbHNhVzVuSWl3aWJHRmlaV3hTWlc1a1pYSmxjaUlzSW10bGVWQmhkR2dpTENKMllXeDFaVkpsYm1SbGNtVnlJaXdpZG1Gc2RXVWlMQ0oyWVd4MVpVZGxkSFJsY2lJc0luQnliM0JVZVhCbGN5SXNJbEJ5YjNCVWVYQmxjeUlzSW5OMGNtbHVaeUlzSW1selVtVnhkV2x5WldRaUxDSm1kVzVqSWl3aVlYSnlZWGxQWmlJc0ltOXVaVTltVkhsd1pTSXNJbTUxYldKbGNpSXNJbUZ1ZVNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVUZCT3p0QlFVTkJPenM3T3pzN096czdPenM3T3pzN08wRkJZVUVzU1VGQlRVRXNZVUZCTmtNc1IwRkJSeXhUUVVGb1JFRXNZVUZCWjBRN1FVRkJRU3hOUVVOd1JFTXNVVUZFYjBRc1VVRkRjRVJCTEZGQlJHOUVPMEZCUVVFc1RVRkZjRVJETEU5QlJtOUVMRkZCUlhCRVFTeFBRVVp2UkR0QlFVRkJMRTFCUjNCRVF5eGhRVWh2UkN4UlFVZHdSRUVzWVVGSWIwUTdRVUZCUVN4TlFVbHdSRU1zVDBGS2IwUXNVVUZKY0VSQkxFOUJTbTlFTzBGQlFVRXNUVUZMY0VSRExHRkJURzlFTEZGQlMzQkVRU3hoUVV4dlJEdEJRVUZCTEUxQlRYQkVReXhMUVU1dlJDeFJRVTF3UkVFc1MwRk9iMFE3UVVGQlFTdzRRa0ZQY0VSRExGZEJVRzlFTzBGQlFVRXNUVUZQY0VSQkxGZEJVRzlFTEdsRFFVOTBReXhWUVVGRFJDeExRVUZFTzBGQlFVRXNWMEZCVjBFc1MwRkJXRHRCUVVGQkxFZEJVSE5ETzBGQlFVRXNjMEpCVTNCRUxITkRRVUZSU2l4UFFVRlBMRU5CUVVNc1QwRkJSQ3hGUVVGVlJDeFJRVUZXTEVWQlFXOUNSeXhQUVVGd1FpeERRVUZtTEdWQlEwVXNlVU5CUVZkR0xFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVUXNSVUZCVlN4WlFVRldMRU5CUVVRc1JVRkJNRUpFTEZGQlFURkNMRVZCUVc5RFJ5eFBRVUZ3UXl4RFFVRnNRaXhGUVVOSFJDeGhRVUZoTEVOQlFVTkRMRTlCUVVRc1JVRkJWVWdzVVVGQlZpeEZRVUZ2UWl4TFFVRndRaXhGUVVFeVFpeExRVUV6UWl4RFFVUm9RaXhEUVVSR0xHVkJTVVVzZDBOQlFWVkRMRTlCUVU4c1EwRkJReXhYUVVGRUxFVkJRV05FTEZGQlFXUXNSVUZCZDBKSExFOUJRWGhDTEVOQlFXcENMRVZCUTBkRExHRkJRV0VzVFVGQllpeFZRVUZqUlN4WFFVRlhMRU5CUVVORUxFdEJRVVFzUTBGQmVrSXNSVUZCYTBOQkxFdEJRV3hETERSQ1FVRTBRMFlzVDBGQk5VTXNSMEZFU0N4RFFVcEdMRU5CVkc5RU8wRkJRVUVzUTBGQmRFUTdPMEZCYlVKQlNpeGhRVUZoTEVOQlFVTlJMRk5CUVdRc1IwRkJNRUk3UVVGRGVFSlFMRVZCUVVGQkxGRkJRVkVzUlVGQlJWRXNjMEpCUVZWRExFMUJRVllzUTBGQmFVSkRMRlZCUkVnN1FVRkZlRUpVTEVWQlFVRkJMRTlCUVU4c1JVRkJSVThzYzBKQlFWVkhMRWxCUVZZc1EwRkJaVVFzVlVGR1FUdEJRVWQ0UWxJc1JVRkJRVUVzWVVGQllTeEZRVUZGVFN4elFrRkJWVWNzU1VGQlZpeERRVUZsUkN4VlFVaE9PMEZCU1hoQ1VDeEZRVUZCUVN4UFFVRlBMRVZCUVVWTExITkNRVUZWU1N4UFFVRldMRU5CUTFCS0xITkNRVUZWU3l4VFFVRldMRU5CUVc5Q0xFTkJRVU5NTEhOQ1FVRlZReXhOUVVGWUxFVkJRVzFDUkN4elFrRkJWVTBzVFVGQk4wSXNRMEZCY0VJc1JVRkJNRVJLTEZWQlJHNUVMRVZCUlZCQkxGVkJUbk5DTzBGQlQzaENUaXhGUVVGQlFTeGhRVUZoTEVWQlFVVkpMSE5DUVVGVlJ5eEpRVUZXTEVOQlFXVkVMRlZCVUU0N1FVRlJlRUpNTEVWQlFVRkJMRXRCUVVzc1JVRkJSVWNzYzBKQlFWVlBMRWRCVWs4N1FVRlRlRUpVTEVWQlFVRkJMRmRCUVZjc1JVRkJSVVVzYzBKQlFWVkhPMEZCVkVNc1EwRkJNVUk3WlVGWlpWb3NZU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUhzZ1NsTlBUbFpoYkhWbFRtOWtaVU5wY21OMWJHRnlVSEp2Y0hOUWNtOTJhV1JsWkVKNVNsTlBUazV2WkdVZ2ZTQm1jbTl0SUNjdUwzUjVjR1Z6Snp0Y2JseHVMeW9xWEc0Z0tpQlNaVzVrWlhKeklITnBiWEJzWlNCMllXeDFaWE1nS0dWbkxpQnpkSEpwYm1kekxDQnVkVzFpWlhKekxDQmliMjlzWldGdWN5d2daWFJqS1Z4dUlDb3ZYRzVjYm1sdWRHVnlabUZqWlNCUWNtOXdjeUJsZUhSbGJtUnpJRXBUVDA1V1lXeDFaVTV2WkdWRGFYSmpkV3hoY2xCeWIzQnpVSEp2ZG1sa1pXUkNlVXBUVDA1T2IyUmxJSHRjYmlBZ2JtOWtaVlI1Y0dVNklITjBjbWx1Wnp0Y2JpQWdkbUZzZFdVNklHRnVlVHRjYmlBZ2RtRnNkV1ZIWlhSMFpYSS9PaUFvZG1Gc2RXVTZJR0Z1ZVNrZ1BUNGdZVzU1TzF4dWZWeHVYRzVqYjI1emRDQktVMDlPVm1Gc2RXVk9iMlJsT2lCU1pXRmpkQzVHZFc1amRHbHZia052YlhCdmJtVnVkRHhRY205d2N6NGdQU0FvZTF4dUlDQnViMlJsVkhsd1pTeGNiaUFnYzNSNWJHbHVaeXhjYmlBZ2JHRmlaV3hTWlc1a1pYSmxjaXhjYmlBZ2EyVjVVR0YwYUN4Y2JpQWdkbUZzZFdWU1pXNWtaWEpsY2l4Y2JpQWdkbUZzZFdVc1hHNGdJSFpoYkhWbFIyVjBkR1Z5SUQwZ0tIWmhiSFZsS1NBOVBpQjJZV3gxWlN4Y2JuMHBJRDArSUNoY2JpQWdQR3hwSUhzdUxpNXpkSGxzYVc1bktDZDJZV3gxWlNjc0lHNXZaR1ZVZVhCbExDQnJaWGxRWVhSb0tYMCtYRzRnSUNBZ1BHeGhZbVZzSUhzdUxpNXpkSGxzYVc1bktGc25iR0ZpWld3bkxDQW5kbUZzZFdWTVlXSmxiQ2RkTENCdWIyUmxWSGx3WlN3Z2EyVjVVR0YwYUNsOVBseHVJQ0FnSUNBZ2UyeGhZbVZzVW1WdVpHVnlaWElvYTJWNVVHRjBhQ3dnYm05a1pWUjVjR1VzSUdaaGJITmxMQ0JtWVd4elpTbDlYRzRnSUNBZ1BDOXNZV0psYkQ1Y2JpQWdJQ0E4YzNCaGJpQjdMaTR1YzNSNWJHbHVaeWduZG1Gc2RXVlVaWGgwSnl3Z2JtOWtaVlI1Y0dVc0lHdGxlVkJoZEdncGZUNWNiaUFnSUNBZ0lIdDJZV3gxWlZKbGJtUmxjbVZ5S0haaGJIVmxSMlYwZEdWeUtIWmhiSFZsS1N3Z2RtRnNkV1VzSUM0dUxtdGxlVkJoZEdncGZWeHVJQ0FnSUR3dmMzQmhiajVjYmlBZ1BDOXNhVDVjYmlrN1hHNWNia3BUVDA1V1lXeDFaVTV2WkdVdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCdWIyUmxWSGx3WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnk1cGMxSmxjWFZwY21Wa0xGeHVJQ0J6ZEhsc2FXNW5PaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCc1lXSmxiRkpsYm1SbGNtVnlPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCclpYbFFZWFJvT2lCUWNtOXdWSGx3WlhNdVlYSnlZWGxQWmloY2JpQWdJQ0JRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0UWNtOXdWSGx3WlhNdWMzUnlhVzVuTENCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5WFNrdWFYTlNaWEYxYVhKbFpGeHVJQ0FwTG1selVtVnhkV2x5WldRc1hHNGdJSFpoYkhWbFVtVnVaR1Z5WlhJNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJSFpoYkhWbE9pQlFjbTl3Vkhsd1pYTXVZVzU1TEZ4dUlDQjJZV3gxWlVkbGRIUmxjam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCS1UwOU9WbUZzZFdWT2IyUmxPMXh1SWwxOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3RCYXNlMTZTdHlsaW5nID0gcmVxdWlyZShcInJlYWN0LWJhc2UxNi1zdHlsaW5nXCIpO1xuXG52YXIgX3NvbGFyaXplZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdGhlbWVzL3NvbGFyaXplZFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGNvbG9yTWFwID0gZnVuY3Rpb24gY29sb3JNYXAodGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBCQUNLR1JPVU5EX0NPTE9SOiB0aGVtZS5iYXNlMDAsXG4gICAgVEVYVF9DT0xPUjogdGhlbWUuYmFzZTA3LFxuICAgIFNUUklOR19DT0xPUjogdGhlbWUuYmFzZTBCLFxuICAgIERBVEVfQ09MT1I6IHRoZW1lLmJhc2UwQixcbiAgICBOVU1CRVJfQ09MT1I6IHRoZW1lLmJhc2UwOSxcbiAgICBCT09MRUFOX0NPTE9SOiB0aGVtZS5iYXNlMDksXG4gICAgTlVMTF9DT0xPUjogdGhlbWUuYmFzZTA4LFxuICAgIFVOREVGSU5FRF9DT0xPUjogdGhlbWUuYmFzZTA4LFxuICAgIEZVTkNUSU9OX0NPTE9SOiB0aGVtZS5iYXNlMDgsXG4gICAgU1lNQk9MX0NPTE9SOiB0aGVtZS5iYXNlMDgsXG4gICAgTEFCRUxfQ09MT1I6IHRoZW1lLmJhc2UwRCxcbiAgICBBUlJPV19DT0xPUjogdGhlbWUuYmFzZTBELFxuICAgIElURU1fU1RSSU5HX0NPTE9SOiB0aGVtZS5iYXNlMEIsXG4gICAgSVRFTV9TVFJJTkdfRVhQQU5ERURfQ09MT1I6IHRoZW1lLmJhc2UwM1xuICB9O1xufTtcblxudmFyIHZhbHVlQ29sb3JNYXAgPSBmdW5jdGlvbiB2YWx1ZUNvbG9yTWFwKGNvbG9ycykge1xuICByZXR1cm4ge1xuICAgIFN0cmluZzogY29sb3JzLlNUUklOR19DT0xPUixcbiAgICBEYXRlOiBjb2xvcnMuREFURV9DT0xPUixcbiAgICBOdW1iZXI6IGNvbG9ycy5OVU1CRVJfQ09MT1IsXG4gICAgQm9vbGVhbjogY29sb3JzLkJPT0xFQU5fQ09MT1IsXG4gICAgTnVsbDogY29sb3JzLk5VTExfQ09MT1IsXG4gICAgVW5kZWZpbmVkOiBjb2xvcnMuVU5ERUZJTkVEX0NPTE9SLFxuICAgIEZ1bmN0aW9uOiBjb2xvcnMuRlVOQ1RJT05fQ09MT1IsXG4gICAgU3ltYm9sOiBjb2xvcnMuU1lNQk9MX0NPTE9SXG4gIH07XG59O1xuXG52YXIgZ2V0RGVmYXVsdFRoZW1lU3R5bGluZyA9IGZ1bmN0aW9uIGdldERlZmF1bHRUaGVtZVN0eWxpbmcodGhlbWUpIHtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yTWFwKHRoZW1lKTtcbiAgcmV0dXJuIHtcbiAgICB0cmVlOiB7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWFyZ2luVG9wOiAnMC41ZW0nLFxuICAgICAgbWFyZ2luQm90dG9tOiAnMC41ZW0nLFxuICAgICAgbWFyZ2luTGVmdDogJzAuMTI1ZW0nLFxuICAgICAgbWFyZ2luUmlnaHQ6IDAsXG4gICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgIE1velVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIFdlYmtpdFVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLkJBQ0tHUk9VTkRfQ09MT1JcbiAgICB9LFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfcmVmLCBub2RlVHlwZSwga2V5UGF0aCkge1xuICAgICAgdmFyIHN0eWxlID0gX3JlZi5zdHlsZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICBwYWRkaW5nVG9wOiAnMC4yNWVtJyxcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDAsXG4gICAgICAgICAgbWFyZ2luTGVmdDogJzAuODc1ZW0nLFxuICAgICAgICAgIFdlYmtpdFVzZXJTZWxlY3Q6ICd0ZXh0JyxcbiAgICAgICAgICBNb3pVc2VyU2VsZWN0OiAndGV4dCcsXG4gICAgICAgICAgd29yZFdyYXA6ICdicmVhay13b3JkJyxcbiAgICAgICAgICBwYWRkaW5nTGVmdDoga2V5UGF0aC5sZW5ndGggPiAxID8gJzIuMTI1ZW0nIDogJzEuMjVlbScsXG4gICAgICAgICAgdGV4dEluZGVudDogJy0wLjVlbScsXG4gICAgICAgICAgd29yZEJyZWFrOiAnYnJlYWstYWxsJ1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9LFxuICAgIGxhYmVsOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGNvbG9yOiBjb2xvcnMuTEFCRUxfQ09MT1JcbiAgICB9LFxuICAgIHZhbHVlTGFiZWw6IHtcbiAgICAgIG1hcmdpbjogJzAgMC41ZW0gMCAwJ1xuICAgIH0sXG4gICAgdmFsdWVUZXh0OiBmdW5jdGlvbiB2YWx1ZVRleHQoX3JlZjIsIG5vZGVUeXBlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVmMi5zdHlsZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICBjb2xvcjogdmFsdWVDb2xvck1hcChjb2xvcnMpW25vZGVUeXBlXVxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9LFxuICAgIGl0ZW1SYW5nZTogZnVuY3Rpb24gaXRlbVJhbmdlKHN0eWxpbmcsIGV4cGFuZGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IGV4cGFuZGVkID8gMCA6ICcwLjI1ZW0nLFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgIGNvbG9yOiBjb2xvcnMuTEFCRUxfQ09MT1JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGFycm93OiBmdW5jdGlvbiBhcnJvdyhfcmVmMywgbm9kZVR5cGUsIGV4cGFuZGVkKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVmMy5zdHlsZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgICAgIHRyYW5zaXRpb246ICcxNTBtcycsXG4gICAgICAgICAgV2Via2l0VHJhbnNpdGlvbjogJzE1MG1zJyxcbiAgICAgICAgICBNb3pUcmFuc2l0aW9uOiAnMTUwbXMnLFxuICAgICAgICAgIFdlYmtpdFRyYW5zZm9ybTogZXhwYW5kZWQgPyAncm90YXRlWig5MGRlZyknIDogJ3JvdGF0ZVooMGRlZyknLFxuICAgICAgICAgIE1velRyYW5zZm9ybTogZXhwYW5kZWQgPyAncm90YXRlWig5MGRlZyknIDogJ3JvdGF0ZVooMGRlZyknLFxuICAgICAgICAgIHRyYW5zZm9ybTogZXhwYW5kZWQgPyAncm90YXRlWig5MGRlZyknIDogJ3JvdGF0ZVooMGRlZyknLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzQ1JSA1MCUnLFxuICAgICAgICAgIFdlYmtpdFRyYW5zZm9ybU9yaWdpbjogJzQ1JSA1MCUnLFxuICAgICAgICAgIE1velRyYW5zZm9ybU9yaWdpbjogJzQ1JSA1MCUnLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6ICcxLjFlbScsXG4gICAgICAgICAgZm9udFNpemU6ICcwLjc1ZW0nXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0sXG4gICAgYXJyb3dDb250YWluZXI6IGZ1bmN0aW9uIGFycm93Q29udGFpbmVyKF9yZWY0LCBhcnJvd1N0eWxlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVmNC5zdHlsZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6ICcwLjVlbScsXG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IGFycm93U3R5bGUgPT09ICdkb3VibGUnID8gJzFlbScgOiAwLFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0sXG4gICAgYXJyb3dTaWduOiB7XG4gICAgICBjb2xvcjogY29sb3JzLkFSUk9XX0NPTE9SXG4gICAgfSxcbiAgICBhcnJvd1NpZ25Jbm5lcjoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnLTAuNGVtJ1xuICAgIH0sXG4gICAgbmVzdGVkTm9kZTogZnVuY3Rpb24gbmVzdGVkTm9kZShfcmVmNSwga2V5UGF0aCwgbm9kZVR5cGUsIGV4cGFuZGVkLCBleHBhbmRhYmxlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVmNS5zdHlsZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICBwYWRkaW5nVG9wOiAnMC4yNWVtJyxcbiAgICAgICAgICBtYXJnaW5MZWZ0OiBrZXlQYXRoLmxlbmd0aCA+IDEgPyAnMC44NzVlbScgOiAwLFxuICAgICAgICAgIHBhZGRpbmdMZWZ0OiAhZXhwYW5kYWJsZSA/ICcxLjEyNWVtJyA6IDBcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSxcbiAgICByb290Tm9kZToge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG4gICAgbmVzdGVkTm9kZUxhYmVsOiBmdW5jdGlvbiBuZXN0ZWROb2RlTGFiZWwoX3JlZjYsIGtleVBhdGgsIG5vZGVUeXBlLCBleHBhbmRlZCwgZXhwYW5kYWJsZSkge1xuICAgICAgdmFyIHN0eWxlID0gX3JlZjYuc3R5bGU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdHlsZSksIHt9LCB7XG4gICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgV2Via2l0VXNlclNlbGVjdDogZXhwYW5kYWJsZSA/ICdpbmhlcml0JyA6ICd0ZXh0JyxcbiAgICAgICAgICBNb3pVc2VyU2VsZWN0OiBleHBhbmRhYmxlID8gJ2luaGVyaXQnIDogJ3RleHQnLFxuICAgICAgICAgIGN1cnNvcjogZXhwYW5kYWJsZSA/ICdwb2ludGVyJyA6ICdkZWZhdWx0J1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9LFxuICAgIG5lc3RlZE5vZGVJdGVtU3RyaW5nOiBmdW5jdGlvbiBuZXN0ZWROb2RlSXRlbVN0cmluZyhfcmVmNywga2V5UGF0aCwgbm9kZVR5cGUsIGV4cGFuZGVkKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVmNy5zdHlsZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogJzAuNWVtJyxcbiAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICBjb2xvcjogZXhwYW5kZWQgPyBjb2xvcnMuSVRFTV9TVFJJTkdfRVhQQU5ERURfQ09MT1IgOiBjb2xvcnMuSVRFTV9TVFJJTkdfQ09MT1JcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSxcbiAgICBuZXN0ZWROb2RlSXRlbVR5cGU6IHtcbiAgICAgIG1hcmdpbkxlZnQ6ICcwLjNlbScsXG4gICAgICBtYXJnaW5SaWdodDogJzAuM2VtJ1xuICAgIH0sXG4gICAgbmVzdGVkTm9kZUNoaWxkcmVuOiBmdW5jdGlvbiBuZXN0ZWROb2RlQ2hpbGRyZW4oX3JlZjgsIG5vZGVUeXBlLCBleHBhbmRlZCkge1xuICAgICAgdmFyIHN0eWxlID0gX3JlZjguc3R5bGU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdHlsZSksIHt9LCB7XG4gICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICAgICAgZGlzcGxheTogZXhwYW5kZWQgPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0sXG4gICAgcm9vdE5vZGVDaGlsZHJlbjoge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIGxpc3RTdHlsZTogJ25vbmUnXG4gICAgfVxuICB9O1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdEJhc2UxNlN0eWxpbmcuY3JlYXRlU3R5bGluZykoZ2V0RGVmYXVsdFRoZW1lU3R5bGluZywge1xuICBkZWZhdWx0QmFzZTE2OiBfc29sYXJpemVkW1wiZGVmYXVsdFwiXVxufSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OWpjbVZoZEdWVGRIbHNhVzVuUm5KdmJWUm9aVzFsTG5SeklsMHNJbTVoYldWeklqcGJJbU52Ykc5eVRXRndJaXdpZEdobGJXVWlMQ0pDUVVOTFIxSlBWVTVFWDBOUFRFOVNJaXdpWW1GelpUQXdJaXdpVkVWWVZGOURUMHhQVWlJc0ltSmhjMlV3TnlJc0lsTlVVa2xPUjE5RFQweFBVaUlzSW1KaGMyVXdRaUlzSWtSQlZFVmZRMDlNVDFJaUxDSk9WVTFDUlZKZlEwOU1UMUlpTENKaVlYTmxNRGtpTENKQ1QwOU1SVUZPWDBOUFRFOVNJaXdpVGxWTVRGOURUMHhQVWlJc0ltSmhjMlV3T0NJc0lsVk9SRVZHU1U1RlJGOURUMHhQVWlJc0lrWlZUa05VU1U5T1gwTlBURTlTSWl3aVUxbE5RazlNWDBOUFRFOVNJaXdpVEVGQ1JVeGZRMDlNVDFJaUxDSmlZWE5sTUVRaUxDSkJVbEpQVjE5RFQweFBVaUlzSWtsVVJVMWZVMVJTU1U1SFgwTlBURTlTSWl3aVNWUkZUVjlUVkZKSlRrZGZSVmhRUVU1RVJVUmZRMDlNVDFJaUxDSmlZWE5sTURNaUxDSjJZV3gxWlVOdmJHOXlUV0Z3SWl3aVkyOXNiM0p6SWl3aVUzUnlhVzVuSWl3aVJHRjBaU0lzSWs1MWJXSmxjaUlzSWtKdmIyeGxZVzRpTENKT2RXeHNJaXdpVlc1a1pXWnBibVZrSWl3aVJuVnVZM1JwYjI0aUxDSlRlVzFpYjJ3aUxDSm5aWFJFWldaaGRXeDBWR2hsYldWVGRIbHNhVzVuSWl3aWRISmxaU0lzSW1KdmNtUmxjaUlzSW5CaFpHUnBibWNpTENKdFlYSm5hVzVVYjNBaUxDSnRZWEpuYVc1Q2IzUjBiMjBpTENKdFlYSm5hVzVNWldaMElpd2liV0Z5WjJsdVVtbG5hSFFpTENKc2FYTjBVM1I1YkdVaUxDSk5iM3BWYzJWeVUyVnNaV04wSWl3aVYyVmlhMmwwVlhObGNsTmxiR1ZqZENJc0ltSmhZMnRuY205MWJtUkRiMnh2Y2lJc0luWmhiSFZsSWl3aWJtOWtaVlI1Y0dVaUxDSnJaWGxRWVhSb0lpd2ljM1I1YkdVaUxDSndZV1JrYVc1blZHOXdJaXdpY0dGa1pHbHVaMUpwWjJoMElpd2lkMjl5WkZkeVlYQWlMQ0p3WVdSa2FXNW5UR1ZtZENJc0lteGxibWQwYUNJc0luUmxlSFJKYm1SbGJuUWlMQ0ozYjNKa1FuSmxZV3NpTENKc1lXSmxiQ0lzSW1ScGMzQnNZWGtpTENKamIyeHZjaUlzSW5aaGJIVmxUR0ZpWld3aUxDSnRZWEpuYVc0aUxDSjJZV3gxWlZSbGVIUWlMQ0pwZEdWdFVtRnVaMlVpTENKemRIbHNhVzVuSWl3aVpYaHdZVzVrWldRaUxDSmpkWEp6YjNJaUxDSmhjbkp2ZHlJc0luUnlZVzV6YVhScGIyNGlMQ0pYWldKcmFYUlVjbUZ1YzJsMGFXOXVJaXdpVFc5NlZISmhibk5wZEdsdmJpSXNJbGRsWW10cGRGUnlZVzV6Wm05eWJTSXNJazF2ZWxSeVlXNXpabTl5YlNJc0luUnlZVzV6Wm05eWJTSXNJblJ5WVc1elptOXliVTl5YVdkcGJpSXNJbGRsWW10cGRGUnlZVzV6Wm05eWJVOXlhV2RwYmlJc0lrMXZlbFJ5WVc1elptOXliVTl5YVdkcGJpSXNJbkJ2YzJsMGFXOXVJaXdpYkdsdVpVaGxhV2RvZENJc0ltWnZiblJUYVhwbElpd2lZWEp5YjNkRGIyNTBZV2x1WlhJaUxDSmhjbkp2ZDFOMGVXeGxJaXdpWVhKeWIzZFRhV2R1SWl3aVlYSnliM2RUYVdkdVNXNXVaWElpTENKMGIzQWlMQ0pzWldaMElpd2libVZ6ZEdWa1RtOWtaU0lzSW1WNGNHRnVaR0ZpYkdVaUxDSnliMjkwVG05a1pTSXNJbTVsYzNSbFpFNXZaR1ZNWVdKbGJDSXNJbTVsYzNSbFpFNXZaR1ZKZEdWdFUzUnlhVzVuSWl3aWJtVnpkR1ZrVG05a1pVbDBaVzFVZVhCbElpd2libVZ6ZEdWa1RtOWtaVU5vYVd4a2NtVnVJaXdpY205dmRFNXZaR1ZEYUdsc1pISmxiaUlzSW1SbFptRjFiSFJDWVhObE1UWWlMQ0p6YjJ4aGNtbDZaV1FpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN1FVRkJRVHM3UVVGTFFUczdPenM3T3pzN096dEJRVVZCTEVsQlFVMUJMRkZCUVZFc1IwRkJSeXhUUVVGWVFTeFJRVUZYTEVOQlFVTkRMRXRCUVVRN1FVRkJRU3hUUVVGNVFqdEJRVU40UTBNc1NVRkJRVUVzWjBKQlFXZENMRVZCUVVWRUxFdEJRVXNzUTBGQlEwVXNUVUZFWjBJN1FVRkZlRU5ETEVsQlFVRkJMRlZCUVZVc1JVRkJSVWdzUzBGQlN5eERRVUZEU1N4TlFVWnpRanRCUVVkNFEwTXNTVUZCUVVFc1dVRkJXU3hGUVVGRlRDeExRVUZMTEVOQlFVTk5MRTFCU0c5Q08wRkJTWGhEUXl4SlFVRkJRU3hWUVVGVkxFVkJRVVZRTEV0QlFVc3NRMEZCUTAwc1RVRktjMEk3UVVGTGVFTkZMRWxCUVVGQkxGbEJRVmtzUlVGQlJWSXNTMEZCU3l4RFFVRkRVeXhOUVV4dlFqdEJRVTE0UTBNc1NVRkJRVUVzWVVGQllTeEZRVUZGVml4TFFVRkxMRU5CUVVOVExFMUJUbTFDTzBGQlQzaERSU3hKUVVGQlFTeFZRVUZWTEVWQlFVVllMRXRCUVVzc1EwRkJRMWtzVFVGUWMwSTdRVUZSZUVORExFbEJRVUZCTEdWQlFXVXNSVUZCUldJc1MwRkJTeXhEUVVGRFdTeE5RVkpwUWp0QlFWTjRRMFVzU1VGQlFVRXNZMEZCWXl4RlFVRkZaQ3hMUVVGTExFTkJRVU5aTEUxQlZHdENPMEZCVlhoRFJ5eEpRVUZCUVN4WlFVRlpMRVZCUVVWbUxFdEJRVXNzUTBGQlExa3NUVUZXYjBJN1FVRlhlRU5KTEVsQlFVRkJMRmRCUVZjc1JVRkJSV2hDTEV0QlFVc3NRMEZCUTJsQ0xFMUJXSEZDTzBGQldYaERReXhKUVVGQlFTeFhRVUZYTEVWQlFVVnNRaXhMUVVGTExFTkJRVU5wUWl4TlFWcHhRanRCUVdGNFEwVXNTVUZCUVVFc2FVSkJRV2xDTEVWQlFVVnVRaXhMUVVGTExFTkJRVU5OTEUxQlltVTdRVUZqZUVOakxFbEJRVUZCTERCQ1FVRXdRaXhGUVVGRmNFSXNTMEZCU3l4RFFVRkRjVUk3UVVGa1RTeEhRVUY2UWp0QlFVRkJMRU5CUVdwQ096dEJRWE5DUVN4SlFVRk5ReXhoUVVGaExFZEJRVWNzVTBGQmFFSkJMR0ZCUVdkQ0xFTkJRVU5ETEUxQlFVUTdRVUZCUVN4VFFVRnhRanRCUVVONlEwTXNTVUZCUVVFc1RVRkJUU3hGUVVGRlJDeE5RVUZOTEVOQlFVTnNRaXhaUVVRd1FqdEJRVVY2UTI5Q0xFbEJRVUZCTEVsQlFVa3NSVUZCUlVZc1RVRkJUU3hEUVVGRGFFSXNWVUZHTkVJN1FVRkhla050UWl4SlFVRkJRU3hOUVVGTkxFVkJRVVZJTEUxQlFVMHNRMEZCUTJZc1dVRklNRUk3UVVGSmVrTnRRaXhKUVVGQlFTeFBRVUZQTEVWQlFVVktMRTFCUVUwc1EwRkJRMklzWVVGS2VVSTdRVUZMZWtOclFpeEpRVUZCUVN4SlFVRkpMRVZCUVVWTUxFMUJRVTBzUTBGQlExb3NWVUZNTkVJN1FVRk5la05yUWl4SlFVRkJRU3hUUVVGVExFVkJRVVZPTEUxQlFVMHNRMEZCUTFZc1pVRk9kVUk3UVVGUGVrTnBRaXhKUVVGQlFTeFJRVUZSTEVWQlFVVlFMRTFCUVUwc1EwRkJRMVFzWTBGUWQwSTdRVUZSZWtOcFFpeEpRVUZCUVN4TlFVRk5MRVZCUVVWU0xFMUJRVTBzUTBGQlExSTdRVUZTTUVJc1IwRkJja0k3UVVGQlFTeERRVUYwUWpzN1FVRlhRU3hKUVVGTmFVSXNjMEpCUVhOQ0xFZEJRVWNzVTBGQmVrSkJMSE5DUVVGNVFpeERRVUZEYUVNc1MwRkJSQ3hGUVVGMVF6dEJRVU53UlN4TlFVRk5kVUlzVFVGQlRTeEhRVUZIZUVJc1VVRkJVU3hEUVVGRFF5eExRVUZFTEVOQlFYWkNPMEZCUlVFc1UwRkJUenRCUVVOTWFVTXNTVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRMHBETEUxQlFVRkJMRTFCUVUwc1JVRkJSU3hEUVVSS08wRkJSVXBETEUxQlFVRkJMRTlCUVU4c1JVRkJSU3hEUVVaTU8wRkJSMHBETEUxQlFVRkJMRk5CUVZNc1JVRkJSU3hQUVVoUU8wRkJTVXBETEUxQlFVRkJMRmxCUVZrc1JVRkJSU3hQUVVwV08wRkJTMHBETEUxQlFVRkJMRlZCUVZVc1JVRkJSU3hUUVV4U08wRkJUVXBETEUxQlFVRkJMRmRCUVZjc1JVRkJSU3hEUVU1VU8wRkJUMHBETEUxQlFVRkJMRk5CUVZNc1JVRkJSU3hOUVZCUU8wRkJVVXBETEUxQlFVRkJMR0ZCUVdFc1JVRkJSU3hOUVZKWU8wRkJVMHBETEUxQlFVRkJMR2RDUVVGblFpeEZRVUZGTEUxQlZHUTdRVUZWU2tNc1RVRkJRVUVzWlVGQlpTeEZRVUZGY0VJc1RVRkJUU3hEUVVGRGRFSTdRVUZXY0VJc1MwRkVSRHRCUVdOTU1rTXNTVUZCUVVFc1MwRkJTeXhGUVVGRkxIRkNRVUZaUXl4UlFVRmFMRVZCUVhOQ1F5eFBRVUYwUWp0QlFVRkJMRlZCUVVkRExFdEJRVWdzVVVGQlIwRXNTMEZCU0R0QlFVRkJMR0ZCUVhkRU8wRkJRemRFUVN4UlFVRkJRU3hMUVVGTExHdERRVU5CUVN4TFFVUkJPMEZCUlVoRExGVkJRVUZCTEZWQlFWVXNSVUZCUlN4UlFVWlVPMEZCUjBoRExGVkJRVUZCTEZsQlFWa3NSVUZCUlN4RFFVaFlPMEZCU1VoWUxGVkJRVUZCTEZWQlFWVXNSVUZCUlN4VFFVcFVPMEZCUzBoSkxGVkJRVUZCTEdkQ1FVRm5RaXhGUVVGRkxFMUJUR1k3UVVGTlNFUXNWVUZCUVVFc1lVRkJZU3hGUVVGRkxFMUJUbG83UVVGUFNGTXNWVUZCUVVFc1VVRkJVU3hGUVVGRkxGbEJVRkE3UVVGUlNFTXNWVUZCUVVFc1YwRkJWeXhGUVVGRlRDeFBRVUZQTEVOQlFVTk5MRTFCUVZJc1IwRkJhVUlzUTBGQmFrSXNSMEZCY1VJc1UwRkJja0lzUjBGQmFVTXNVVUZTTTBNN1FVRlRTRU1zVlVGQlFVRXNWVUZCVlN4RlFVRkZMRkZCVkZRN1FVRlZTRU1zVlVGQlFVRXNVMEZCVXl4RlFVRkZPMEZCVmxJN1FVRkVkMFFzVDBGQmVFUTdRVUZCUVN4TFFXUkdPMEZCTmtKTVF5eEpRVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRURU1zVFVGQlFVRXNUMEZCVHl4RlFVRkZMR05CUkVvN1FVRkZURU1zVFVGQlFVRXNTMEZCU3l4RlFVRkZiRU1zVFVGQlRTeERRVUZEVUR0QlFVWlVMRXRCTjBKR08wRkJhME5NTUVNc1NVRkJRVUVzVlVGQlZTeEZRVUZGTzBGQlExWkRMRTFCUVVGQkxFMUJRVTBzUlVGQlJUdEJRVVJGTEV0QmJFTlFPMEZCYzBOTVF5eEpRVUZCUVN4VFFVRlRMRVZCUVVVc01FSkJRVmxtTEZGQlFWbzdRVUZCUVN4VlFVRkhSU3hMUVVGSUxGTkJRVWRCTEV0QlFVZzdRVUZCUVN4aFFVRXdRanRCUVVOdVEwRXNVVUZCUVVFc1MwRkJTeXhyUTBGRFFVRXNTMEZFUVR0QlFVVklWU3hWUVVGQlFTeExRVUZMTEVWQlFVVnVReXhoUVVGaExFTkJRVU5ETEUxQlFVUXNRMEZCWWl4RFFVTk1jMElzVVVGRVN6dEJRVVpLTzBGQlJEaENMRTlCUVRGQ08wRkJRVUVzUzBGMFEwNDdRVUVyUTB4blFpeEpRVUZCUVN4VFFVRlRMRVZCUVVVc2JVSkJRVU5ETEU5QlFVUXNSVUZCVlVNc1VVRkJWanRCUVVGQkxHRkJRWGRDTzBGQlEycERhRUlzVVVGQlFVRXNTMEZCU3l4RlFVRkZPMEZCUTB4RExGVkJRVUZCTEZWQlFWVXNSVUZCUldVc1VVRkJVU3hIUVVGSExFTkJRVWdzUjBGQlR5eFJRVVIwUWp0QlFVVk1ReXhWUVVGQlFTeE5RVUZOTEVWQlFVVXNVMEZHU0R0QlFVZE1VQ3hWUVVGQlFTeExRVUZMTEVWQlFVVnNReXhOUVVGTkxFTkJRVU5RTzBGQlNGUTdRVUZFTUVJc1QwRkJlRUk3UVVGQlFTeExRUzlEVGp0QlFYVkVUR2xFTEVsQlFVRkJMRXRCUVVzc1JVRkJSU3h6UWtGQldYQkNMRkZCUVZvc1JVRkJjMEpyUWl4UlFVRjBRanRCUVVGQkxGVkJRVWRvUWl4TFFVRklMRk5CUVVkQkxFdEJRVWc3UVVGQlFTeGhRVUZ2UXp0QlFVTjZRMEVzVVVGQlFVRXNTMEZCU3l4clEwRkRRVUVzUzBGRVFUdEJRVVZJVkN4VlFVRkJRU3hWUVVGVkxFVkJRVVVzUTBGR1ZEdEJRVWRJTkVJc1ZVRkJRVUVzVlVGQlZTeEZRVUZGTEU5QlNGUTdRVUZKU0VNc1ZVRkJRVUVzWjBKQlFXZENMRVZCUVVVc1QwRktaanRCUVV0SVF5eFZRVUZCUVN4aFFVRmhMRVZCUVVVc1QwRk1XanRCUVUxSVF5eFZRVUZCUVN4bFFVRmxMRVZCUVVWT0xGRkJRVkVzUjBGQlJ5eG5Ra0ZCU0N4SFFVRnpRaXhsUVU0MVF6dEJRVTlJVHl4VlFVRkJRU3haUVVGWkxFVkJRVVZRTEZGQlFWRXNSMEZCUnl4blFrRkJTQ3hIUVVGelFpeGxRVkI2UXp0QlFWRklVU3hWUVVGQlFTeFRRVUZUTEVWQlFVVlNMRkZCUVZFc1IwRkJSeXhuUWtGQlNDeEhRVUZ6UWl4bFFWSjBRenRCUVZOSVV5eFZRVUZCUVN4bFFVRmxMRVZCUVVVc1UwRlVaRHRCUVZWSVF5eFZRVUZCUVN4eFFrRkJjVUlzUlVGQlJTeFRRVlp3UWp0QlFWZElReXhWUVVGQlFTeHJRa0ZCYTBJc1JVRkJSU3hUUVZocVFqdEJRVmxJUXl4VlFVRkJRU3hSUVVGUkxFVkJRVVVzVlVGYVVEdEJRV0ZJUXl4VlFVRkJRU3hWUVVGVkxFVkJRVVVzVDBGaVZEdEJRV05JUXl4VlFVRkJRU3hSUVVGUkxFVkJRVVU3UVVGa1VEdEJRVVJ2UXl4UFFVRndRenRCUVVGQkxFdEJka1JHTzBGQk1FVk1ReXhKUVVGQlFTeGpRVUZqTEVWQlFVVXNLMEpCUVZsRExGVkJRVm83UVVGQlFTeFZRVUZIYUVNc1MwRkJTQ3hUUVVGSFFTeExRVUZJTzBGQlFVRXNZVUZCTkVJN1FVRkRNVU5CTEZGQlFVRkJMRXRCUVVzc2EwTkJRMEZCTEV0QlJFRTdRVUZGU0ZNc1ZVRkJRVUVzVDBGQlR5eEZRVUZGTEdOQlJrNDdRVUZIU0ZBc1ZVRkJRVUVzV1VGQldTeEZRVUZGTEU5QlNGZzdRVUZKU0VVc1ZVRkJRVUVzVjBGQlZ5eEZRVUZGTkVJc1ZVRkJWU3hMUVVGTExGRkJRV1lzUjBGQk1FSXNTMEZCTVVJc1IwRkJhME1zUTBGS05VTTdRVUZMU0dZc1ZVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlRFdzdRVUZFY1VNc1QwRkJOVUk3UVVGQlFTeExRVEZGV0R0QlFXOUdUR2RDTEVsQlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVOVWRrSXNUVUZCUVVFc1MwRkJTeXhGUVVGRmJFTXNUVUZCVFN4RFFVRkRURHRCUVVSTUxFdEJjRVpPTzBGQmQwWk1LMFFzU1VGQlFVRXNZMEZCWXl4RlFVRkZPMEZCUTJST0xFMUJRVUZCTEZGQlFWRXNSVUZCUlN4VlFVUkpPMEZCUldSUExFMUJRVUZCTEVkQlFVY3NSVUZCUlN4RFFVWlRPMEZCUjJSRExFMUJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVaFJMRXRCZUVaWU8wRkJPRVpNUXl4SlFVRkJRU3hWUVVGVkxFVkJRVVVzTWtKQlJWWjBReXhQUVVaVkxFVkJSMVpFTEZGQlNGVXNSVUZKVm10Q0xGRkJTbFVzUlVGTFZuTkNMRlZCVEZVN1FVRkJRU3hWUVVOU2RFTXNTMEZFVVN4VFFVTlNRU3hMUVVSUk8wRkJRVUVzWVVGTlRqdEJRVU5LUVN4UlFVRkJRU3hMUVVGTExHdERRVU5CUVN4TFFVUkJPMEZCUlVnMFFpeFZRVUZCUVN4UlFVRlJMRVZCUVVVc1ZVRkdVRHRCUVVkSU0wSXNWVUZCUVVFc1ZVRkJWU3hGUVVGRkxGRkJTRlE3UVVGSlNGWXNWVUZCUVVFc1ZVRkJWU3hGUVVGRlVTeFBRVUZQTEVOQlFVTk5MRTFCUVZJc1IwRkJhVUlzUTBGQmFrSXNSMEZCY1VJc1UwRkJja0lzUjBGQmFVTXNRMEZLTVVNN1FVRkxTRVFzVlVGQlFVRXNWMEZCVnl4RlFVRkZMRU5CUVVOclF5eFZRVUZFTEVkQlFXTXNVMEZCWkN4SFFVRXdRanRCUVV4d1F6dEJRVVJFTEU5QlRrMDdRVUZCUVN4TFFUbEdVRHRCUVRoSFRFTXNTVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJRMUp1UkN4TlFVRkJRU3hQUVVGUExFVkJRVVVzUTBGRVJEdEJRVVZTZDBJc1RVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlJrRXNTMEU1UjB3N1FVRnRTRXcwUWl4SlFVRkJRU3hsUVVGbExFVkJRVVVzWjBOQlFWbDZReXhQUVVGYUxFVkJRWEZDUkN4UlFVRnlRaXhGUVVFclFtdENMRkZCUVM5Q0xFVkJRWGxEYzBJc1ZVRkJla003UVVGQlFTeFZRVUZIZEVNc1MwRkJTQ3hUUVVGSFFTeExRVUZJTzBGQlFVRXNZVUZCZVVRN1FVRkRlRVZCTEZGQlFVRkJMRXRCUVVzc2EwTkJRMEZCTEV0QlJFRTdRVUZGU0Zrc1ZVRkJRVUVzVFVGQlRTeEZRVUZGTEVOQlJrdzdRVUZIU0hoQ0xGVkJRVUZCTEU5QlFVOHNSVUZCUlN4RFFVaE9PMEZCU1VoUExGVkJRVUZCTEdkQ1FVRm5RaXhGUVVGRk1rTXNWVUZCVlN4SFFVRkhMRk5CUVVnc1IwRkJaU3hOUVVwNFF6dEJRVXRJTlVNc1ZVRkJRVUVzWVVGQllTeEZRVUZGTkVNc1ZVRkJWU3hIUVVGSExGTkJRVWdzUjBGQlpTeE5RVXh5UXp0QlFVMUlja0lzVlVGQlFVRXNUVUZCVFN4RlFVRkZjVUlzVlVGQlZTeEhRVUZITEZOQlFVZ3NSMEZCWlR0QlFVNDVRanRCUVVSdFJTeFBRVUY2UkR0QlFVRkJMRXRCYmtoYU8wRkJPRWhNUnl4SlFVRkJRU3h2UWtGQmIwSXNSVUZCUlN4eFEwRkJXVEZETEU5QlFWb3NSVUZCY1VKRUxGRkJRWEpDTEVWQlFTdENhMElzVVVGQkwwSTdRVUZCUVN4VlFVRkhhRUlzUzBGQlNDeFRRVUZIUVN4TFFVRklPMEZCUVVFc1lVRkJOa003UVVGRGFrVkJMRkZCUVVGQkxFdEJRVXNzYTBOQlEwRkJMRXRCUkVFN1FVRkZTRWtzVlVGQlFVRXNWMEZCVnl4RlFVRkZMRTlCUmxZN1FVRkhTR0VzVlVGQlFVRXNUVUZCVFN4RlFVRkZMRk5CU0V3N1FVRkpTRkFzVlVGQlFVRXNTMEZCU3l4RlFVRkZUU3hSUVVGUkxFZEJRMWg0UXl4TlFVRk5MRU5CUVVOSUxEQkNRVVJKTEVkQlJWaEhMRTFCUVUwc1EwRkJRMG83UVVGT1VqdEJRVVEwUkN4UFFVRTNRenRCUVVGQkxFdEJPVWhxUWp0QlFYbEpUSE5GTEVsQlFVRkJMR3RDUVVGclFpeEZRVUZGTzBGQlEyeENia1FzVFVGQlFVRXNWVUZCVlN4RlFVRkZMRTlCUkUwN1FVRkZiRUpETEUxQlFVRkJMRmRCUVZjc1JVRkJSVHRCUVVaTExFdEJla2xtTzBGQk9FbE1iVVFzU1VGQlFVRXNhMEpCUVd0Q0xFVkJRVVVzYlVOQlFWazNReXhSUVVGYUxFVkJRWE5DYTBJc1VVRkJkRUk3UVVGQlFTeFZRVUZIYUVJc1MwRkJTQ3hUUVVGSFFTeExRVUZJTzBGQlFVRXNZVUZCYjBNN1FVRkRkRVJCTEZGQlFVRkJMRXRCUVVzc2EwTkJRMEZCTEV0QlJFRTdRVUZGU0Zvc1ZVRkJRVUVzVDBGQlR5eEZRVUZGTEVOQlJrNDdRVUZIU0hkQ0xGVkJRVUZCTEUxQlFVMHNSVUZCUlN4RFFVaE1PMEZCU1VodVFpeFZRVUZCUVN4VFFVRlRMRVZCUVVVc1RVRktVanRCUVV0SVowSXNWVUZCUVVFc1QwRkJUeXhGUVVGRlR5eFJRVUZSTEVkQlFVY3NUMEZCU0N4SFFVRmhPMEZCVEROQ08wRkJSR2xFTEU5QlFYQkRPMEZCUVVFc1MwRTVTV1k3UVVGM1NrdzBRaXhKUVVGQlFTeG5Ra0ZCWjBJc1JVRkJSVHRCUVVOb1FuaEVMRTFCUVVGQkxFOUJRVThzUlVGQlJTeERRVVJQTzBGQlJXaENkMElzVFVGQlFVRXNUVUZCVFN4RlFVRkZMRU5CUmxFN1FVRkhhRUp1UWl4TlFVRkJRU3hUUVVGVExFVkJRVVU3UVVGSVN6dEJRWGhLWWl4SFFVRlFPMEZCT0VwRUxFTkJha3RFT3p0bFFXMUxaU3gxUTBGQlkxSXNjMEpCUVdRc1JVRkJjME03UVVGRGJrUTBSQ3hGUVVGQlFTeGhRVUZoTEVWQlFVVkRPMEZCUkc5RExFTkJRWFJETEVNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2UxeHVJQ0JDWVhObE1UWlVhR1Z0WlN4Y2JpQWdZM0psWVhSbFUzUjViR2x1Wnl4Y2JpQWdVM1I1YkdsdVowTnZibVpwWnl4Y2JuMGdabkp2YlNBbmNtVmhZM1F0WW1GelpURTJMWE4wZVd4cGJtY25PMXh1YVcxd2IzSjBJSE52YkdGeWFYcGxaQ0JtY205dElDY3VMM1JvWlcxbGN5OXpiMnhoY21sNlpXUW5PMXh1WEc1amIyNXpkQ0JqYjJ4dmNrMWhjQ0E5SUNoMGFHVnRaVG9nUW1GelpURTJWR2hsYldVcElEMCtJQ2g3WEc0Z0lFSkJRMHRIVWs5VlRrUmZRMDlNVDFJNklIUm9aVzFsTG1KaGMyVXdNQ3hjYmlBZ1ZFVllWRjlEVDB4UFVqb2dkR2hsYldVdVltRnpaVEEzTEZ4dUlDQlRWRkpKVGtkZlEwOU1UMUk2SUhSb1pXMWxMbUpoYzJVd1FpeGNiaUFnUkVGVVJWOURUMHhQVWpvZ2RHaGxiV1V1WW1GelpUQkNMRnh1SUNCT1ZVMUNSVkpmUTA5TVQxSTZJSFJvWlcxbExtSmhjMlV3T1N4Y2JpQWdRazlQVEVWQlRsOURUMHhQVWpvZ2RHaGxiV1V1WW1GelpUQTVMRnh1SUNCT1ZVeE1YME5QVEU5U09pQjBhR1Z0WlM1aVlYTmxNRGdzWEc0Z0lGVk9SRVZHU1U1RlJGOURUMHhQVWpvZ2RHaGxiV1V1WW1GelpUQTRMRnh1SUNCR1ZVNURWRWxQVGw5RFQweFBVam9nZEdobGJXVXVZbUZ6WlRBNExGeHVJQ0JUV1UxQ1QweGZRMDlNVDFJNklIUm9aVzFsTG1KaGMyVXdPQ3hjYmlBZ1RFRkNSVXhmUTA5TVQxSTZJSFJvWlcxbExtSmhjMlV3UkN4Y2JpQWdRVkpTVDFkZlEwOU1UMUk2SUhSb1pXMWxMbUpoYzJVd1JDeGNiaUFnU1ZSRlRWOVRWRkpKVGtkZlEwOU1UMUk2SUhSb1pXMWxMbUpoYzJVd1FpeGNiaUFnU1ZSRlRWOVRWRkpKVGtkZlJWaFFRVTVFUlVSZlEwOU1UMUk2SUhSb1pXMWxMbUpoYzJVd015eGNibjBwTzF4dVhHNTBlWEJsSUVOdmJHOXlJRDBnYTJWNWIyWWdVbVYwZFhKdVZIbHdaVHgwZVhCbGIyWWdZMjlzYjNKTllYQStPMXh1ZEhsd1pTQkRiMnh2Y25NZ1BTQjdYRzRnSUZ0amIyeHZjaUJwYmlCRGIyeHZjbDA2SUhOMGNtbHVaenRjYm4wN1hHNWNibU52Ym5OMElIWmhiSFZsUTI5c2IzSk5ZWEFnUFNBb1kyOXNiM0p6T2lCRGIyeHZjbk1wSUQwK0lDaDdYRzRnSUZOMGNtbHVaem9nWTI5c2IzSnpMbE5VVWtsT1IxOURUMHhQVWl4Y2JpQWdSR0YwWlRvZ1kyOXNiM0p6TGtSQlZFVmZRMDlNVDFJc1hHNGdJRTUxYldKbGNqb2dZMjlzYjNKekxrNVZUVUpGVWw5RFQweFBVaXhjYmlBZ1FtOXZiR1ZoYmpvZ1kyOXNiM0p6TGtKUFQweEZRVTVmUTA5TVQxSXNYRzRnSUU1MWJHdzZJR052Ykc5eWN5NU9WVXhNWDBOUFRFOVNMRnh1SUNCVmJtUmxabWx1WldRNklHTnZiRzl5Y3k1VlRrUkZSa2xPUlVSZlEwOU1UMUlzWEc0Z0lFWjFibU4wYVc5dU9pQmpiMnh2Y25NdVJsVk9RMVJKVDA1ZlEwOU1UMUlzWEc0Z0lGTjViV0p2YkRvZ1kyOXNiM0p6TGxOWlRVSlBURjlEVDB4UFVpeGNibjBwTzF4dVhHNWpiMjV6ZENCblpYUkVaV1poZFd4MFZHaGxiV1ZUZEhsc2FXNW5JRDBnS0hSb1pXMWxPaUJDWVhObE1UWlVhR1Z0WlNrNklGTjBlV3hwYm1kRGIyNW1hV2NnUFQ0Z2UxeHVJQ0JqYjI1emRDQmpiMnh2Y25NZ1BTQmpiMnh2Y2sxaGNDaDBhR1Z0WlNrN1hHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQjBjbVZsT2lCN1hHNGdJQ0FnSUNCaWIzSmtaWEk2SURBc1hHNGdJQ0FnSUNCd1lXUmthVzVuT2lBd0xGeHVJQ0FnSUNBZ2JXRnlaMmx1Vkc5d09pQW5NQzQxWlcwbkxGeHVJQ0FnSUNBZ2JXRnlaMmx1UW05MGRHOXRPaUFuTUM0MVpXMG5MRnh1SUNBZ0lDQWdiV0Z5WjJsdVRHVm1kRG9nSnpBdU1USTFaVzBuTEZ4dUlDQWdJQ0FnYldGeVoybHVVbWxuYUhRNklEQXNYRzRnSUNBZ0lDQnNhWE4wVTNSNWJHVTZJQ2R1YjI1bEp5eGNiaUFnSUNBZ0lFMXZlbFZ6WlhKVFpXeGxZM1E2SUNkdWIyNWxKeXhjYmlBZ0lDQWdJRmRsWW10cGRGVnpaWEpUWld4bFkzUTZJQ2R1YjI1bEp5eGNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUkRiMnh2Y2pvZ1kyOXNiM0p6TGtKQlEwdEhVazlWVGtSZlEwOU1UMUlzWEc0Z0lDQWdmU3hjYmx4dUlDQWdJSFpoYkhWbE9pQW9leUJ6ZEhsc1pTQjlMQ0J1YjJSbFZIbHdaU3dnYTJWNVVHRjBhRG9nS0hOMGNtbHVaeUI4SUc1MWJXSmxjaWxiWFNrZ1BUNGdLSHRjYmlBZ0lDQWdJSE4wZVd4bE9pQjdYRzRnSUNBZ0lDQWdJQzR1TG5OMGVXeGxMRnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5WRzl3T2lBbk1DNHlOV1Z0Snl4Y2JpQWdJQ0FnSUNBZ2NHRmtaR2x1WjFKcFoyaDBPaUF3TEZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVNWldaME9pQW5NQzQ0TnpWbGJTY3NYRzRnSUNBZ0lDQWdJRmRsWW10cGRGVnpaWEpUWld4bFkzUTZJQ2QwWlhoMEp5eGNiaUFnSUNBZ0lDQWdUVzk2VlhObGNsTmxiR1ZqZERvZ0ozUmxlSFFuTEZ4dUlDQWdJQ0FnSUNCM2IzSmtWM0poY0RvZ0oySnlaV0ZyTFhkdmNtUW5MRnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5UR1ZtZERvZ2EyVjVVR0YwYUM1c1pXNW5kR2dnUGlBeElEOGdKekl1TVRJMVpXMG5JRG9nSnpFdU1qVmxiU2NzWEc0Z0lDQWdJQ0FnSUhSbGVIUkpibVJsYm5RNklDY3RNQzQxWlcwbkxGeHVJQ0FnSUNBZ0lDQjNiM0prUW5KbFlXczZJQ2RpY21WaGF5MWhiR3duTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5S1N4Y2JseHVJQ0FnSUd4aFltVnNPaUI3WEc0Z0lDQWdJQ0JrYVhOd2JHRjVPaUFuYVc1c2FXNWxMV0pzYjJOckp5eGNiaUFnSUNBZ0lHTnZiRzl5T2lCamIyeHZjbk11VEVGQ1JVeGZRMDlNVDFJc1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhaaGJIVmxUR0ZpWld3NklIdGNiaUFnSUNBZ0lHMWhjbWRwYmpvZ0p6QWdNQzQxWlcwZ01DQXdKeXhjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdkbUZzZFdWVVpYaDBPaUFvZXlCemRIbHNaU0I5TENCdWIyUmxWSGx3WlNrZ1BUNGdLSHRjYmlBZ0lDQWdJSE4wZVd4bE9pQjdYRzRnSUNBZ0lDQWdJQzR1TG5OMGVXeGxMRnh1SUNBZ0lDQWdJQ0JqYjJ4dmNqb2dkbUZzZFdWRGIyeHZjazFoY0NoamIyeHZjbk1wVzF4dUlDQWdJQ0FnSUNBZ0lHNXZaR1ZVZVhCbElHRnpJR3RsZVc5bUlGSmxkSFZ5YmxSNWNHVThkSGx3Wlc5bUlIWmhiSFZsUTI5c2IzSk5ZWEErWEc0Z0lDQWdJQ0FnSUYwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcExGeHVYRzRnSUNBZ2FYUmxiVkpoYm1kbE9pQW9jM1I1YkdsdVp5d2daWGh3WVc1a1pXUXBJRDArSUNoN1hHNGdJQ0FnSUNCemRIbHNaVG9nZTF4dUlDQWdJQ0FnSUNCd1lXUmthVzVuVkc5d09pQmxlSEJoYm1SbFpDQS9JREFnT2lBbk1DNHlOV1Z0Snl4Y2JpQWdJQ0FnSUNBZ1kzVnljMjl5T2lBbmNHOXBiblJsY2ljc1hHNGdJQ0FnSUNBZ0lHTnZiRzl5T2lCamIyeHZjbk11VEVGQ1JVeGZRMDlNVDFJc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcExGeHVYRzRnSUNBZ1lYSnliM2M2SUNoN0lITjBlV3hsSUgwc0lHNXZaR1ZVZVhCbExDQmxlSEJoYm1SbFpDa2dQVDRnS0h0Y2JpQWdJQ0FnSUhOMGVXeGxPaUI3WEc0Z0lDQWdJQ0FnSUM0dUxuTjBlV3hsTEZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVNWldaME9pQXdMRnh1SUNBZ0lDQWdJQ0IwY21GdWMybDBhVzl1T2lBbk1UVXdiWE1uTEZ4dUlDQWdJQ0FnSUNCWFpXSnJhWFJVY21GdWMybDBhVzl1T2lBbk1UVXdiWE1uTEZ4dUlDQWdJQ0FnSUNCTmIzcFVjbUZ1YzJsMGFXOXVPaUFuTVRVd2JYTW5MRnh1SUNBZ0lDQWdJQ0JYWldKcmFYUlVjbUZ1YzJadmNtMDZJR1Y0Y0dGdVpHVmtJRDhnSjNKdmRHRjBaVm9vT1RCa1pXY3BKeUE2SUNkeWIzUmhkR1ZhS0RCa1pXY3BKeXhjYmlBZ0lDQWdJQ0FnVFc5NlZISmhibk5tYjNKdE9pQmxlSEJoYm1SbFpDQS9JQ2R5YjNSaGRHVmFLRGt3WkdWbktTY2dPaUFuY205MFlYUmxXaWd3WkdWbktTY3NYRzRnSUNBZ0lDQWdJSFJ5WVc1elptOXliVG9nWlhod1lXNWtaV1FnUHlBbmNtOTBZWFJsV2lnNU1HUmxaeWtuSURvZ0ozSnZkR0YwWlZvb01HUmxaeWtuTEZ4dUlDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xUGNtbG5hVzQ2SUNjME5TVWdOVEFsSnl4Y2JpQWdJQ0FnSUNBZ1YyVmlhMmwwVkhKaGJuTm1iM0p0VDNKcFoybHVPaUFuTkRVbElEVXdKU2NzWEc0Z0lDQWdJQ0FnSUUxdmVsUnlZVzV6Wm05eWJVOXlhV2RwYmpvZ0p6UTFKU0ExTUNVbkxGeHVJQ0FnSUNBZ0lDQndiM05wZEdsdmJqb2dKM0psYkdGMGFYWmxKeXhjYmlBZ0lDQWdJQ0FnYkdsdVpVaGxhV2RvZERvZ0p6RXVNV1Z0Snl4Y2JpQWdJQ0FnSUNBZ1ptOXVkRk5wZW1VNklDY3dMamMxWlcwbkxGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOUtTeGNibHh1SUNBZ0lHRnljbTkzUTI5dWRHRnBibVZ5T2lBb2V5QnpkSGxzWlNCOUxDQmhjbkp2ZDFOMGVXeGxLU0E5UGlBb2UxeHVJQ0FnSUNBZ2MzUjViR1U2SUh0Y2JpQWdJQ0FnSUNBZ0xpNHVjM1I1YkdVc1hHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrNklDZHBibXhwYm1VdFlteHZZMnNuTEZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuVW1sbmFIUTZJQ2N3TGpWbGJTY3NYRzRnSUNBZ0lDQWdJSEJoWkdScGJtZE1aV1owT2lCaGNuSnZkMU4wZVd4bElEMDlQU0FuWkc5MVlteGxKeUEvSUNjeFpXMG5JRG9nTUN4Y2JpQWdJQ0FnSUNBZ1kzVnljMjl5T2lBbmNHOXBiblJsY2ljc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcExGeHVYRzRnSUNBZ1lYSnliM2RUYVdkdU9pQjdYRzRnSUNBZ0lDQmpiMnh2Y2pvZ1kyOXNiM0p6TGtGU1VrOVhYME5QVEU5U0xGeHVJQ0FnSUgwc1hHNWNiaUFnSUNCaGNuSnZkMU5wWjI1SmJtNWxjam9nZTF4dUlDQWdJQ0FnY0c5emFYUnBiMjQ2SUNkaFluTnZiSFYwWlNjc1hHNGdJQ0FnSUNCMGIzQTZJREFzWEc0Z0lDQWdJQ0JzWldaME9pQW5MVEF1TkdWdEp5eGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2JtVnpkR1ZrVG05a1pUb2dLRnh1SUNBZ0lDQWdleUJ6ZEhsc1pTQjlMRnh1SUNBZ0lDQWdhMlY1VUdGMGFEb2dLSE4wY21sdVp5QjhJRzUxYldKbGNpbGJYU3hjYmlBZ0lDQWdJRzV2WkdWVWVYQmxMRnh1SUNBZ0lDQWdaWGh3WVc1a1pXUXNYRzRnSUNBZ0lDQmxlSEJoYm1SaFlteGxYRzRnSUNBZ0tTQTlQaUFvZTF4dUlDQWdJQ0FnYzNSNWJHVTZJSHRjYmlBZ0lDQWdJQ0FnTGk0dWMzUjViR1VzWEc0Z0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lBbmNtVnNZWFJwZG1VbkxGeHVJQ0FnSUNBZ0lDQndZV1JrYVc1blZHOXdPaUFuTUM0eU5XVnRKeXhjYmlBZ0lDQWdJQ0FnYldGeVoybHVUR1ZtZERvZ2EyVjVVR0YwYUM1c1pXNW5kR2dnUGlBeElEOGdKekF1T0RjMVpXMG5JRG9nTUN4Y2JpQWdJQ0FnSUNBZ2NHRmtaR2x1WjB4bFpuUTZJQ0ZsZUhCaGJtUmhZbXhsSUQ4Z0p6RXVNVEkxWlcwbklEb2dNQ3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmU2tzWEc1Y2JpQWdJQ0J5YjI5MFRtOWtaVG9nZTF4dUlDQWdJQ0FnY0dGa1pHbHVaem9nTUN4Y2JpQWdJQ0FnSUcxaGNtZHBiam9nTUN4Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYm1WemRHVmtUbTlrWlV4aFltVnNPaUFvZXlCemRIbHNaU0I5TENCclpYbFFZWFJvTENCdWIyUmxWSGx3WlN3Z1pYaHdZVzVrWldRc0lHVjRjR0Z1WkdGaWJHVXBJRDArSUNoN1hHNGdJQ0FnSUNCemRIbHNaVG9nZTF4dUlDQWdJQ0FnSUNBdUxpNXpkSGxzWlN4Y2JpQWdJQ0FnSUNBZ2JXRnlaMmx1T2lBd0xGeHVJQ0FnSUNBZ0lDQndZV1JrYVc1bk9pQXdMRnh1SUNBZ0lDQWdJQ0JYWldKcmFYUlZjMlZ5VTJWc1pXTjBPaUJsZUhCaGJtUmhZbXhsSUQ4Z0oybHVhR1Z5YVhRbklEb2dKM1JsZUhRbkxGeHVJQ0FnSUNBZ0lDQk5iM3BWYzJWeVUyVnNaV04wT2lCbGVIQmhibVJoWW14bElEOGdKMmx1YUdWeWFYUW5JRG9nSjNSbGVIUW5MRnh1SUNBZ0lDQWdJQ0JqZFhKemIzSTZJR1Y0Y0dGdVpHRmliR1VnUHlBbmNHOXBiblJsY2ljZ09pQW5aR1ZtWVhWc2RDY3NYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBMRnh1WEc0Z0lDQWdibVZ6ZEdWa1RtOWtaVWwwWlcxVGRISnBibWM2SUNoN0lITjBlV3hsSUgwc0lHdGxlVkJoZEdnc0lHNXZaR1ZVZVhCbExDQmxlSEJoYm1SbFpDa2dQVDRnS0h0Y2JpQWdJQ0FnSUhOMGVXeGxPaUI3WEc0Z0lDQWdJQ0FnSUM0dUxuTjBlV3hsTEZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuVEdWbWREb2dKekF1TldWdEp5eGNiaUFnSUNBZ0lDQWdZM1Z5YzI5eU9pQW5aR1ZtWVhWc2RDY3NYRzRnSUNBZ0lDQWdJR052Ykc5eU9pQmxlSEJoYm1SbFpGeHVJQ0FnSUNBZ0lDQWdJRDhnWTI5c2IzSnpMa2xVUlUxZlUxUlNTVTVIWDBWWVVFRk9SRVZFWDBOUFRFOVNYRzRnSUNBZ0lDQWdJQ0FnT2lCamIyeHZjbk11U1ZSRlRWOVRWRkpKVGtkZlEwOU1UMUlzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJSDBwTEZ4dVhHNGdJQ0FnYm1WemRHVmtUbTlrWlVsMFpXMVVlWEJsT2lCN1hHNGdJQ0FnSUNCdFlYSm5hVzVNWldaME9pQW5NQzR6WlcwbkxGeHVJQ0FnSUNBZ2JXRnlaMmx1VW1sbmFIUTZJQ2N3TGpObGJTY3NYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHNWxjM1JsWkU1dlpHVkRhR2xzWkhKbGJqb2dLSHNnYzNSNWJHVWdmU3dnYm05a1pWUjVjR1VzSUdWNGNHRnVaR1ZrS1NBOVBpQW9lMXh1SUNBZ0lDQWdjM1I1YkdVNklIdGNiaUFnSUNBZ0lDQWdMaTR1YzNSNWJHVXNYRzRnSUNBZ0lDQWdJSEJoWkdScGJtYzZJREFzWEc0Z0lDQWdJQ0FnSUcxaGNtZHBiam9nTUN4Y2JpQWdJQ0FnSUNBZ2JHbHpkRk4wZVd4bE9pQW5ibTl1WlNjc1hHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrNklHVjRjR0Z1WkdWa0lEOGdKMkpzYjJOckp5QTZJQ2R1YjI1bEp5eGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTa3NYRzVjYmlBZ0lDQnliMjkwVG05a1pVTm9hV3hrY21WdU9pQjdYRzRnSUNBZ0lDQndZV1JrYVc1bk9pQXdMRnh1SUNBZ0lDQWdiV0Z5WjJsdU9pQXdMRnh1SUNBZ0lDQWdiR2x6ZEZOMGVXeGxPaUFuYm05dVpTY3NYRzRnSUNBZ2ZTeGNiaUFnZlR0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR055WldGMFpWTjBlV3hwYm1jb1oyVjBSR1ZtWVhWc2RGUm9aVzFsVTNSNWJHbHVaeXdnZTF4dUlDQmtaV1poZFd4MFFtRnpaVEUyT2lCemIyeGhjbWw2WldRc1hHNTlLVHRjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0Q29sbGVjdGlvbkVudHJpZXM7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdDsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIGdldExlbmd0aCh0eXBlLCBjb2xsZWN0aW9uKSB7XG4gIGlmICh0eXBlID09PSAnT2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBJbmZpbml0eTtcbn1cblxuZnVuY3Rpb24gaXNJdGVyYWJsZU1hcChjb2xsZWN0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgY29sbGVjdGlvbi5zZXQgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGdldEVudHJpZXModHlwZSwgY29sbGVjdGlvbiwgc29ydE9iamVjdEtleXMpIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gIHZhciB0byA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogSW5maW5pdHk7XG4gIHZhciByZXM7XG5cbiAgaWYgKHR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb2xsZWN0aW9uKTtcblxuICAgIGlmIChzb3J0T2JqZWN0S2V5cykge1xuICAgICAga2V5cy5zb3J0KHNvcnRPYmplY3RLZXlzID09PSB0cnVlID8gdW5kZWZpbmVkIDogc29ydE9iamVjdEtleXMpO1xuICAgIH1cblxuICAgIGtleXMgPSBrZXlzLnNsaWNlKGZyb20sIHRvICsgMSk7XG4gICAgcmVzID0ge1xuICAgICAgZW50cmllczoga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiBjb2xsZWN0aW9uW2tleV1cbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnQXJyYXknKSB7XG4gICAgcmVzID0ge1xuICAgICAgZW50cmllczogY29sbGVjdGlvbi5zbGljZShmcm9tLCB0byArIDEpLm1hcChmdW5jdGlvbiAodmFsLCBpZHgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBrZXk6IGlkeCArIGZyb20sXG4gICAgICAgICAgdmFsdWU6IHZhbFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBpZHggPSAwO1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgdmFyIGRvbmUgPSB0cnVlO1xuICAgIHZhciBpc01hcCA9IGlzSXRlcmFibGVNYXAoY29sbGVjdGlvbik7XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY29sbGVjdGlvbiksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKGlkeCA+IHRvKSB7XG4gICAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyb20gPD0gaWR4KSB7XG4gICAgICAgICAgaWYgKGlzTWFwICYmIEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbVswXSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGl0ZW1bMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5OiBpdGVtWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtWzFdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW50cmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiW2VudHJ5IFwiLmNvbmNhdChpZHgsIFwiXVwiKSxcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgJ1trZXldJzogaXRlbVswXSxcbiAgICAgICAgICAgICAgICAgICdbdmFsdWVdJzogaXRlbVsxXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XG4gICAgICAgICAgICAgIGtleTogaWR4LFxuICAgICAgICAgICAgICB2YWx1ZTogaXRlbVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWR4Kys7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJlcyA9IHtcbiAgICAgIGhhc01vcmU6ICFkb25lLFxuICAgICAgZW50cmllczogZW50cmllc1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5nZXMoZnJvbSwgdG8sIGxpbWl0KSB7XG4gIHZhciByYW5nZXMgPSBbXTtcblxuICB3aGlsZSAodG8gLSBmcm9tID4gbGltaXQgKiBsaW1pdCkge1xuICAgIGxpbWl0ID0gbGltaXQgKiBsaW1pdDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IGxpbWl0KSB7XG4gICAgcmFuZ2VzLnB1c2goe1xuICAgICAgZnJvbTogaSxcbiAgICAgIHRvOiBNYXRoLm1pbih0bywgaSArIGxpbWl0IC0gMSlcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGdldENvbGxlY3Rpb25FbnRyaWVzKHR5cGUsIGNvbGxlY3Rpb24sIHNvcnRPYmplY3RLZXlzLCBsaW1pdCkge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMDtcbiAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBJbmZpbml0eTtcbiAgdmFyIGdldEVudHJpZXNCb3VuZCA9IGdldEVudHJpZXMuYmluZChudWxsLCB0eXBlLCBjb2xsZWN0aW9uLCBzb3J0T2JqZWN0S2V5cyk7XG5cbiAgaWYgKCFsaW1pdCkge1xuICAgIHJldHVybiBnZXRFbnRyaWVzQm91bmQoKS5lbnRyaWVzO1xuICB9XG5cbiAgdmFyIGlzU3Vic2V0ID0gdG8gPCBJbmZpbml0eTtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRvIC0gZnJvbSwgZ2V0TGVuZ3RoKHR5cGUsIGNvbGxlY3Rpb24pKTtcblxuICBpZiAodHlwZSAhPT0gJ0l0ZXJhYmxlJykge1xuICAgIGlmIChsZW5ndGggPD0gbGltaXQgfHwgbGltaXQgPCA3KSB7XG4gICAgICByZXR1cm4gZ2V0RW50cmllc0JvdW5kKGZyb20sIHRvKS5lbnRyaWVzO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAobGVuZ3RoIDw9IGxpbWl0ICYmICFpc1N1YnNldCkge1xuICAgICAgcmV0dXJuIGdldEVudHJpZXNCb3VuZChmcm9tLCB0bykuZW50cmllcztcbiAgICB9XG4gIH1cblxuICB2YXIgbGltaXRlZEVudHJpZXM7XG5cbiAgaWYgKHR5cGUgPT09ICdJdGVyYWJsZScpIHtcbiAgICB2YXIgX2dldEVudHJpZXNCb3VuZCA9IGdldEVudHJpZXNCb3VuZChmcm9tLCBmcm9tICsgbGltaXQgLSAxKSxcbiAgICAgICAgaGFzTW9yZSA9IF9nZXRFbnRyaWVzQm91bmQuaGFzTW9yZSxcbiAgICAgICAgZW50cmllcyA9IF9nZXRFbnRyaWVzQm91bmQuZW50cmllcztcblxuICAgIGxpbWl0ZWRFbnRyaWVzID0gaGFzTW9yZSA/IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZW50cmllcyksIF90b0NvbnN1bWFibGVBcnJheShnZXRSYW5nZXMoZnJvbSArIGxpbWl0LCBmcm9tICsgMiAqIGxpbWl0IC0gMSwgbGltaXQpKSkgOiBlbnRyaWVzO1xuICB9IGVsc2Uge1xuICAgIGxpbWl0ZWRFbnRyaWVzID0gaXNTdWJzZXQgPyBnZXRSYW5nZXMoZnJvbSwgdG8sIGxpbWl0KSA6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZ2V0RW50cmllc0JvdW5kKDAsIGxpbWl0IC0gNSkuZW50cmllcyksIF90b0NvbnN1bWFibGVBcnJheShnZXRSYW5nZXMobGltaXQgLSA0LCBsZW5ndGggLSA1LCBsaW1pdCkpLCBfdG9Db25zdW1hYmxlQXJyYXkoZ2V0RW50cmllc0JvdW5kKGxlbmd0aCAtIDQsIGxlbmd0aCAtIDEpLmVudHJpZXMpKTtcbiAgfVxuXG4gIHJldHVybiBsaW1pdGVkRW50cmllcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5blpYUkRiMnhzWldOMGFXOXVSVzUwY21sbGN5NTBjeUpkTENKdVlXMWxjeUk2V3lKblpYUk1aVzVuZEdnaUxDSjBlWEJsSWl3aVkyOXNiR1ZqZEdsdmJpSXNJazlpYW1WamRDSXNJbXRsZVhNaUxDSnNaVzVuZEdnaUxDSkpibVpwYm1sMGVTSXNJbWx6U1hSbGNtRmliR1ZOWVhBaUxDSnpaWFFpTENKblpYUkZiblJ5YVdWeklpd2ljMjl5ZEU5aWFtVmpkRXRsZVhNaUxDSm1jbTl0SWl3aWRHOGlMQ0p5WlhNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpJaXdpYzI5eWRDSXNJblZ1WkdWbWFXNWxaQ0lzSW5Oc2FXTmxJaXdpWlc1MGNtbGxjeUlzSW0xaGNDSXNJbXRsZVNJc0luWmhiSFZsSWl3aWRtRnNJaXdpYVdSNElpd2laRzl1WlNJc0ltbHpUV0Z3SWl3aWFYUmxiU0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW5CMWMyZ2lMQ0pvWVhOTmIzSmxJaXdpWjJWMFVtRnVaMlZ6SWl3aWJHbHRhWFFpTENKeVlXNW5aWE1pTENKcElpd2lUV0YwYUNJc0ltMXBiaUlzSW1kbGRFTnZiR3hsWTNScGIyNUZiblJ5YVdWeklpd2laMlYwUlc1MGNtbGxjMEp2ZFc1a0lpd2lZbWx1WkNJc0ltbHpVM1ZpYzJWMElpd2liR2x0YVhSbFpFVnVkSEpwWlhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJMRk5CUVZOQkxGTkJRVlFzUTBGQmJVSkRMRWxCUVc1Q0xFVkJRV2xEUXl4VlFVRnFReXhGUVVGclJEdEJRVU5vUkN4TlFVRkpSQ3hKUVVGSkxFdEJRVXNzVVVGQllpeEZRVUYxUWp0QlFVTnlRaXhYUVVGUFJTeE5RVUZOTEVOQlFVTkRMRWxCUVZBc1EwRkJXVVlzVlVGQldpeEZRVUYzUWtjc1RVRkJMMEk3UVVGRFJDeEhRVVpFTEUxQlJVOHNTVUZCU1Vvc1NVRkJTU3hMUVVGTExFOUJRV0lzUlVGQmMwSTdRVUZETTBJc1YwRkJVVU1zVlVGQlJDeERRVUV3UWtjc1RVRkJha003UVVGRFJEczdRVUZGUkN4VFFVRlBReXhSUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTBNc1lVRkJWQ3hEUVVGMVFrd3NWVUZCZGtJc1JVRkJkME03UVVGRGRFTXNVMEZCVHl4UFFVRlJRU3hWUVVGRUxFTkJRVGhDVFN4SFFVRnlReXhMUVVFMlF5eFZRVUZ3UkR0QlFVTkVPenRCUVVWRUxGTkJRVk5ETEZWQlFWUXNRMEZEUlZJc1NVRkVSaXhGUVVWRlF5eFZRVVpHTEVWQlIwVlJMR05CU0VZc1JVRk5NRVU3UVVGQlFTeE5RVVo0UlVNc1NVRkZkMFVzZFVWQlJtcEZMRU5CUldsRk8wRkJRVUVzVFVGRWVFVkRMRVZCUTNkRkxIVkZRVVJ1UlU0c1VVRkRiVVU3UVVGRGVFVXNUVUZCU1U4c1IwRkJTanM3UVVGRlFTeE5RVUZKV2l4SlFVRkpMRXRCUVVzc1VVRkJZaXhGUVVGMVFqdEJRVU55UWl4UlFVRkpSeXhKUVVGSkxFZEJRVWRFTEUxQlFVMHNRMEZCUTFjc2JVSkJRVkFzUTBGQk1rSmFMRlZCUVROQ0xFTkJRVmc3TzBGQlJVRXNVVUZCU1ZFc1kwRkJTaXhGUVVGdlFqdEJRVU5zUWs0c1RVRkJRVUVzU1VGQlNTeERRVUZEVnl4SlFVRk1MRU5CUVZWTUxHTkJRV01zUzBGQlN5eEpRVUZ1UWl4SFFVRXdRazBzVTBGQk1VSXNSMEZCYzBOT0xHTkJRV2hFTzBGQlEwUTdPMEZCUlVST0xFbEJRVUZCTEVsQlFVa3NSMEZCUjBFc1NVRkJTU3hEUVVGRFlTeExRVUZNTEVOQlFWZE9MRWxCUVZnc1JVRkJhVUpETEVWQlFVVXNSMEZCUnl4RFFVRjBRaXhEUVVGUU8wRkJSVUZETEVsQlFVRkJMRWRCUVVjc1IwRkJSenRCUVVOS1N5eE5RVUZCUVN4UFFVRlBMRVZCUVVWa0xFbEJRVWtzUTBGQlEyVXNSMEZCVEN4RFFVRlRMRlZCUVVORExFZEJRVVE3UVVGQlFTeGxRVUZWTzBGQlFVVkJMRlZCUVVGQkxFZEJRVWNzUlVGQlNFRXNSMEZCUmp0QlFVRlBReXhWUVVGQlFTeExRVUZMTEVWQlFVVnVRaXhWUVVGVkxFTkJRVU5yUWl4SFFVRkVPMEZCUVhoQ0xGTkJRVlk3UVVGQlFTeFBRVUZVTzBGQlJFd3NTMEZCVGp0QlFVZEVMRWRCV2tRc1RVRlpUeXhKUVVGSmJrSXNTVUZCU1N4TFFVRkxMRTlCUVdJc1JVRkJjMEk3UVVGRE0wSlpMRWxCUVVGQkxFZEJRVWNzUjBGQlJ6dEJRVU5LU3l4TlFVRkJRU3hQUVVGUExFVkJRVVZvUWl4VlFVRlZMRU5CUTJoQ1pTeExRVVJOTEVOQlEwRk9MRWxCUkVFc1JVRkRUVU1zUlVGQlJTeEhRVUZITEVOQlJGZ3NSVUZGVGs4c1IwRkdUU3hEUVVWR0xGVkJRVU5ITEVkQlFVUXNSVUZCWlVNc1IwRkJaanRCUVVGQkxHVkJRV2RETzBGQlFVVklMRlZCUVVGQkxFZEJRVWNzUlVGQlJVY3NSMEZCUnl4SFFVRkhXaXhKUVVGaU8wRkJRVzFDVlN4VlFVRkJRU3hMUVVGTExFVkJRVVZETzBGQlFURkNMRk5CUVdoRE8wRkJRVUVzVDBGR1JUdEJRVVJNTEV0QlFVNDdRVUZMUkN4SFFVNU5MRTFCVFVFN1FVRkRUQ3hSUVVGSlF5eEhRVUZITEVkQlFVY3NRMEZCVmp0QlFVTkJMRkZCUVUxTUxFOUJRVThzUjBGQlJ5eEZRVUZvUWp0QlFVTkJMRkZCUVVsTkxFbEJRVWtzUjBGQlJ5eEpRVUZZTzBGQlJVRXNVVUZCVFVNc1MwRkJTeXhIUVVGSGJFSXNZVUZCWVN4RFFVRkRUQ3hWUVVGRUxFTkJRVE5DT3p0QlFVeExMQ3REUVU5alFTeFZRVkJrTzBGQlFVRTdPMEZCUVVFN1FVRlBUQ3d3UkVGQkswSTdRVUZCUVN4WlFVRndRbmRDTEVsQlFXOUNPenRCUVVNM1FpeFpRVUZKU0N4SFFVRkhMRWRCUVVkWUxFVkJRVllzUlVGQll6dEJRVU5hV1N4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlVEdEJRVU5CTzBGQlEwUTdPMEZCUTBRc1dVRkJTV0lzU1VGQlNTeEpRVUZKV1N4SFFVRmFMRVZCUVdsQ08wRkJRMllzWTBGQlNVVXNTMEZCU3l4SlFVRkpSU3hMUVVGTExFTkJRVU5ETEU5QlFVNHNRMEZCWTBZc1NVRkJaQ3hEUVVGaUxFVkJRV3RETzBGQlEyaERMR2RDUVVGSkxFOUJRVTlCTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVZnc1MwRkJiVUlzVVVGQmJrSXNTVUZCSzBJc1QwRkJUMEVzU1VGQlNTeERRVUZETEVOQlFVUXNRMEZCV0N4TFFVRnRRaXhSUVVGMFJDeEZRVUZuUlR0QlFVTTVSRklzWTBGQlFVRXNUMEZCVHl4RFFVRkRWeXhKUVVGU0xFTkJRV0U3UVVGQlJWUXNaMEpCUVVGQkxFZEJRVWNzUlVGQlJVMHNTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJXRHRCUVVGblFrd3NaMEpCUVVGQkxFdEJRVXNzUlVGQlJVc3NTVUZCU1N4RFFVRkRMRU5CUVVRN1FVRkJNMElzWlVGQllqdEJRVU5FTEdGQlJrUXNUVUZGVHp0QlFVTk1VaXhqUVVGQlFTeFBRVUZQTEVOQlFVTlhMRWxCUVZJc1EwRkJZVHRCUVVOWVZDeG5Ra0ZCUVVFc1IwRkJSeXh0UWtGQldVY3NSMEZCV2l4TlFVUlJPMEZCUlZoR0xHZENRVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRUQ3d5UWtGQlUwc3NTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkVVanRCUVVWTUxEWkNRVUZYUVN4SlFVRkpMRU5CUVVNc1EwRkJSRHRCUVVaV08wRkJSa2tzWlVGQllqdEJRVTlFTzBGQlEwWXNWMEZhUkN4TlFWbFBPMEZCUTB4U0xGbEJRVUZCTEU5QlFVOHNRMEZCUTFjc1NVRkJVaXhEUVVGaE8wRkJRVVZVTEdOQlFVRkJMRWRCUVVjc1JVRkJSVWNzUjBGQlVEdEJRVUZaUml4alFVRkJRU3hMUVVGTExFVkJRVVZMTzBGQlFXNUNMR0ZCUVdJN1FVRkRSRHRCUVVOR096dEJRVU5FU0N4UlFVRkJRU3hIUVVGSE8wRkJRMG83UVVFNVFrazdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGblEweFdMRWxCUVVGQkxFZEJRVWNzUjBGQlJ6dEJRVU5LYVVJc1RVRkJRVUVzVDBGQlR5eEZRVUZGTEVOQlFVTk9MRWxCUkU0N1FVRkZTazRzVFVGQlFVRXNUMEZCVHl4RlFVRlFRVHRCUVVaSkxFdEJRVTQ3UVVGSlJEczdRVUZGUkN4VFFVRlBUQ3hIUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTJ0Q0xGTkJRVlFzUTBGQmJVSndRaXhKUVVGdVFpeEZRVUZwUTBNc1JVRkJha01zUlVGQk5rTnZRaXhMUVVFM1F5eEZRVUUwUkR0QlFVTXhSQ3hOUVVGTlF5eE5RVUZOTEVkQlFVY3NSVUZCWmpzN1FVRkRRU3hUUVVGUGNrSXNSVUZCUlN4SFFVRkhSQ3hKUVVGTUxFZEJRVmx4UWl4TFFVRkxMRWRCUVVkQkxFdEJRVE5DTEVWQlFXdERPMEZCUTJoRFFTeEpRVUZCUVN4TFFVRkxMRWRCUVVkQkxFdEJRVXNzUjBGQlIwRXNTMEZCYUVJN1FVRkRSRHM3UVVGRFJDeFBRVUZMTEVsQlFVbEZMRU5CUVVNc1IwRkJSM1pDTEVsQlFXSXNSVUZCYlVKMVFpeERRVUZETEVsQlFVbDBRaXhGUVVGNFFpeEZRVUUwUW5OQ0xFTkJRVU1zU1VGQlNVWXNTMEZCYWtNc1JVRkJkME03UVVGRGRFTkRMRWxCUVVGQkxFMUJRVTBzUTBGQlEwb3NTVUZCVUN4RFFVRlpPMEZCUVVWc1FpeE5RVUZCUVN4SlFVRkpMRVZCUVVWMVFpeERRVUZTTzBGQlFWZDBRaXhOUVVGQlFTeEZRVUZGTEVWQlFVVjFRaXhKUVVGSkxFTkJRVU5ETEVkQlFVd3NRMEZCVTNoQ0xFVkJRVlFzUlVGQllYTkNMRU5CUVVNc1IwRkJSMFlzUzBGQlNpeEhRVUZaTEVOQlFYcENPMEZCUVdZc1MwRkJXanRCUVVORU96dEJRVVZFTEZOQlFVOURMRTFCUVZBN1FVRkRSRHM3UVVGRll5eFRRVUZUU1N4dlFrRkJWQ3hEUVVOaWNFTXNTVUZFWVN4RlFVVmlReXhWUVVaaExFVkJSMkpSTEdOQlNHRXNSVUZKWW5OQ0xFdEJTbUVzUlVGUFlqdEJRVUZCTEUxQlJrRnlRaXhKUVVWQkxIVkZRVVpQTEVOQlJWQTdRVUZCUVN4TlFVUkJReXhGUVVOQkxIVkZRVVJMVGl4UlFVTk1PMEZCUTBFc1RVRkJUV2RETEdWQlFXVXNSMEZCUnpkQ0xGVkJRVlVzUTBGQlF6aENMRWxCUVZnc1EwRkRkRUlzU1VGRWMwSXNSVUZGZEVKMFF5eEpRVVp6UWl4RlFVZDBRa01zVlVGSWMwSXNSVUZKZEVKUkxHTkJTbk5DTEVOQlFYaENPenRCUVU5QkxFMUJRVWtzUTBGQlEzTkNMRXRCUVV3c1JVRkJXVHRCUVVOV0xGZEJRVTlOTEdWQlFXVXNSMEZCUjNCQ0xFOUJRWHBDTzBGQlEwUTdPMEZCUlVRc1RVRkJUWE5DTEZGQlFWRXNSMEZCUnpWQ0xFVkJRVVVzUjBGQlIwNHNVVUZCZEVJN1FVRkRRU3hOUVVGTlJDeE5RVUZOTEVkQlFVYzRRaXhKUVVGSkxFTkJRVU5ETEVkQlFVd3NRMEZCVTNoQ0xFVkJRVVVzUjBGQlIwUXNTVUZCWkN4RlFVRnZRbGdzVTBGQlV5eERRVUZEUXl4SlFVRkVMRVZCUVU5RExGVkJRVkFzUTBGQk4wSXNRMEZCWmpzN1FVRkZRU3hOUVVGSlJDeEpRVUZKTEV0QlFVc3NWVUZCWWl4RlFVRjVRanRCUVVOMlFpeFJRVUZKU1N4TlFVRk5MRWxCUVVreVFpeExRVUZXTEVsQlFXMUNRU3hMUVVGTExFZEJRVWNzUTBGQkwwSXNSVUZCYTBNN1FVRkRhRU1zWVVGQlQwMHNaVUZCWlN4RFFVRkRNMElzU1VGQlJDeEZRVUZQUXl4RlFVRlFMRU5CUVdZc1EwRkJNRUpOTEU5QlFXcERPMEZCUTBRN1FVRkRSaXhIUVVwRUxFMUJTVTg3UVVGRFRDeFJRVUZKWWl4TlFVRk5MRWxCUVVreVFpeExRVUZXTEVsQlFXMUNMRU5CUVVOUkxGRkJRWGhDTEVWQlFXdERPMEZCUTJoRExHRkJRVTlHTEdWQlFXVXNRMEZCUXpOQ0xFbEJRVVFzUlVGQlQwTXNSVUZCVUN4RFFVRm1MRU5CUVRCQ1RTeFBRVUZxUXp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVFVGQlNYVkNMR05CUVVvN08wRkJRMEVzVFVGQlNYaERMRWxCUVVrc1MwRkJTeXhWUVVGaUxFVkJRWGxDTzBGQlFVRXNNa0pCUTAxeFF5eGxRVUZsTEVOQlFVTXpRaXhKUVVGRUxFVkJRVTlCTEVsQlFVa3NSMEZCUjNGQ0xFdEJRVkFzUjBGQlpTeERRVUYwUWl4RFFVUnlRanRCUVVGQkxGRkJRMlpHTEU5QlJHVXNiMEpCUTJaQkxFOUJSR1U3UVVGQlFTeFJRVU5PV2l4UFFVUk5MRzlDUVVOT1FTeFBRVVJOT3p0QlFVZDJRblZDTEVsQlFVRkJMR05CUVdNc1IwRkJSMWdzVDBGQlR5eG5RMEZEYUVKYUxFOUJSR2RDTEhOQ1FVTktZU3hUUVVGVExFTkJRVU53UWl4SlFVRkpMRWRCUVVkeFFpeExRVUZTTEVWQlFXVnlRaXhKUVVGSkxFZEJRVWNzU1VGQlNYRkNMRXRCUVZnc1IwRkJiVUlzUTBGQmJFTXNSVUZCY1VOQkxFdEJRWEpETEVOQlJFd3NTMEZGY0VKa0xFOUJSa283UVVGSFJDeEhRVTVFTEUxQlRVODdRVUZEVEhWQ0xFbEJRVUZCTEdOQlFXTXNSMEZCUjBRc1VVRkJVU3hIUVVOeVFsUXNVMEZCVXl4RFFVRkRjRUlzU1VGQlJDeEZRVUZQUXl4RlFVRlFMRVZCUVZkdlFpeExRVUZZTEVOQlJGa3NaME5CUjJoQ1RTeGxRVUZsTEVOQlFVTXNRMEZCUkN4RlFVRkpUaXhMUVVGTExFZEJRVWNzUTBGQldpeERRVUZtTEVOQlFUaENaQ3hQUVVoa0xITkNRVWxvUW1Fc1UwRkJVeXhEUVVGRFF5eExRVUZMTEVkQlFVY3NRMEZCVkN4RlFVRlpNMElzVFVGQlRTeEhRVUZITEVOQlFYSkNMRVZCUVhkQ01rSXNTMEZCZUVJc1EwRktUeXh6UWtGTGFFSk5MR1ZCUVdVc1EwRkJRMnBETEUxQlFVMHNSMEZCUnl4RFFVRldMRVZCUVdGQkxFMUJRVTBzUjBGQlJ5eERRVUYwUWl4RFFVRm1MRU5CUVhkRFlTeFBRVXg0UWl4RlFVRjZRanRCUVU5RU96dEJRVVZFTEZOQlFVOTFRaXhqUVVGUU8wRkJRMFFpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbWRXNWpkR2x2YmlCblpYUk1aVzVuZEdnb2RIbHdaVG9nYzNSeWFXNW5MQ0JqYjJ4c1pXTjBhVzl1T2lCaGJua3BJSHRjYmlBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RQWW1wbFkzUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1clpYbHpLR052Ykd4bFkzUnBiMjRwTG14bGJtZDBhRHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsSUQwOVBTQW5RWEp5WVhrbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoamIyeHNaV04wYVc5dUlHRnpJSFZ1YTI1dmQyNWJYU2t1YkdWdVozUm9PMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRWx1Wm1sdWFYUjVPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMGwwWlhKaFlteGxUV0Z3S0dOdmJHeGxZM1JwYjI0NklHRnVlU2tnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUNoamIyeHNaV04wYVc5dUlHRnpJRTFoY0R4aGJua3NJR0Z1ZVQ0cExuTmxkQ0E5UFQwZ0oyWjFibU4wYVc5dUp6dGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBSVzUwY21sbGN5aGNiaUFnZEhsd1pUb2djM1J5YVc1bkxGeHVJQ0JqYjJ4c1pXTjBhVzl1T2lCaGJua3NYRzRnSUhOdmNuUlBZbXBsWTNSTFpYbHpQem9nS0NoaE9pQmhibmtzSUdJNklHRnVlU2tnUFQ0Z2JuVnRZbVZ5S1NCOElHSnZiMnhsWVc0Z2ZDQjFibVJsWm1sdVpXUXNYRzRnSUdaeWIyMGdQU0F3TEZ4dUlDQjBieUE5SUVsdVptbHVhWFI1WEc0cE9pQjdJR1Z1ZEhKcFpYTTZJSHNnYTJWNU9pQnpkSEpwYm1jZ2ZDQnVkVzFpWlhJN0lIWmhiSFZsT2lCaGJua2dmVnRkT3lCb1lYTk5iM0psUHpvZ1ltOXZiR1ZoYmlCOUlIdGNiaUFnYkdWMElISmxjenRjYmx4dUlDQnBaaUFvZEhsd1pTQTlQVDBnSjA5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0JzWlhRZ2EyVjVjeUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0dOdmJHeGxZM1JwYjI0cE8xeHVYRzRnSUNBZ2FXWWdLSE52Y25SUFltcGxZM1JMWlhsektTQjdYRzRnSUNBZ0lDQnJaWGx6TG5OdmNuUW9jMjl5ZEU5aWFtVmpkRXRsZVhNZ1BUMDlJSFJ5ZFdVZ1B5QjFibVJsWm1sdVpXUWdPaUJ6YjNKMFQySnFaV04wUzJWNWN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2EyVjVjeUE5SUd0bGVYTXVjMnhwWTJVb1puSnZiU3dnZEc4Z0t5QXhLVHRjYmx4dUlDQWdJSEpsY3lBOUlIdGNiaUFnSUNBZ0lHVnVkSEpwWlhNNklHdGxlWE11YldGd0tDaHJaWGtwSUQwK0lDaDdJR3RsZVN3Z2RtRnNkV1U2SUdOdmJHeGxZM1JwYjI1YmEyVjVYU0I5S1Nrc1hHNGdJQ0FnZlR0Y2JpQWdmU0JsYkhObElHbG1JQ2gwZVhCbElEMDlQU0FuUVhKeVlYa25LU0I3WEc0Z0lDQWdjbVZ6SUQwZ2UxeHVJQ0FnSUNBZ1pXNTBjbWxsY3pvZ1kyOXNiR1ZqZEdsdmJseHVJQ0FnSUNBZ0lDQXVjMnhwWTJVb1puSnZiU3dnZEc4Z0t5QXhLVnh1SUNBZ0lDQWdJQ0F1YldGd0tDaDJZV3c2SUhWdWEyNXZkMjRzSUdsa2VEb2diblZ0WW1WeUtTQTlQaUFvZXlCclpYazZJR2xrZUNBcklHWnliMjBzSUhaaGJIVmxPaUIyWVd3Z2ZTa3BMRnh1SUNBZ0lIMDdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdiR1YwSUdsa2VDQTlJREE3WEc0Z0lDQWdZMjl1YzNRZ1pXNTBjbWxsY3lBOUlGdGRPMXh1SUNBZ0lHeGxkQ0JrYjI1bElEMGdkSEoxWlR0Y2JseHVJQ0FnSUdOdmJuTjBJR2x6VFdGd0lEMGdhWE5KZEdWeVlXSnNaVTFoY0NoamIyeHNaV04wYVc5dUtUdGNibHh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdhWFJsYlNCdlppQmpiMnhzWldOMGFXOXVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FXUjRJRDRnZEc4cElIdGNiaUFnSUNBZ0lDQWdaRzl1WlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNobWNtOXRJRHc5SUdsa2VDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTk5ZWEFnSmlZZ1FYSnlZWGt1YVhOQmNuSmhlU2hwZEdWdEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FYUmxiVnN3WFNBOVBUMGdKM04wY21sdVp5Y2dmSHdnZEhsd1pXOW1JR2wwWlcxYk1GMGdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWFXVnpMbkIxYzJnb2V5QnJaWGs2SUdsMFpXMWJNRjBzSUhaaGJIVmxPaUJwZEdWdFd6RmRJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWFXVnpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYazZJR0JiWlc1MGNua2dKSHRwWkhoOVhXQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxdHJaWGxkSnpvZ2FYUmxiVnN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblczWmhiSFZsWFNjNklHbDBaVzFiTVYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWlc1MGNtbGxjeTV3ZFhOb0tIc2dhMlY1T2lCcFpIZ3NJSFpoYkhWbE9pQnBkR1Z0SUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaSGdyS3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhNZ1BTQjdYRzRnSUNBZ0lDQm9ZWE5OYjNKbE9pQWhaRzl1WlN4Y2JpQWdJQ0FnSUdWdWRISnBaWE1zWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ5WlhNN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGSmhibWRsY3lobWNtOXRPaUJ1ZFcxaVpYSXNJSFJ2T2lCdWRXMWlaWElzSUd4cGJXbDBPaUJ1ZFcxaVpYSXBJSHRjYmlBZ1kyOXVjM1FnY21GdVoyVnpJRDBnVzEwN1hHNGdJSGRvYVd4bElDaDBieUF0SUdaeWIyMGdQaUJzYVcxcGRDQXFJR3hwYldsMEtTQjdYRzRnSUNBZ2JHbHRhWFFnUFNCc2FXMXBkQ0FxSUd4cGJXbDBPMXh1SUNCOVhHNGdJR1p2Y2lBb2JHVjBJR2tnUFNCbWNtOXRPeUJwSUR3OUlIUnZPeUJwSUNzOUlHeHBiV2wwS1NCN1hHNGdJQ0FnY21GdVoyVnpMbkIxYzJnb2V5Qm1jbTl0T2lCcExDQjBiem9nVFdGMGFDNXRhVzRvZEc4c0lHa2dLeUJzYVcxcGRDQXRJREVwSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlISmhibWRsY3p0Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdaMlYwUTI5c2JHVmpkR2x2YmtWdWRISnBaWE1vWEc0Z0lIUjVjR1U2SUhOMGNtbHVaeXhjYmlBZ1kyOXNiR1ZqZEdsdmJqb2dZVzU1TEZ4dUlDQnpiM0owVDJKcVpXTjBTMlY1Y3pvZ0tDaGhPaUJoYm5rc0lHSTZJR0Z1ZVNrZ1BUNGdiblZ0WW1WeUtTQjhJR0p2YjJ4bFlXNGdmQ0IxYm1SbFptbHVaV1FzWEc0Z0lHeHBiV2wwT2lCdWRXMWlaWElzWEc0Z0lHWnliMjBnUFNBd0xGeHVJQ0IwYnlBOUlFbHVabWx1YVhSNVhHNHBJSHRjYmlBZ1kyOXVjM1FnWjJWMFJXNTBjbWxsYzBKdmRXNWtJRDBnWjJWMFJXNTBjbWxsY3k1aWFXNWtLRnh1SUNBZ0lHNTFiR3dzWEc0Z0lDQWdkSGx3WlN4Y2JpQWdJQ0JqYjJ4c1pXTjBhVzl1TEZ4dUlDQWdJSE52Y25SUFltcGxZM1JMWlhselhHNGdJQ2s3WEc1Y2JpQWdhV1lnS0NGc2FXMXBkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm5aWFJGYm5SeWFXVnpRbTkxYm1Rb0tTNWxiblJ5YVdWek8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2FYTlRkV0p6WlhRZ1BTQjBieUE4SUVsdVptbHVhWFI1TzF4dUlDQmpiMjV6ZENCc1pXNW5kR2dnUFNCTllYUm9MbTFwYmloMGJ5QXRJR1p5YjIwc0lHZGxkRXhsYm1kMGFDaDBlWEJsTENCamIyeHNaV04wYVc5dUtTazdYRzVjYmlBZ2FXWWdLSFI1Y0dVZ0lUMDlJQ2RKZEdWeVlXSnNaU2NwSUh0Y2JpQWdJQ0JwWmlBb2JHVnVaM1JvSUR3OUlHeHBiV2wwSUh4OElHeHBiV2wwSUR3Z055a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHZGxkRVZ1ZEhKcFpYTkNiM1Z1WkNobWNtOXRMQ0IwYnlrdVpXNTBjbWxsY3p0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYVdZZ0tHeGxibWQwYUNBOFBTQnNhVzFwZENBbUppQWhhWE5UZFdKelpYUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm5aWFJGYm5SeWFXVnpRbTkxYm1Rb1puSnZiU3dnZEc4cExtVnVkSEpwWlhNN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2JHVjBJR3hwYldsMFpXUkZiblJ5YVdWek8xeHVJQ0JwWmlBb2RIbHdaU0E5UFQwZ0owbDBaWEpoWW14bEp5a2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2FHRnpUVzl5WlN3Z1pXNTBjbWxsY3lCOUlEMGdaMlYwUlc1MGNtbGxjMEp2ZFc1a0tHWnliMjBzSUdaeWIyMGdLeUJzYVcxcGRDQXRJREVwTzF4dVhHNGdJQ0FnYkdsdGFYUmxaRVZ1ZEhKcFpYTWdQU0JvWVhOTmIzSmxYRzRnSUNBZ0lDQS9JRnN1TGk1bGJuUnlhV1Z6TENBdUxpNW5aWFJTWVc1blpYTW9abkp2YlNBcklHeHBiV2wwTENCbWNtOXRJQ3NnTWlBcUlHeHBiV2wwSUMwZ01Td2diR2x0YVhRcFhWeHVJQ0FnSUNBZ09pQmxiblJ5YVdWek8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHeHBiV2wwWldSRmJuUnlhV1Z6SUQwZ2FYTlRkV0p6WlhSY2JpQWdJQ0FnSUQ4Z1oyVjBVbUZ1WjJWektHWnliMjBzSUhSdkxDQnNhVzFwZENsY2JpQWdJQ0FnSURvZ1cxeHVJQ0FnSUNBZ0lDQWdJQzR1TG1kbGRFVnVkSEpwWlhOQ2IzVnVaQ2d3TENCc2FXMXBkQ0F0SURVcExtVnVkSEpwWlhNc1hHNGdJQ0FnSUNBZ0lDQWdMaTR1WjJWMFVtRnVaMlZ6S0d4cGJXbDBJQzBnTkN3Z2JHVnVaM1JvSUMwZ05Td2diR2x0YVhRcExGeHVJQ0FnSUNBZ0lDQWdJQzR1TG1kbGRFVnVkSEpwWlhOQ2IzVnVaQ2hzWlc1bmRHZ2dMU0EwTENCc1pXNW5kR2dnTFNBeEtTNWxiblJ5YVdWekxGeHVJQ0FnSUNBZ0lDQmRPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR3hwYldsMFpXUkZiblJ5YVdWek8xeHVmVnh1SWwxOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3R5bGluZ1ZhbHVlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9yZWFjdEJhc2UxNlN0eWxpbmcuU3R5bGluZ1ZhbHVlO1xuICB9XG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0pTT05Ob2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KU09OTm9kZVwiKSk7XG5cbnZhciBfY3JlYXRlU3R5bGluZ0Zyb21UaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlU3R5bGluZ0Zyb21UaGVtZVwiKSk7XG5cbnZhciBfcmVhY3RCYXNlMTZTdHlsaW5nID0gcmVxdWlyZShcInJlYWN0LWJhc2UxNi1zdHlsaW5nXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGV4cGFuZFJvb3ROb2RlID0gZnVuY3Rpb24gZXhwYW5kUm9vdE5vZGUoa2V5UGF0aCwgZGF0YSwgbGV2ZWwpIHtcbiAgcmV0dXJuIGxldmVsID09PSAwO1xufTtcblxudmFyIGRlZmF1bHRJdGVtU3RyaW5nID0gZnVuY3Rpb24gZGVmYXVsdEl0ZW1TdHJpbmcodHlwZSwgZGF0YSwgaXRlbVR5cGUsIGl0ZW1TdHJpbmcpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGl0ZW1UeXBlLCBcIiBcIiwgaXRlbVN0cmluZyk7XG59O1xuXG52YXIgZGVmYXVsdExhYmVsUmVuZGVyZXIgPSBmdW5jdGlvbiBkZWZhdWx0TGFiZWxSZW5kZXJlcihfcmVmKSB7XG4gIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDEpLFxuICAgICAgbGFiZWwgPSBfcmVmMlswXTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgbGFiZWwsIFwiOlwiKTtcbn07XG5cbnZhciBub0N1c3RvbU5vZGUgPSBmdW5jdGlvbiBub0N1c3RvbU5vZGUoKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIGNoZWNrTGVnYWN5VGhlbWluZyh0aGVtZSwgcHJvcHMpIHtcbiAgdmFyIGRlcHJlY2F0ZWRTdHlsaW5nTWV0aG9kc01hcCA9IHtcbiAgICBnZXRBcnJvd1N0eWxlOiAnYXJyb3cnLFxuICAgIGdldExpc3RTdHlsZTogJ25lc3RlZE5vZGVDaGlsZHJlbicsXG4gICAgZ2V0SXRlbVN0cmluZ1N0eWxlOiAnbmVzdGVkTm9kZUl0ZW1TdHJpbmcnLFxuICAgIGdldExhYmVsU3R5bGU6ICdsYWJlbCcsXG4gICAgZ2V0VmFsdWVTdHlsZTogJ3ZhbHVlVGV4dCdcbiAgfTtcbiAgdmFyIGRlcHJlY2F0ZWRTdHlsaW5nTWV0aG9kcyA9IE9iamVjdC5rZXlzKGRlcHJlY2F0ZWRTdHlsaW5nTWV0aG9kc01hcCkuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHByb3BzW25hbWVdO1xuICB9KTtcblxuICBpZiAoZGVwcmVjYXRlZFN0eWxpbmdNZXRob2RzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJykge1xuICAgICAgdGhlbWUgPSB7XG4gICAgICAgIGV4dGVuZDogdGhlbWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoZW1lID0gX29iamVjdFNwcmVhZCh7fSwgdGhlbWUpO1xuICAgIH1cblxuICAgIGRlcHJlY2F0ZWRTdHlsaW5nTWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihcIlN0eWxpbmcgbWV0aG9kIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIGlzIGRlcHJlY2F0ZWQsIHVzZSBcXFwidGhlbWVcXFwiIHByb3BlcnR5IGluc3RlYWRcIikpO1xuXG4gICAgICB0aGVtZVtkZXByZWNhdGVkU3R5bGluZ01ldGhvZHNNYXBbbmFtZV1dID0gZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IF9yZWYzLnN0eWxlO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3R5bGUpLCBwcm9wc1tuYW1lXS5hcHBseShwcm9wcywgYXJncykpXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZUZyb21Qcm9wcyhwcm9wcykge1xuICB2YXIgdGhlbWUgPSBjaGVja0xlZ2FjeVRoZW1pbmcocHJvcHMudGhlbWUsIHByb3BzKTtcblxuICBpZiAocHJvcHMuaW52ZXJ0VGhlbWUpIHtcbiAgICB0aGVtZSA9ICgwLCBfcmVhY3RCYXNlMTZTdHlsaW5nLmludmVydFRoZW1lKSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0eWxpbmc6ICgwLCBfY3JlYXRlU3R5bGluZ0Zyb21UaGVtZVtcImRlZmF1bHRcIl0pKHRoZW1lKVxuICB9O1xufVxuXG52YXIgSlNPTlRyZWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEpTT05UcmVlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEpTT05UcmVlKTtcblxuICBmdW5jdGlvbiBKU09OVHJlZShwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBKU09OVHJlZSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICBfdGhpcy5zdGF0ZSA9IGdldFN0YXRlRnJvbVByb3BzKHByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSlNPTlRyZWUsIFt7XG4gICAga2V5OiBcIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChbJ3RoZW1lJywgJ2ludmVydFRoZW1lJ10uZmluZChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gbmV4dFByb3BzW2tdICE9PSBfdGhpczIucHJvcHNba107XG4gICAgICB9KSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKGdldFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiAhIU9iamVjdC5rZXlzKG5leHRQcm9wcykuZmluZChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gayA9PT0gJ2tleVBhdGgnID8gbmV4dFByb3BzW2tdLmpvaW4oJy8nKSAhPT0gX3RoaXMzLnByb3BzW2tdLmpvaW4oJy8nKSA6IG5leHRQcm9wc1trXSAhPT0gX3RoaXMzLnByb3BzW2tdO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMuZGF0YSxcbiAgICAgICAgICBrZXlQYXRoID0gX3RoaXMkcHJvcHMua2V5UGF0aCxcbiAgICAgICAgICBwb3N0cHJvY2Vzc1ZhbHVlID0gX3RoaXMkcHJvcHMucG9zdHByb2Nlc3NWYWx1ZSxcbiAgICAgICAgICBoaWRlUm9vdCA9IF90aGlzJHByb3BzLmhpZGVSb290LFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWUsXG4gICAgICAgICAgXyA9IF90aGlzJHByb3BzLmludmVydFRoZW1lLFxuICAgICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMsIFtcImRhdGFcIiwgXCJrZXlQYXRoXCIsIFwicG9zdHByb2Nlc3NWYWx1ZVwiLCBcImhpZGVSb290XCIsIFwidGhlbWVcIiwgXCJpbnZlcnRUaGVtZVwiXSk7XG5cbiAgICAgIHZhciBzdHlsaW5nID0gdGhpcy5zdGF0ZS5zdHlsaW5nO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCBzdHlsaW5nKCd0cmVlJyksIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0pTT05Ob2RlW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBwb3N0cHJvY2Vzc1ZhbHVlOiBwb3N0cHJvY2Vzc1ZhbHVlLFxuICAgICAgICBoaWRlUm9vdDogaGlkZVJvb3QsXG4gICAgICAgIHN0eWxpbmc6IHN0eWxpbmdcbiAgICAgIH0sIHJlc3QpLCB7XG4gICAgICAgIGtleVBhdGg6IGhpZGVSb290ID8gW10gOiBrZXlQYXRoLFxuICAgICAgICB2YWx1ZTogcG9zdHByb2Nlc3NWYWx1ZSh2YWx1ZSlcbiAgICAgIH0pKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEpTT05UcmVlO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gSlNPTlRyZWU7XG5cbl9kZWZpbmVQcm9wZXJ0eShKU09OVHJlZSwgXCJwcm9wVHlwZXNcIiwge1xuICBkYXRhOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hbnksXG4gIGhpZGVSb290OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICB0aGVtZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ10pLFxuICBpbnZlcnRUaGVtZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAga2V5UGF0aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYXJyYXlPZihfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyXSkpLFxuICBwb3N0cHJvY2Vzc1ZhbHVlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBzb3J0T2JqZWN0S2V5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sXSlcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoSlNPTlRyZWUsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgc2hvdWxkRXhwYW5kTm9kZTogZXhwYW5kUm9vdE5vZGUsXG4gIGhpZGVSb290OiBmYWxzZSxcbiAga2V5UGF0aDogWydyb290J10sXG4gIGdldEl0ZW1TdHJpbmc6IGRlZmF1bHRJdGVtU3RyaW5nLFxuICBsYWJlbFJlbmRlcmVyOiBkZWZhdWx0TGFiZWxSZW5kZXJlcixcbiAgdmFsdWVSZW5kZXJlcjogaWRlbnRpdHksXG4gIHBvc3Rwcm9jZXNzVmFsdWU6IGlkZW50aXR5LFxuICBpc0N1c3RvbU5vZGU6IG5vQ3VzdG9tTm9kZSxcbiAgY29sbGVjdGlvbkxpbWl0OiA1MCxcbiAgaW52ZXJ0VGhlbWU6IHRydWVcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlwYm1SbGVDNTBjM2dpWFN3aWJtRnRaWE1pT2xzaWFXUmxiblJwZEhraUxDSjJZV3gxWlNJc0ltVjRjR0Z1WkZKdmIzUk9iMlJsSWl3aWEyVjVVR0YwYUNJc0ltUmhkR0VpTENKc1pYWmxiQ0lzSW1SbFptRjFiSFJKZEdWdFUzUnlhVzVuSWl3aWRIbHdaU0lzSW1sMFpXMVVlWEJsSWl3aWFYUmxiVk4wY21sdVp5SXNJbVJsWm1GMWJIUk1ZV0psYkZKbGJtUmxjbVZ5SWl3aWJHRmlaV3dpTENKdWIwTjFjM1J2YlU1dlpHVWlMQ0pqYUdWamEweGxaMkZqZVZSb1pXMXBibWNpTENKMGFHVnRaU0lzSW5CeWIzQnpJaXdpWkdWd2NtVmpZWFJsWkZOMGVXeHBibWROWlhSb2IyUnpUV0Z3SWl3aVoyVjBRWEp5YjNkVGRIbHNaU0lzSW1kbGRFeHBjM1JUZEhsc1pTSXNJbWRsZEVsMFpXMVRkSEpwYm1kVGRIbHNaU0lzSW1kbGRFeGhZbVZzVTNSNWJHVWlMQ0puWlhSV1lXeDFaVk4wZVd4bElpd2laR1Z3Y21WallYUmxaRk4wZVd4cGJtZE5aWFJvYjJSeklpd2lUMkpxWldOMElpd2lhMlY1Y3lJc0ltWnBiSFJsY2lJc0ltNWhiV1VpTENKc1pXNW5kR2dpTENKbGVIUmxibVFpTENKbWIzSkZZV05vSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aWMzUjViR1VpTENKaGNtZHpJaXdpWjJWMFUzUmhkR1ZHY205dFVISnZjSE1pTENKcGJuWmxjblJVYUdWdFpTSXNJbk4wZVd4cGJtY2lMQ0pLVTA5T1ZISmxaU0lzSW5OMFlYUmxJaXdpYm1WNGRGQnliM0J6SWl3aVptbHVaQ0lzSW1zaUxDSnpaWFJUZEdGMFpTSXNJbXB2YVc0aUxDSndiM04wY0hKdlkyVnpjMVpoYkhWbElpd2lhR2xrWlZKdmIzUWlMQ0pmSWl3aWNtVnpkQ0lzSWxKbFlXTjBJaXdpUTI5dGNHOXVaVzUwSWl3aVVISnZjRlI1Y0dWeklpd2lZVzU1SWl3aVltOXZiQ0lzSW05dVpVOW1WSGx3WlNJc0ltOWlhbVZqZENJc0luTjBjbWx1WnlJc0ltRnljbUY1VDJZaUxDSnVkVzFpWlhJaUxDSm1kVzVqSWl3aWMyOXlkRTlpYW1WamRFdGxlWE1pTENKemFHOTFiR1JGZUhCaGJtUk9iMlJsSWl3aVoyVjBTWFJsYlZOMGNtbHVaeUlzSW14aFltVnNVbVZ1WkdWeVpYSWlMQ0oyWVd4MVpWSmxibVJsY21WeUlpd2lhWE5EZFhOMGIyMU9iMlJsSWl3aVkyOXNiR1ZqZEdsdmJreHBiV2wwSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3TzBGQlMwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYlVKQkxFbEJRVTFCTEZGQlFWRXNSMEZCUnl4VFFVRllRU3hSUVVGWExFTkJRVU5ETEV0QlFVUTdRVUZCUVN4VFFVRm5Ra0VzUzBGQmFFSTdRVUZCUVN4RFFVRnFRanM3UVVGRFFTeEpRVUZOUXl4alFVRmpMRWRCUVVjc1UwRkJha0pCTEdOQlFXbENMRU5CUTNKQ1F5eFBRVVJ4UWl4RlFVVnlRa01zU1VGR2NVSXNSVUZIY2tKRExFdEJTSEZDTzBGQlFVRXNVMEZKYkVKQkxFdEJRVXNzUzBGQlN5eERRVXBSTzBGQlFVRXNRMEZCZGtJN08wRkJTMEVzU1VGQlRVTXNhVUpCUVdsQ0xFZEJRVWNzVTBGQmNFSkJMR2xDUVVGdlFpeERRVU40UWtNc1NVRkVkMElzUlVGRmVFSklMRWxCUm5kQ0xFVkJSM2hDU1N4UlFVaDNRaXhGUVVsNFFrTXNWVUZLZDBJN1FVRkJRU3h6UWtGTmVFSXNPRU5CUTBkRUxGRkJSRWdzVDBGRFkwTXNWVUZFWkN4RFFVNTNRanRCUVVGQkxFTkJRVEZDT3p0QlFWVkJMRWxCUVUxRExHOUNRVUZ2UWl4SFFVRkhMRk5CUVhaQ1FTeHZRa0ZCZFVJN1FVRkJRVHRCUVVGQkxFMUJRVVZETEV0QlFVWTdPMEZCUVVFc2MwSkJRek5DTERoRFFVRlBRU3hMUVVGUUxFMUJSREpDTzBGQlFVRXNRMEZCTjBJN08wRkJSMEVzU1VGQlRVTXNXVUZCV1N4SFFVRkhMRk5CUVdaQkxGbEJRV1U3UVVGQlFTeFRRVUZOTEV0QlFVNDdRVUZCUVN4RFFVRnlRanM3UVVGRlFTeFRRVUZUUXl4clFrRkJWQ3hEUVVFMFFrTXNTMEZCTlVJc1JVRkJjMFJETEV0QlFYUkVMRVZCUVc5Rk8wRkJRMnhGTEUxQlFVMURMREpDUVVFeVFpeEhRVUZITzBGQlEyeERReXhKUVVGQlFTeGhRVUZoTEVWQlFVVXNUMEZFYlVJN1FVRkZiRU5ETEVsQlFVRkJMRmxCUVZrc1JVRkJSU3h2UWtGR2IwSTdRVUZIYkVORExFbEJRVUZCTEd0Q1FVRnJRaXhGUVVGRkxITkNRVWhqTzBGQlNXeERReXhKUVVGQlFTeGhRVUZoTEVWQlFVVXNUMEZLYlVJN1FVRkxiRU5ETEVsQlFVRkJMR0ZCUVdFc1JVRkJSVHRCUVV4dFFpeEhRVUZ3UXp0QlFWRkJMRTFCUVUxRExIZENRVUYzUWl4SFFVRkhReXhOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZETDBKU0xESkNRVVFyUWl4RlFVVXZRbE1zVFVGR0swSXNRMEZGZUVJc1ZVRkJRME1zU1VGQlJEdEJRVUZCTEZkQlFWVllMRXRCUVVzc1EwRkJRMWNzU1VGQlJDeERRVUZtTzBGQlFVRXNSMEZHZDBJc1EwRkJha003TzBGQlNVRXNUVUZCU1Vvc2QwSkJRWGRDTEVOQlFVTkxMRTFCUVhwQ0xFZEJRV3RETEVOQlFYUkRMRVZCUVhsRE8wRkJRM1pETEZGQlFVa3NUMEZCVDJJc1MwRkJVQ3hMUVVGcFFpeFJRVUZ5UWl4RlFVRXJRanRCUVVNM1FrRXNUVUZCUVVFc1MwRkJTeXhIUVVGSE8wRkJRMDVqTEZGQlFVRkJMRTFCUVUwc1JVRkJSV1E3UVVGRVJpeFBRVUZTTzBGQlIwUXNTMEZLUkN4TlFVbFBPMEZCUTB4QkxFMUJRVUZCTEV0QlFVc3NjVUpCUVZGQkxFdEJRVklzUTBGQlREdEJRVU5FT3p0QlFVVkVVU3hKUVVGQlFTeDNRa0ZCZDBJc1EwRkJRMDhzVDBGQmVrSXNRMEZCYVVNc1ZVRkJRMGdzU1VGQlJDeEZRVUZWTzBGQlEzcERPMEZCUTBGSkxFMUJRVUZCTEU5QlFVOHNRMEZCUTBNc1MwRkJVaXcwUWtGRGNVSk1MRWxCUkhKQ096dEJRVWxEV2l4TlFVRkJRU3hMUVVGRUxFTkJRMFZGTERKQ1FVRXlRaXhEUVVONlFsVXNTVUZFZVVJc1EwRkVOMElzU1VGSlNUdEJRVUZCTEZsQlFVZE5MRXRCUVVnc1UwRkJSMEVzUzBGQlNEczdRVUZCUVN3d1EwRkJaVU1zU1VGQlpqdEJRVUZsUVN4VlFVRkJRU3hKUVVGbU8wRkJRVUU3TzBGQlFVRXNaVUZCZVVJN1FVRkRNMEpFTEZWQlFVRkJMRXRCUVVzc2EwTkJRMEZCTEV0QlJFRXNSMEZGUVdwQ0xFdEJRVXNzUTBGQlExY3NTVUZCUkN4RFFVRk1MRTlCUVVGWUxFdEJRVXNzUlVGQmVVSnJRaXhKUVVGNlFpeERRVVpNTzBGQlJITkNMRk5CUVhwQ08wRkJRVUVzVDBGS1NqdEJRVlZFTEV0QmFFSkVPMEZCYVVKRU96dEJRVVZFTEZOQlFVOXVRaXhMUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTI5Q0xHbENRVUZVTEVOQlFUSkNia0lzUzBGQk0wSXNSVUZCZVVNN1FVRkRka01zVFVGQlNVUXNTMEZCU3l4SFFVRkhSQ3hyUWtGQmEwSXNRMEZCUTBVc1MwRkJTeXhEUVVGRFJDeExRVUZRTEVWQlFXTkRMRXRCUVdRc1EwRkJPVUk3TzBGQlEwRXNUVUZCU1VFc1MwRkJTeXhEUVVGRGIwSXNWMEZCVml4RlFVRjFRanRCUVVOeVFuSkNMRWxCUVVGQkxFdEJRVXNzUjBGQlJ5eHhRMEZCV1VFc1MwRkJXaXhEUVVGU08wRkJRMFE3TzBGQlJVUXNVMEZCVHp0QlFVTk1jMElzU1VGQlFVRXNUMEZCVHl4RlFVRkZMSGREUVVGMVFuUkNMRXRCUVhaQ08wRkJSRW9zUjBGQlVEdEJRVWRFT3p0SlFVVnZRblZDTEZFN096czdPMEZCTUVKdVFpeHZRa0ZCV1hSQ0xFdEJRVm9zUlVGQk1FSTdRVUZCUVRzN1FVRkJRVHM3UVVGRGVFSXNPRUpCUVUxQkxFdEJRVTQ3UVVGRFFTeFZRVUZMZFVJc1MwRkJUQ3hIUVVGaFNpeHBRa0ZCYVVJc1EwRkJRMjVDTEV0QlFVUXNRMEZCT1VJN1FVRkdkMEk3UVVGSGVrSTdPenM3Y1VSQlJXZERkMElzVXl4RlFVRnJRanRCUVVGQk96dEJRVU5xUkN4VlFVTkZMRU5CUVVNc1QwRkJSQ3hGUVVGVkxHRkJRVllzUlVGQmVVSkRMRWxCUVhwQ0xFTkJRMFVzVlVGQlEwTXNRMEZCUkR0QlFVRkJMR1ZCUVU5R0xGTkJRVk1zUTBGQlEwVXNRMEZCUkN4RFFVRlVMRXRCUVdkRExFMUJRVWtzUTBGQlF6RkNMRXRCUVV3c1EwRkJWekJDTEVOQlFWZ3NRMEZCZGtNN1FVRkJRU3hQUVVSR0xFTkJSRVlzUlVGSlJUdEJRVU5CTEdGQlFVdERMRkZCUVV3c1EwRkJZMUlzYVVKQlFXbENMRU5CUVVOTExGTkJRVVFzUTBGQkwwSTdRVUZEUkR0QlFVTkdPenM3TUVOQlJYRkNRU3hUTEVWQlFXdENPMEZCUVVFN08wRkJRM1JETEdGQlFVOHNRMEZCUXl4RFFVRkRhRUlzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZsbExGTkJRVm9zUlVGQmRVSkRMRWxCUVhaQ0xFTkJRVFJDTEZWQlFVTkRMRU5CUVVRN1FVRkJRU3hsUVVOdVEwRXNRMEZCUXl4TFFVRkxMRk5CUVU0c1IwRkRTVVlzVTBGQlV5eERRVUZEUlN4RFFVRkVMRU5CUVZRc1EwRkJZVVVzU1VGQllpeERRVUZyUWl4SFFVRnNRaXhOUVVFeVFpeE5RVUZKTEVOQlFVTTFRaXhMUVVGTUxFTkJRVmN3UWl4RFFVRllMRVZCUVdORkxFbEJRV1FzUTBGQmJVSXNSMEZCYmtJc1EwRkVMMElzUjBGRlNVb3NVMEZCVXl4RFFVRkRSU3hEUVVGRUxFTkJRVlFzUzBGQlowTXNUVUZCU1N4RFFVRkRNVUlzUzBGQlRDeERRVUZYTUVJc1EwRkJXQ3hEUVVoRU8wRkJRVUVzVDBGQk5VSXNRMEZCVkR0QlFVdEVPenM3TmtKQlJWRTdRVUZCUVN4M1FrRlRTQ3hMUVVGTE1VSXNTMEZVUmp0QlFVRkJMRlZCUlVOa0xFdEJSa1FzWlVGRlRFY3NTVUZHU3p0QlFVRkJMRlZCUjB4RUxFOUJTRXNzWlVGSFRFRXNUMEZJU3p0QlFVRkJMRlZCU1V4NVF5eG5Ra0ZLU3l4bFFVbE1RU3huUWtGS1N6dEJRVUZCTEZWQlMweERMRkZCVEVzc1pVRkxURUVzVVVGTVN6dEJRVUZCTEZWQlRVd3ZRaXhMUVU1TExHVkJUVXhCTEV0QlRrczdRVUZCUVN4VlFVOVJaME1zUTBGUVVpeGxRVTlNV0N4WFFWQkxPMEZCUVVFc1ZVRlJSbGtzU1VGU1JUczdRVUZCUVN4VlFWZERXQ3hQUVZoRUxFZEJWMkVzUzBGQlMwVXNTMEZZYkVJc1EwRlhRMFlzVDBGWVJEdEJRV0ZRTERCQ1FVTkZMSE5EUVVGUlFTeFBRVUZQTEVOQlFVTXNUVUZCUkN4RFFVRm1MR1ZCUTBVc1owTkJRVU1zYjBKQlFVUTdRVUZEVVZFc1VVRkJRVUVzWjBKQlFXZENMRVZCUVdoQ1FTeG5Ra0ZFVWp0QlFVTXdRa01zVVVGQlFVRXNVVUZCVVN4RlFVRlNRU3hSUVVReFFqdEJRVU52UTFRc1VVRkJRVUVzVDBGQlR5eEZRVUZRUVR0QlFVUndReXhUUVVOblJGY3NTVUZFYUVRN1FVRkZSU3hSUVVGQkxFOUJRVThzUlVGQlJVWXNVVUZCVVN4SFFVRkhMRVZCUVVnc1IwRkJVVEZETEU5QlJqTkNPMEZCUjBVc1VVRkJRU3hMUVVGTExFVkJRVVY1UXl4blFrRkJaMElzUTBGQlF6TkRMRXRCUVVRN1FVRklla0lzVTBGRVJpeERRVVJHTzBGQlUwUTdPenM3UlVGMlJXMURLME1zYTBKQlFVMURMRk03T3pzN1owSkJRWFpDV2l4UkxHVkJRMEU3UVVGRGFrSnFReXhGUVVGQlFTeEpRVUZKTEVWQlFVVTRReXh6UWtGQlZVTXNSMEZFUXp0QlFVVnFRazRzUlVGQlFVRXNVVUZCVVN4RlFVRkZTeXh6UWtGQlZVVXNTVUZHU0R0QlFVZHFRblJETEVWQlFVRkJMRXRCUVVzc1JVRkJSVzlETEhOQ1FVRlZSeXhUUVVGV0xFTkJRVzlDTEVOQlFVTklMSE5DUVVGVlNTeE5RVUZZTEVWQlFXMUNTaXh6UWtGQlZVc3NUVUZCTjBJc1EwRkJjRUlzUTBGSVZUdEJRVWxxUW5CQ0xFVkJRVUZCTEZkQlFWY3NSVUZCUldVc2MwSkJRVlZGTEVsQlNrNDdRVUZMYWtKcVJDeEZRVUZCUVN4UFFVRlBMRVZCUVVVclF5eHpRa0ZCVlUwc1QwRkJWaXhEUVVOUVRpeHpRa0ZCVlVjc1UwRkJWaXhEUVVGdlFpeERRVUZEU0N4elFrRkJWVXNzVFVGQldDeEZRVUZ0UWt3c2MwSkJRVlZQTEUxQlFUZENMRU5CUVhCQ0xFTkJSRThzUTBGTVVUdEJRVkZxUW1Jc1JVRkJRVUVzWjBKQlFXZENMRVZCUVVWTkxITkNRVUZWVVN4SlFWSllPMEZCVTJwQ1F5eEZRVUZCUVN4alFVRmpMRVZCUVVWVUxITkNRVUZWUnl4VFFVRldMRU5CUVc5Q0xFTkJRVU5JTEhOQ1FVRlZVU3hKUVVGWUxFVkJRV2xDVWl4elFrRkJWVVVzU1VGQk0wSXNRMEZCY0VJN1FVRlVReXhET3p0blFrRkVRV1lzVVN4clFrRmhSenRCUVVOd1FuVkNMRVZCUVVGQkxHZENRVUZuUWl4RlFVRkZNVVFzWTBGRVJUdEJRVVZ3UWpKRExFVkJRVUZCTEZGQlFWRXNSVUZCUlN4TFFVWlZPMEZCUjNCQ01VTXNSVUZCUVVFc1QwRkJUeXhGUVVGRkxFTkJRVU1zVFVGQlJDeERRVWhYTzBGQlNYQkNNRVFzUlVGQlFVRXNZVUZCWVN4RlFVRkZka1FzYVVKQlNrczdRVUZMY0VKM1JDeEZRVUZCUVN4aFFVRmhMRVZCUVVWd1JDeHZRa0ZNU3p0QlFVMXdRbkZFTEVWQlFVRkJMR0ZCUVdFc1JVRkJSUzlFTEZGQlRrczdRVUZQY0VJMFF5eEZRVUZCUVN4blFrRkJaMElzUlVGQlJUVkRMRkZCVUVVN1FVRlJjRUpuUlN4RlFVRkJRU3haUVVGWkxFVkJRVVZ3UkN4WlFWSk5PMEZCVTNCQ2NVUXNSVUZCUVVFc1pVRkJaU3hGUVVGRkxFVkJWRWM3UVVGVmNFSTVRaXhGUVVGQlFTeFhRVUZYTEVWQlFVVTdRVUZXVHl4RElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnUlZNMklDc2dhVzVzYVc1bElITjBlV3hsSUhCdmNuUWdiMllnU2xOUFRsWnBaWGRsY2lCb2RIUndjem92TDJKcGRHSjFZMnRsZEM1dmNtY3ZaR0YyWlhabFpHUmxjaTl5WldGamRDMXFjMjl1TFhacFpYZGxjaTljYmk4dklHRnNiQ0JqY21Wa2FYUnpJR0Z1WkNCdmNtbG5hVzVoYkNCamIyUmxJSFJ2SUhSb1pTQmhkWFJvYjNKY2JpOHZJRVJoZG1VZ1ZtVmtaR1Z5SUR4MlpXUmtaWEp0WVhScFkwQm5iV0ZwYkM1amIyMCtJR2gwZEhBNkx5OTNkM2N1WlhOcmFXMXZjM0I1TG1OdmJTOWNiaTh2SUhCdmNuUWdZbmtnUkdGdWFXVnNaU0JhWVc1dWIzUjBhU0JvZEhSd09pOHZkM2QzTG1kcGRHaDFZaTVqYjIwdlpIcGhibTV2ZEhScElEeGtlbUZ1Ym05MGRHbEFiV1V1WTI5dFBseHVYRzVwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JLVTA5T1RtOWtaU0JtY205dElDY3VMMHBUVDA1T2IyUmxKenRjYm1sdGNHOXlkQ0JqY21WaGRHVlRkSGxzYVc1blJuSnZiVlJvWlcxbElHWnliMjBnSnk0dlkzSmxZWFJsVTNSNWJHbHVaMFp5YjIxVWFHVnRaU2M3WEc1cGJYQnZjblFnZTF4dUlDQnBiblpsY25SVWFHVnRaU3hjYmlBZ1UzUjViR2x1WjBOdmJtWnBaeXhjYmlBZ1UzUjViR2x1WjBaMWJtTjBhVzl1TEZ4dUlDQlRkSGxzYVc1blZtRnNkV1VzWEc0Z0lGUm9aVzFsTEZ4dWZTQm1jbTl0SUNkeVpXRmpkQzFpWVhObE1UWXRjM1I1YkdsdVp5YzdYRzVwYlhCdmNuUWdleUJEYVhKamRXeGhjbEJ5YjNCelVHRnpjMlZrVkdoeWIzVm5hRXBUVDA1VWNtVmxJSDBnWm5KdmJTQW5MaTkwZVhCbGN5YzdYRzVjYm1sdWRHVnlabUZqWlNCUWNtOXdjeUJsZUhSbGJtUnpJRU5wY21OMWJHRnlVSEp2Y0hOUVlYTnpaV1JVYUhKdmRXZG9TbE5QVGxSeVpXVWdlMXh1SUNCa1lYUmhPaUJoYm5rN1hHNGdJSFJvWlcxbFB6b2dWR2hsYldVN1hHNGdJR2x1ZG1WeWRGUm9aVzFsT2lCaWIyOXNaV0Z1TzF4dWZWeHVYRzVwYm5SbGNtWmhZMlVnVTNSaGRHVWdlMXh1SUNCemRIbHNhVzVuT2lCVGRIbHNhVzVuUm5WdVkzUnBiMjQ3WEc1OVhHNWNibU52Ym5OMElHbGtaVzUwYVhSNUlEMGdLSFpoYkhWbE9pQmhibmtwSUQwK0lIWmhiSFZsTzF4dVkyOXVjM1FnWlhod1lXNWtVbTl2ZEU1dlpHVWdQU0FvWEc0Z0lHdGxlVkJoZEdnNklDaHpkSEpwYm1jZ2ZDQnVkVzFpWlhJcFcxMHNYRzRnSUdSaGRHRTZJR0Z1ZVN4Y2JpQWdiR1YyWld3NklHNTFiV0psY2x4dUtTQTlQaUJzWlhabGJDQTlQVDBnTUR0Y2JtTnZibk4wSUdSbFptRjFiSFJKZEdWdFUzUnlhVzVuSUQwZ0tGeHVJQ0IwZVhCbE9pQnpkSEpwYm1jc1hHNGdJR1JoZEdFNklHRnVlU3hjYmlBZ2FYUmxiVlI1Y0dVNklGSmxZV04wTGxKbFlXTjBUbTlrWlN4Y2JpQWdhWFJsYlZOMGNtbHVaem9nYzNSeWFXNW5YRzRwSUQwK0lDaGNiaUFnUEhOd1lXNCtYRzRnSUNBZ2UybDBaVzFVZVhCbGZTQjdhWFJsYlZOMGNtbHVaMzFjYmlBZ1BDOXpjR0Z1UGx4dUtUdGNibU52Ym5OMElHUmxabUYxYkhSTVlXSmxiRkpsYm1SbGNtVnlJRDBnS0Z0c1lXSmxiRjA2SUNoemRISnBibWNnZkNCdWRXMWlaWElwVzEwcElEMCtJQ2hjYmlBZ1BITndZVzQrZTJ4aFltVnNmVG84TDNOd1lXNCtYRzRwTzF4dVkyOXVjM1FnYm05RGRYTjBiMjFPYjJSbElEMGdLQ2tnUFQ0Z1ptRnNjMlU3WEc1Y2JtWjFibU4wYVc5dUlHTm9aV05yVEdWbllXTjVWR2hsYldsdVp5aDBhR1Z0WlRvZ1ZHaGxiV1VnZkNCMWJtUmxabWx1WldRc0lIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQmpiMjV6ZENCa1pYQnlaV05oZEdWa1UzUjViR2x1WjAxbGRHaHZaSE5OWVhBZ1BTQjdYRzRnSUNBZ1oyVjBRWEp5YjNkVGRIbHNaVG9nSjJGeWNtOTNKeXhjYmlBZ0lDQm5aWFJNYVhOMFUzUjViR1U2SUNkdVpYTjBaV1JPYjJSbFEyaHBiR1J5Wlc0bkxGeHVJQ0FnSUdkbGRFbDBaVzFUZEhKcGJtZFRkSGxzWlRvZ0oyNWxjM1JsWkU1dlpHVkpkR1Z0VTNSeWFXNW5KeXhjYmlBZ0lDQm5aWFJNWVdKbGJGTjBlV3hsT2lBbmJHRmlaV3duTEZ4dUlDQWdJR2RsZEZaaGJIVmxVM1I1YkdVNklDZDJZV3gxWlZSbGVIUW5MRnh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR1JsY0hKbFkyRjBaV1JUZEhsc2FXNW5UV1YwYUc5a2N5QTlJRTlpYW1WamRDNXJaWGx6S0Z4dUlDQWdJR1JsY0hKbFkyRjBaV1JUZEhsc2FXNW5UV1YwYUc5a2MwMWhjRnh1SUNBcExtWnBiSFJsY2lnb2JtRnRaU2tnUFQ0Z2NISnZjSE5iYm1GdFpTQmhjeUJyWlhsdlppQlFjbTl3YzEwcE8xeHVYRzRnSUdsbUlDaGtaWEJ5WldOaGRHVmtVM1I1YkdsdVowMWxkR2h2WkhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hsYldVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0IwYUdWdFpTQTlJSHRjYmlBZ0lDQWdJQ0FnWlhoMFpXNWtPaUIwYUdWdFpTeGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb1pXMWxJRDBnZXlBdUxpNTBhR1Z0WlNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdSbGNISmxZMkYwWldSVGRIbHNhVzVuVFdWMGFHOWtjeTVtYjNKRllXTm9LQ2h1WVcxbEtTQTlQaUI3WEc0Z0lDQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dFkyOXVjMjlzWlZ4dUlDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGNiaUFnSUNBZ0lDQWdZRk4wZVd4cGJtY2diV1YwYUc5a0lGd2lKSHR1WVcxbGZWd2lJR2x6SUdSbGNISmxZMkYwWldRc0lIVnpaU0JjSW5Sb1pXMWxYQ0lnY0hKdmNHVnlkSGtnYVc1emRHVmhaR0JjYmlBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNoMGFHVnRaU0JoY3lCVGRIbHNhVzVuUTI5dVptbG5LVnRjYmlBZ0lDQWdJQ0FnWkdWd2NtVmpZWFJsWkZOMGVXeHBibWROWlhSb2IyUnpUV0Z3VzF4dUlDQWdJQ0FnSUNBZ0lHNWhiV1VnWVhNZ2EyVjViMllnZEhsd1pXOW1JR1JsY0hKbFkyRjBaV1JUZEhsc2FXNW5UV1YwYUc5a2MwMWhjRnh1SUNBZ0lDQWdJQ0JkWEc0Z0lDQWdJQ0JkSUQwZ0tIc2djM1I1YkdVZ2ZTd2dMaTR1WVhKbmN5a2dQVDRnS0h0Y2JpQWdJQ0FnSUNBZ2MzUjViR1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQXVMaTV6ZEhsc1pTeGNiaUFnSUNBZ0lDQWdJQ0F1TGk1d2NtOXdjMXR1WVcxbElHRnpJR3RsZVc5bUlGQnliM0J6WFNndUxpNWhjbWR6S1N4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJvWlcxbE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUlRkR0YwWlVaeWIyMVFjbTl3Y3lod2NtOXdjem9nVUhKdmNITXBJSHRjYmlBZ2JHVjBJSFJvWlcxbElEMGdZMmhsWTJ0TVpXZGhZM2xVYUdWdGFXNW5LSEJ5YjNCekxuUm9aVzFsTENCd2NtOXdjeWs3WEc0Z0lHbG1JQ2h3Y205d2N5NXBiblpsY25SVWFHVnRaU2tnZTF4dUlDQWdJSFJvWlcxbElEMGdhVzUyWlhKMFZHaGxiV1VvZEdobGJXVXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQnpkSGxzYVc1bk9pQmpjbVZoZEdWVGRIbHNhVzVuUm5KdmJWUm9aVzFsS0hSb1pXMWxLU3hjYmlBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdTbE5QVGxSeVpXVWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5ROFVISnZjSE1zSUZOMFlYUmxQaUI3WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1pHRjBZVG9nVUhKdmNGUjVjR1Z6TG1GdWVTeGNiaUFnSUNCb2FXUmxVbTl2ZERvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdkR2hsYldVNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMUJ5YjNCVWVYQmxjeTV2WW1wbFkzUXNJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtZGRLU3hjYmlBZ0lDQnBiblpsY25SVWFHVnRaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2EyVjVVR0YwYURvZ1VISnZjRlI1Y0dWekxtRnljbUY1VDJZb1hHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxDQlFjbTl3Vkhsd1pYTXViblZ0WW1WeVhTbGNiaUFnSUNBcExGeHVJQ0FnSUhCdmMzUndjbTlqWlhOelZtRnNkV1U2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lITnZjblJQWW1wbFkzUkxaWGx6T2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXVablZ1WXl3Z1VISnZjRlI1Y0dWekxtSnZiMnhkS1N4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ1pHVm1ZWFZzZEZCeWIzQnpJRDBnZTF4dUlDQWdJSE5vYjNWc1pFVjRjR0Z1WkU1dlpHVTZJR1Y0Y0dGdVpGSnZiM1JPYjJSbExGeHVJQ0FnSUdocFpHVlNiMjkwT2lCbVlXeHpaU3hjYmlBZ0lDQnJaWGxRWVhSb09pQmJKM0p2YjNRblhTeGNiaUFnSUNCblpYUkpkR1Z0VTNSeWFXNW5PaUJrWldaaGRXeDBTWFJsYlZOMGNtbHVaeXhjYmlBZ0lDQnNZV0psYkZKbGJtUmxjbVZ5T2lCa1pXWmhkV3gwVEdGaVpXeFNaVzVrWlhKbGNpeGNiaUFnSUNCMllXeDFaVkpsYm1SbGNtVnlPaUJwWkdWdWRHbDBlU3hjYmlBZ0lDQndiM04wY0hKdlkyVnpjMVpoYkhWbE9pQnBaR1Z1ZEdsMGVTeGNiaUFnSUNCcGMwTjFjM1J2YlU1dlpHVTZJRzV2UTNWemRHOXRUbTlrWlN4Y2JpQWdJQ0JqYjJ4c1pXTjBhVzl1VEdsdGFYUTZJRFV3TEZ4dUlDQWdJR2x1ZG1WeWRGUm9aVzFsT2lCMGNuVmxMRnh1SUNCOU8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0IwYUdsekxuTjBZWFJsSUQwZ1oyVjBVM1JoZEdWR2NtOXRVSEp2Y0hNb2NISnZjSE1wTzF4dUlDQjlYRzVjYmlBZ1ZVNVRRVVpGWDJOdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE1vYm1WNGRGQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUZzbmRHaGxiV1VuTENBbmFXNTJaWEowVkdobGJXVW5YUzVtYVc1a0tGeHVJQ0FnSUNBZ0lDQW9heWtnUFQ0Z2JtVjRkRkJ5YjNCelcyc2dZWE1nYTJWNWIyWWdVSEp2Y0hOZElDRTlQU0IwYUdsekxuQnliM0J6VzJzZ1lYTWdhMlY1YjJZZ1VISnZjSE5kWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtHZGxkRk4wWVhSbFJuSnZiVkJ5YjNCektHNWxlSFJRY205d2N5a3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlNodVpYaDBVSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoVDJKcVpXTjBMbXRsZVhNb2JtVjRkRkJ5YjNCektTNW1hVzVrS0NocktTQTlQbHh1SUNBZ0lDQWdheUE5UFQwZ0oydGxlVkJoZEdnblhHNGdJQ0FnSUNBZ0lEOGdibVY0ZEZCeWIzQnpXMnRkTG1wdmFXNG9KeThuS1NBaFBUMGdkR2hwY3k1d2NtOXdjMXRyWFM1cWIybHVLQ2N2SnlsY2JpQWdJQ0FnSUNBZ09pQnVaWGgwVUhKdmNITmJheUJoY3lCclpYbHZaaUJRY205d2MxMGdJVDA5SUhSb2FYTXVjSEp2Y0hOYmF5QmhjeUJyWlhsdlppQlFjbTl3YzExY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJR1JoZEdFNklIWmhiSFZsTEZ4dUlDQWdJQ0FnYTJWNVVHRjBhQ3hjYmlBZ0lDQWdJSEJ2YzNSd2NtOWpaWE56Vm1Gc2RXVXNYRzRnSUNBZ0lDQm9hV1JsVW05dmRDeGNiaUFnSUNBZ0lIUm9aVzFsTENBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJQ0FnSUNCcGJuWmxjblJVYUdWdFpUb2dYeXdnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJQ0FnTGk0dWNtVnpkRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnWTI5dWMzUWdleUJ6ZEhsc2FXNW5JSDBnUFNCMGFHbHpMbk4wWVhSbE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4MWJDQjdMaTR1YzNSNWJHbHVaeWduZEhKbFpTY3BmVDVjYmlBZ0lDQWdJQ0FnUEVwVFQwNU9iMlJsWEc0Z0lDQWdJQ0FnSUNBZ2V5NHVMbnNnY0c5emRIQnliMk5sYzNOV1lXeDFaU3dnYUdsa1pWSnZiM1FzSUhOMGVXeHBibWNzSUM0dUxuSmxjM1FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnJaWGxRWVhSb1BYdG9hV1JsVW05dmRDQS9JRnRkSURvZ2EyVjVVR0YwYUgxY2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlQxN2NHOXpkSEJ5YjJObGMzTldZV3gxWlNoMllXeDFaU2w5WEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBOEwzVnNQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJSHNnVTNSNWJHbHVaMVpoYkhWbElIMDdYRzRpWFgwPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBvYmpUeXBlO1xuXG5mdW5jdGlvbiBvYmpUeXBlKG9iaikge1xuICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopLnNsaWNlKDgsIC0xKTtcblxuICBpZiAodHlwZSA9PT0gJ09iamVjdCcgJiYgdHlwZW9mIG9ialtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICdJdGVyYWJsZSc7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ0N1c3RvbScgJiYgb2JqLmNvbnN0cnVjdG9yICE9PSBPYmplY3QgJiYgb2JqIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgLy8gRm9yIHByb2plY3RzIGltcGxlbWVudGluZyBvYmplY3RzIG92ZXJyaWRpbmcgYC5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXWBcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5dlltcFVlWEJsTG5SeklsMHNJbTVoYldWeklqcGJJbTlpYWxSNWNHVWlMQ0p2WW1vaUxDSjBlWEJsSWl3aVQySnFaV04wSWl3aWNISnZkRzkwZVhCbElpd2lkRzlUZEhKcGJtY2lMQ0pqWVd4c0lpd2ljMnhwWTJVaUxDSlRlVzFpYjJ3aUxDSnBkR1Z5WVhSdmNpSXNJbU52Ym5OMGNuVmpkRzl5SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRV1VzVTBGQlUwRXNUMEZCVkN4RFFVRnBRa01zUjBGQmFrSXNSVUZCTWtJN1FVRkRlRU1zVFVGQlRVTXNTVUZCU1N4SFFVRkhReXhOUVVGTkxFTkJRVU5ETEZOQlFWQXNRMEZCYVVKRExGRkJRV3BDTEVOQlFUQkNReXhKUVVFeFFpeERRVUVyUWt3c1IwRkJMMElzUlVGQmIwTk5MRXRCUVhCRExFTkJRVEJETEVOQlFURkRMRVZCUVRaRExFTkJRVU1zUTBGQk9VTXNRMEZCWWpzN1FVRkRRU3hOUVVGSlRDeEpRVUZKTEV0QlFVc3NVVUZCVkN4SlFVRnhRaXhQUVVGUFJDeEhRVUZITEVOQlFVTlBMRTFCUVUwc1EwRkJRME1zVVVGQlVpeERRVUZXTEV0QlFXZERMRlZCUVhwRUxFVkJRWEZGTzBGQlEyNUZMRmRCUVU4c1ZVRkJVRHRCUVVORU96dEJRVVZFTEUxQlEwVlFMRWxCUVVrc1MwRkJTeXhSUVVGVUxFbEJRMEZFTEVkQlFVY3NRMEZCUTFNc1YwRkJTaXhMUVVGdlFsQXNUVUZFY0VJc1NVRkZRVVlzUjBGQlJ5eFpRVUZaUlN4TlFVaHFRaXhGUVVsRk8wRkJRMEU3UVVGRFFTeFhRVUZQTEZGQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGUFJDeEpRVUZRTzBGQlEwUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnZZbXBVZVhCbEtHOWlham9nWVc1NUtTQjdYRzRnSUdOdmJuTjBJSFI1Y0dVZ1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvYjJKcUtTNXpiR2xqWlNnNExDQXRNU2s3WEc0Z0lHbG1JQ2gwZVhCbElEMDlQU0FuVDJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYjJKcVcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMGwwWlhKaFlteGxKenRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGNiaUFnSUNCMGVYQmxJRDA5UFNBblEzVnpkRzl0SnlBbUpseHVJQ0FnSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaUFoUFQwZ1QySnFaV04wSUNZbVhHNGdJQ0FnYjJKcUlHbHVjM1JoYm1ObGIyWWdUMkpxWldOMFhHNGdJQ2tnZTF4dUlDQWdJQzh2SUVadmNpQndjbTlxWldOMGN5QnBiWEJzWlcxbGJuUnBibWNnYjJKcVpXTjBjeUJ2ZG1WeWNtbGthVzVuSUdBdWNISnZkRzkwZVhCbFcxTjViV0p2YkM1MGIxTjBjbWx1WjFSaFoxMWdYRzRnSUNBZ2NtVjBkWEp1SUNkUFltcGxZM1FuTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhSNWNHVTdYRzU5WEc0aVhYMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICBzY2hlbWU6ICdzb2xhcml6ZWQnLFxuICBhdXRob3I6ICdldGhhbiBzY2hvb25vdmVyIChodHRwOi8vZXRoYW5zY2hvb25vdmVyLmNvbS9zb2xhcml6ZWQpJyxcbiAgYmFzZTAwOiAnIzAwMmIzNicsXG4gIGJhc2UwMTogJyMwNzM2NDInLFxuICBiYXNlMDI6ICcjNTg2ZTc1JyxcbiAgYmFzZTAzOiAnIzY1N2I4MycsXG4gIGJhc2UwNDogJyM4Mzk0OTYnLFxuICBiYXNlMDU6ICcjOTNhMWExJyxcbiAgYmFzZTA2OiAnI2VlZThkNScsXG4gIGJhc2UwNzogJyNmZGY2ZTMnLFxuICBiYXNlMDg6ICcjZGMzMjJmJyxcbiAgYmFzZTA5OiAnI2NiNGIxNicsXG4gIGJhc2UwQTogJyNiNTg5MDAnLFxuICBiYXNlMEI6ICcjODU5OTAwJyxcbiAgYmFzZTBDOiAnIzJhYTE5OCcsXG4gIGJhc2UwRDogJyMyNjhiZDInLFxuICBiYXNlMEU6ICcjNmM3MWM0JyxcbiAgYmFzZTBGOiAnI2QzMzY4Midcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5MGFHVnRaWE12YzI5c1lYSnBlbVZrTG5SeklsMHNJbTVoYldWeklqcGJJbk5qYUdWdFpTSXNJbUYxZEdodmNpSXNJbUpoYzJVd01DSXNJbUpoYzJVd01TSXNJbUpoYzJVd01pSXNJbUpoYzJVd015SXNJbUpoYzJVd05DSXNJbUpoYzJVd05TSXNJbUpoYzJVd05pSXNJbUpoYzJVd055SXNJbUpoYzJVd09DSXNJbUpoYzJVd09TSXNJbUpoYzJVd1FTSXNJbUpoYzJVd1FpSXNJbUpoYzJVd1F5SXNJbUpoYzJVd1JDSXNJbUpoYzJVd1JTSXNJbUpoYzJVd1JpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPMlZCUVdVN1FVRkRZa0VzUlVGQlFVRXNUVUZCVFN4RlFVRkZMRmRCUkVzN1FVRkZZa01zUlVGQlFVRXNUVUZCVFN4RlFVRkZMSGxFUVVaTE8wRkJSMkpETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVVoTE8wRkJTV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVVwTE8wRkJTMkpETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVV4TE8wRkJUV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVU1TE8wRkJUMkpETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVZCTE8wRkJVV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVZKTE8wRkJVMkpETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVZSTE8wRkJWV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVZaTE8wRkJWMkpETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVZoTE8wRkJXV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVZwTE8wRkJZV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVdKTE8wRkJZMkpETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVdSTE8wRkJaV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJSU3hUUVdaTE8wRkJaMEppUXl4RlFVRkJRU3hOUVVGTkxFVkJRVVVzVTBGb1FrczdRVUZwUW1KRExFVkJRVUZCTEUxQlFVMHNSVUZCUlN4VFFXcENTenRCUVd0Q1lrTXNSVUZCUVVFc1RVRkJUU3hGUVVGRk8wRkJiRUpMTEVNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJSE5qYUdWdFpUb2dKM052YkdGeWFYcGxaQ2NzWEc0Z0lHRjFkR2h2Y2pvZ0oyVjBhR0Z1SUhOamFHOXZibTkyWlhJZ0tHaDBkSEE2THk5bGRHaGhibk5qYUc5dmJtOTJaWEl1WTI5dEwzTnZiR0Z5YVhwbFpDa25MRnh1SUNCaVlYTmxNREE2SUNjak1EQXlZak0ySnl4Y2JpQWdZbUZ6WlRBeE9pQW5JekEzTXpZME1pY3NYRzRnSUdKaGMyVXdNam9nSnlNMU9EWmxOelVuTEZ4dUlDQmlZWE5sTURNNklDY2pOalUzWWpnekp5eGNiaUFnWW1GelpUQTBPaUFuSXpnek9UUTVOaWNzWEc0Z0lHSmhjMlV3TlRvZ0p5TTVNMkV4WVRFbkxGeHVJQ0JpWVhObE1EWTZJQ2NqWldWbE9HUTFKeXhjYmlBZ1ltRnpaVEEzT2lBbkkyWmtaalpsTXljc1hHNGdJR0poYzJVd09Eb2dKeU5rWXpNeU1tWW5MRnh1SUNCaVlYTmxNRGs2SUNjalkySTBZakUySnl4Y2JpQWdZbUZ6WlRCQk9pQW5JMkkxT0Rrd01DY3NYRzRnSUdKaGMyVXdRam9nSnlNNE5UazVNREFuTEZ4dUlDQmlZWE5sTUVNNklDY2pNbUZoTVRrNEp5eGNiaUFnWW1GelpUQkVPaUFuSXpJMk9HSmtNaWNzWEc0Z0lHSmhjMlV3UlRvZ0p5TTJZemN4WXpRbkxGeHVJQ0JpWVhObE1FWTZJQ2NqWkRNek5qZ3lKeXhjYm4wN1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheWlzaCA9IHJlcXVpcmUoJ2lzLWFycmF5aXNoJyk7XG5cbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgc3dpenpsZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3dpenpsZShhcmdzKSB7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgYXJnID0gYXJnc1tpXTtcblxuXHRcdGlmIChpc0FycmF5aXNoKGFyZykpIHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tL2phdmFzY3JpcHQtYXJyYXktY29uY2F0LXZzLXB1c2gvOThcblx0XHRcdHJlc3VsdHMgPSBjb25jYXQuY2FsbChyZXN1bHRzLCBzbGljZS5jYWxsKGFyZykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRzLnB1c2goYXJnKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbnN3aXp6bGUud3JhcCA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBmbihzd2l6emxlKGFyZ3VtZW50cykpO1xuXHR9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcnJheWlzaChvYmopIHtcblx0aWYgKCFvYmogfHwgdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXkgfHwgQXJyYXkuaXNBcnJheShvYmopIHx8XG5cdFx0KG9iai5sZW5ndGggPj0gMCAmJiAob2JqLnNwbGljZSBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8XG5cdFx0XHQoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIChvYmoubGVuZ3RoIC0gMSkpICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnU3RyaW5nJykpKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9