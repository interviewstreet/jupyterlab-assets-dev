"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[8102],{66116:(e,n,a)=>{a.r(n);a.d(n,{default:()=>m});var r=a(87447);var t=a.n(r);var i=a(15115);var o=a.n(i);var d=a(59238);var l=a.n(d);var s=a(50724);var c=a.n(s);var u;(function(e){e.handleLink="rendermime:handle-local-link"})(u||(u={}));const p={id:"@jupyterlab/rendermime-extension:plugin",description:"Provides the render mime registry.",optional:[i.IDocumentManager,d.ILatexTypesetter,r.ISanitizer,d.IMarkdownParser,s.ITranslator],provides:d.IRenderMimeRegistry,activate:f,autoStart:true};const m=p;const v="debugger:open-source";function f(e,n,a,r,t,i){const o=(i!==null&&i!==void 0?i:s.nullTranslator).load("jupyterlab");if(n){e.commands.addCommand(u.handleLink,{label:o.__("Handle Local Link"),execute:a=>{const r=a["path"];const t=a["id"];const i=a["scope"]||"server";if(!r){return}if(i==="kernel"){if(!e.commands.hasCommand(v)){console.warn("Cannot open kernel file: debugger sources provider not available");return}return e.commands.execute(v,{path:r})}return n.services.contents.get(r,{content:false}).then((()=>{const e=n.registry.defaultRenderedWidgetFactory(r);const a=n.openOrReveal(r,e.name);if(a&&t){a.setFragment(t)}}))}})}return new d.RenderMimeRegistry({initialFactories:d.standardRendererFactories,linkHandler:!n?undefined:{handleLink:(n,a,r)=>{if(n.tagName==="A"&&n.hasAttribute("download")){return}e.commandLinker.connectNode(n,u.handleLink,{path:a,id:r})},handlePath:(n,a,r,t)=>{e.commandLinker.connectNode(n,u.handleLink,{path:a,id:t,scope:r})}},latexTypesetter:a!==null&&a!==void 0?a:undefined,markdownParser:t!==null&&t!==void 0?t:undefined,translator:i!==null&&i!==void 0?i:undefined,sanitizer:r!==null&&r!==void 0?r:undefined})}}}]);
//# sourceMappingURL=8102.1546953d6e863bb51563.js.map?v=1546953d6e863bb51563