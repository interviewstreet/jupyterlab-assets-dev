"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[9941,5455],{55455:(e,o,n)=>{n.r(o);n.d(o,{default:()=>d});var t=n(87447);var r=n.n(t);var a=n(78098);var i=n.n(a);var s=n(4702);var c=n.n(s);const p="api/open-preview";const l=5e3;const u=8e3;const v={id:"@hackerrank/open-preview-extension:plugin",autoStart:true,activate:()=>{const e=s.ServerConnection.makeSettings();const o=a.URLExt.join(e.baseUrl,p);const n=new Map;const r=async()=>{var a;try{const r=await s.ServerConnection.makeRequest(o,{},e);const i=await r.json();if(!r.ok){throw new s.ServerConnection.ResponseError(r,i===null||i===void 0?void 0:i.message)}if(!i.runtimeId||!i.basePath){throw new Error("Couldn't get runtimeId or basePath from response. Response: "+JSON.stringify(i))}n.forEach(((e,o)=>{var r;if((r=i.openPorts)===null||r===void 0?void 0:r.includes(o)){return}t.Notification.dismiss(e);n.delete(o)}));(a=i.openPorts)===null||a===void 0?void 0:a.forEach((e=>{if(n.has(e)){return}const o=t.Notification.info(`Port ${e} is now open for preview.`,{autoClose:u,actions:[{label:"Open Preview",callback:()=>{const o=`https://${i.runtimeId}-${e}${i.basePath}`;window.open(o,"_blank")}}]});n.set(e,o)}))}catch(i){console.error("Error occured while fetching open ports. Reason: ",i)}setTimeout(r,l)};setTimeout(r,l)}};const d=v}}]);
//# sourceMappingURL=9941.1b3fc0b7ee8dc4fcab5f.js.map?v=1b3fc0b7ee8dc4fcab5f